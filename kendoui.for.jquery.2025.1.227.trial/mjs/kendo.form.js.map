{"version":3,"sources":["raw-mjs/kendo.form.js"],"names":["__meta__","id","name","category","description","depends","features","$","kendo","window","ui","NS","Widget","extend","encode","htmlEncode","VALIDATE","VALIDATEFIELD","CHANGE","CLICK","SUBMIT","CLEAR","EQUAL_SET","GROUP","ARIA_DESCRIBEDBY","DATA_STOP","DATA_ROLE","DOT","DATA_ROLE_OTP_INPUT","formStyles","form","horizontal","vertical","field","fieldsContainer","fieldWrap","fieldError","fieldHint","fieldset","layout","legend","label","emptyLabel","optional","buttonsContainer","buttonsEnd","submit","clear","invalid","hidden","formOrientation","Form","init","element","options","that","this","fn","call","deepExtend","formData","_wrapper","_setFields","_setModel","_renderContainers","renderButtons","_renderButtons","_editable","_renderBoolLabels","_renderFieldsHints","_setEvents","_applyCssClasses","events","orientation","validatable","validateOnBlur","validationSummary","errorTemplate","buttonsTemplate","messages","grid","clearButton","items","formatLabel","focusFirst","size","_noLabelfieldTemplate","styles","colSpan","_fieldTemplate","encoded","text","_boolLabelTemplate","_groupTemplate","_errorTemplate","message","_hintTemplate","width","height","wrapper","addClass","css","layoutWrapper","_setupLayoutContainer","_flattenFields","fields","concat","item","shift","result","push","apply","_defaultLabel","fieldName","customFormat","length","isFunction","split","join","trim","_formatLabel","isPlainObject","_defaultFields","formDataFields","Object","keys","itemFields","defaultFormDataFields","i","fieldInfo","fieldValue","type","editor","attributes","defaultFields","_fields","parseDate","toString","Editable","editors","_isHidden","optionalText","isHidden","_isAntiForgeryToken","data","ObservableObject","_model","MyModel","Model","define","validatorOptions","_addEditableMvvmAttributes","editable","kendoEditable","model","clearContainer","skipFocus","target","getKendoEditable","validator","_removeEditableMvvmAttributes","attr","_getItemTemplate","antiForgeryTokenName","_renderField","fieldTemplate","isHorizontal","fieldType","isBoolField","template","_toggleFieldErrorState","state","closest","toggleClass","fieldElement","find","parent","after","fieldWidgetInstance","nextLabelElement","hint","_associateHintContainer","widgetInstance","next","_errorsByName","removeAttribute","insertAfter","input","hintId","nextFocusable","getWidgetFocusableElement","toggleAttribute","_toggleHint","_renderGroup","child","renderedGroup","append","container","targetContainer","_buttonsTemplate","buttons","kendoButton","themeColor","add","appendTarget","layoutContainer","layoutClassNames","appendTo","cols","bind","_validateField","_validate","on","_submit","_clear","_changeHandler","_change","ev","toJSON","valid","error","trigger","preventDefault","errors","value","jsonModel","validate","reset","unbind","isHiddenInput","is","val","hasClass","Upload","clearAllFiles","OtpInput","_emptyValues","set","removeClass","_validateProxy","setOptions","newOptions","destroy","removeAttr","empty","off","cssProperties","registerPrefix","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.form.js","sourcesContent":["import './kendo.editable.js';\nimport './kendo.button.js';\nimport './kendo.otpinput.js';\n\nconst __meta__ = {\n        id: \"form\",\n        name: \"Form\",\n        category: \"web\",\n        description: \"The Form widget.\",\n        depends: [ \"editable\", \"button\" ],\n        features: [{\n            id: \"form-dropdowns\",\n            name: \"DropDowns\",\n            description: \"Support for DropDown editors\",\n            depends: [ \"autocomplete\", \"combobox\", \"multiselect\", \"dropdowntree\", \"multicolumncombobox\" ]\n        }, {\n            id: \"form-datepickers\",\n            name: \"DatePickers\",\n            description: \"Support for DatePicker editors\",\n            depends: [ \"dateinput\", \"datepicker\", \"datetimepicker\", \"timepicker\" ]\n        }, {\n            id: \"form-inputs\",\n            name: \"Inputs\",\n            description: \"Support for Input editors\",\n            depends: [ \"numerictextbox\", \"maskedtextbox\", \"switch\", \"rating\", \"slider\", \"colorpicker\", \"radiogroup\", \"checkboxgroup\", \"textbox\", \"textarea\", \"checkbox\", \"otpinput\" ]\n        }, {\n            id: \"form-editor\",\n            name: \"Editor\",\n            description: \"Support for Editor editor\",\n            depends: [ \"editor\" ]\n        }]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            NS = \".kendoForm\",\n            Widget = ui.Widget,\n            extend = $.extend,\n            encode = kendo.htmlEncode,\n            VALIDATE = \"validate\",\n            VALIDATEFIELD = \"validateField\",\n            VALIDATEINPUT = \"validateInput\",\n            CHANGE = \"change\",\n            CLICK = \"click\" + NS,\n            SUBMIT = \"submit\",\n            CLEAR = \"clear\",\n            MAX_WIDTH = \"max-width\",\n            SET = \"set\",\n            EQUAL_SET = \"equalSet\",\n            GROUP = \"group\",\n            ARIA_DESCRIBEDBY = \"aria-describedby\",\n            DATA_STOP = \"data-stop\",\n            DATA_ROLE = \"data-role\",\n            EDITABLE = \"editable\",\n            FORM = \"form\",\n            DOT = \".\",\n            DATA_ROLE_OTP_INPUT = \"[data-role='otpinput']\",\n            DATA_ROLE_RADIO_GROUP = \"[data-role='radiogroup']\",\n            DATA_ROLE_CHECKBOX_GROUP = \"[data-role='checkboxgroup']\";\n\n        var formStyles = {\n            form: \"k-form\",\n            horizontal: \"k-form-horizontal\",\n            vertical: \"\",\n            field: \"k-form-field\",\n            fieldsContainer: \"k-form-fields-container\",\n            fieldWrap: \"k-form-field-wrap\",\n            fieldError: \"k-form-field-error\",\n            fieldHint: \"k-form-hint\",\n            fieldset: \"k-form-fieldset\",\n            layout: \"k-form-layout\",\n            legend: \"k-form-legend\",\n            label: \"k-label k-form-label\",\n            emptyLabel: \"k-label-empty\",\n            optional: \"k-label-optional\",\n            buttonsContainer: \"k-form-buttons\",\n            buttonsEnd: \"k-buttons-end\",\n            submit: \"k-form-submit\",\n            clear: \"k-form-clear\",\n            invalid: \"k-invalid\",\n            hidden: \"k-hidden\"\n        };\n\n        var formOrientation = {\n            horizontal: \"horizontal\",\n            vertical: \"vertical\"\n        };\n\n        var Form = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                Widget.fn.init.call(that, element, options);\n\n                that.options = kendo.deepExtend({}, that.options, options);\n\n                if (options && options.formData) {\n                    that.options.formData = options.formData;\n                }\n\n                that._wrapper();\n\n                that._setFields();\n\n                that._setModel();\n\n                that._renderContainers();\n\n                if (that.options.renderButtons) {\n                    that._renderButtons();\n                }\n\n                that._editable();\n\n                that._renderBoolLabels();\n\n                that._renderFieldsHints();\n\n                that._setEvents();\n\n                that._applyCssClasses();\n            },\n\n            events: [\n                VALIDATEFIELD,\n                VALIDATE,\n                CHANGE,\n                SUBMIT,\n                CLEAR\n            ],\n\n            options: {\n                name: \"Form\",\n                orientation: formOrientation.vertical,\n                validatable: {\n                    validateOnBlur: true,\n                    validationSummary: false,\n                    errorTemplate: null\n                },\n                buttonsTemplate: null,\n                messages: {\n                    submit: \"Submit\",\n                    clear: \"Clear\",\n                    optional: \"(Optional)\"\n                },\n                layout: \"\",\n                grid: {},\n                clearButton: true,\n                formData: {},\n                items: [],\n                formatLabel: null,\n                focusFirst: false,\n                renderButtons: true,\n                size: \"medium\"\n            },\n\n            _noLabelfieldTemplate: ({ styles, colSpan, hidden, field })=>\n                                    `<div class='${encode(styles.field)} ${colSpan ? `k-col-span-${encode(colSpan)}` : '' } ${hidden ? encode(styles.hidden) : '' }'>` +\n                                        `<span class='${encode(styles.label)} ${encode(styles.emptyLabel)}'></span>` +\n                                        `<div class='k-form-field-wrap' data-container-for='${encode(field)}'></div>` +\n                                    \"</div>\",\n\n            _fieldTemplate: ({ styles, colSpan, hidden, field, label, id, optional }) =>\n                            `<div class='${encode(styles.field)} ${colSpan ? `k-col-span-${encode(colSpan)}` : ''} ${hidden ? `${encode(styles.hidden)}` : ''}'>` +\n                                ((label && !hidden) ?\n                                `<label class='${encode(styles.label)}' for='${encode(id)}' id='${encode(id)}-form-label'>` +\n                                    ((typeof label.encoded != 'undefined' && label.encoded === false) ?\n                                    label.text || label\n                                    : encode(label.text || label)) +\n                                    (label.optional ? `<span class='${encode(styles.optional)}'>${encode(optional)}</span>` : '') +\n                                \"</label>\"\n                                : '' ) +\n                                `<div class='k-form-field-wrap' data-container-for='${encode(field)}'></div>` +\n                            \"</div>\",\n\n            _boolLabelTemplate: ({ styles, colSpan, hidden, field, label, id, optional }) =>\n                            `<label class='k-checkbox-label' for='${encode(id)}' id='${encode(id)}-form-label'>` +\n                                ((typeof label.encoded != 'undefined' && label.encoded === false) ?\n                                label.text || label\n                                : encode(label.text || label)) +\n                                (label.optional ? `<span class='${encode(styles.optional)}'>${encode(optional)}</span>` : '') +\n                            \"</label>\",\n\n            _groupTemplate: ({ styles, colSpan, label }) =>\n                            `<fieldset class='${encode(styles.fieldset)} ${colSpan ? `k-col-span-${encode(colSpan)}` : ''}'>` +\n                                `<legend class='${encode(styles.legend)}'>${encode(label.text || label)}</legend>` +\n                            \"</fieldset>\",\n\n            _errorTemplate: ({ field, message }) => `<span class='k-form-error' id='${field}-form-error'><div>${message}</div></span>`,\n\n            _hintTemplate: ({ id, message }) => `<div class='k-form-hint' id='${id}-form-hint'><span>${message}</span></div>`,\n\n            _wrapper: function() {\n                var that = this,\n                    options = that.options,\n                    formStyles = Form.styles,\n                    width = options.width,\n                    height = options.height;\n\n                that.wrapper = that.element\n                    .addClass(formStyles.form)\n                    .addClass(formStyles[options.orientation]);\n\n                if (height) {\n                    that.wrapper.height(height);\n                }\n\n                if (width) {\n                    that.wrapper.css(MAX_WIDTH, width);\n                }\n\n                that.layoutWrapper = that._setupLayoutContainer(that.wrapper, {\n                    grid: options.grid,\n                    layout: options.layout\n                });\n            },\n\n            _flattenFields: function(fields) {\n                var items = [].concat(fields),\n                    item = items.shift(),\n                    result = [],\n                    push = [].push;\n\n                while (item) {\n                    if (item.items) {\n                        push.apply(items, item.items);\n                    } else {\n                        push.call(result, item);\n                    }\n\n                    item = items.shift();\n                }\n\n                return result;\n            },\n\n            _defaultLabel: function(fieldName) {\n                var that = this,\n                    customFormat = that.options.formatLabel;\n\n                if (!fieldName.length) {\n                    return;\n                }\n\n                if (kendo.isFunction(customFormat)) {\n                    return customFormat(fieldName);\n                }\n\n                return fieldName.split(/(.*[a-z])(?=[A-Z])/).join(\" \").trim() + \":\";\n            },\n\n            _formatLabel: function(field, label) {\n                var that = this,\n                    text = $.isPlainObject(label) ? label.text : label;\n\n                if (text !== undefined$1) {\n                    return label;\n                }\n\n                return that._defaultLabel(field);\n            },\n\n            _defaultFields: function() {\n                var that = this,\n                    options = that.options,\n                    formDataFields = Object.keys(options.formData || {}),\n                    itemFields = options.items || {},\n                    defaultFormDataFields = [],\n                    field;\n\n                if (itemFields.length) {\n                    return itemFields;\n                }\n\n                for (var i = 0; i < formDataFields.length; i += 1) {\n                    field = formDataFields[i];\n\n                    defaultFormDataFields.push({\n                        field: field,\n                        id: field\n                    });\n                }\n\n                return defaultFormDataFields;\n            },\n\n            _setFields: function() {\n                var that = this,\n                    defaultFields = that._flattenFields(that._defaultFields()),\n                    formData = that.options.formData || {},\n                    fieldInfo, fieldValue, type, editor, attributes;\n\n                that._fields = [];\n\n                for (var field in defaultFields) {\n                    fieldInfo = defaultFields[field];\n                    fieldValue = formData[fieldInfo.field];\n\n                    type = typeof fieldInfo.editor === \"string\" ? fieldInfo.editor :\n                        kendo.type(fieldValue ? kendo.parseDate(fieldValue.toString()) || fieldValue : fieldValue);\n\n                    editor = kendo.isFunction(fieldInfo.editor) ? fieldInfo.editor :\n                         ui.Editable.fn.options.editors[type] ? \"\" : fieldInfo.editor;\n\n                    if (!that._isHidden(fieldInfo.editor)) {\n                        if (fieldInfo.label) {\n                            attributes = {\n                                \"aria-labelledby\": fieldInfo.id || fieldInfo.field + \"-form-label\"\n                            };\n                        } else if (!fieldInfo.attributes || !fieldInfo.attributes[\"aria-label\"]) {\n                            attributes = {\n                                \"aria-label\": fieldInfo.name || fieldInfo.field\n                            };\n                        }\n                    }\n\n                    fieldInfo = extend(true, {\n                        label: fieldInfo.label || fieldInfo.name || fieldInfo.field,\n                        optionalText: that.options.messages.optional\n                    }, fieldInfo, {\n                        id: fieldInfo.id || fieldInfo.field,\n                        name: fieldInfo.name || fieldInfo.field,\n                        type: type,\n                        editor: editor,\n                        attributes: attributes,\n                        isHidden: that._isHidden(fieldInfo.editor) || that._isAntiForgeryToken(fieldInfo.name || fieldInfo.field)\n                    });\n\n                    that._fields[field] = fieldInfo;\n                }\n            },\n\n            _setModel: function() {\n                var that = this,\n                    options = that.options,\n                    formData = options.formData || {};\n\n                if (options.formData instanceof kendo.data.ObservableObject) {\n                    that._model = formData;\n                    return;\n                }\n\n                var MyModel = kendo.data.Model.define({ fields: that._fields });\n\n                that._model = new MyModel(formData);\n            },\n\n            _editable: function() {\n                var that = this,\n                    options = that.options,\n                    validatorOptions = that.options.validatable;\n\n                that._addEditableMvvmAttributes();\n\n                that.editable = that.wrapper.kendoEditable({\n                    model: that._model,\n                    fields: that._fields || [],\n                    validateOnBlur: validatorOptions.validateOnBlur,\n                    validationSummary: validatorOptions.validationSummary,\n                    errorTemplate: validatorOptions.errorTemplate || that._errorTemplate,\n                    clearContainer: false,\n                    skipFocus: !options.focusFirst,\n                    target: that,\n                    size: options.size\n                }).getKendoEditable();\n\n                that.validator = that.editable.validatable;\n\n                that._removeEditableMvvmAttributes();\n            },\n\n            _addEditableMvvmAttributes: function() {\n                // required for two mvvm bindable widgets on one element\n                this.wrapper.attr(DATA_ROLE, EDITABLE);\n            },\n\n            _removeEditableMvvmAttributes: function() {\n                // required for two mvvm bindable widgets on one element\n                this.wrapper\n                    .attr(DATA_STOP, true)\n                    .attr(DATA_ROLE, FORM);\n            },\n\n            _getItemTemplate: function(type) {\n                var that = this,\n                    template;\n\n                if (type === GROUP) {\n                    template = that._groupTemplate;\n                } else {\n                    template = that._fieldTemplate;\n                }\n\n                return template;\n            },\n\n            _isHidden: function(editor) {\n                return typeof editor === \"string\" && editor === \"hidden\";\n            },\n\n            _isAntiForgeryToken: function(field) {\n                return field === ui.Editable.antiForgeryTokenName;\n\n            },\n\n            _renderField: function(item) {\n                var that = this,\n                    formStyles = Form.styles,\n                    isHorizontal = that.options.orientation === formOrientation.horizontal,\n                    fieldType = that._model.fields && that._model.fields[item.field] && that._model.fields[item.field].type,\n                    isBoolField = fieldType && fieldType === \"boolean\",\n                    fieldTemplate, renderedField;\n\n                if (isBoolField && isHorizontal && !item.editor) {\n                    fieldTemplate = that._noLabelfieldTemplate;\n                } else {\n                    fieldTemplate = that._fieldTemplate;\n                }\n\n                renderedField = (kendo.template(fieldTemplate)({\n                    styles: formStyles,\n                    id: item.id || item.field || \"\",\n                    field: item.field || \"\",\n                    label: isBoolField && !item.editor ? null : that._formatLabel(item.field, item.label),\n                    colSpan: item.colSpan || \"\",\n                    optional: that.options.messages.optional,\n                    hidden: that._isHidden(item.editor) || that._isAntiForgeryToken(item.field)\n                }));\n\n                return renderedField;\n            },\n\n            _toggleFieldErrorState: function(element, state) {\n                var field = element.closest(DOT + formStyles.field);\n\n                if (field.length) {\n                    field.toggleClass(formStyles.fieldError, state);\n                }\n            },\n\n            _renderBoolLabels: function() {\n                var that = this,\n                    formStyles = Form.styles,\n                    fields = that._fields,\n                    field, fieldElement;\n\n                for (var i = 0; i < fields.length; i += 1) {\n                    field = fields[i];\n                    fieldElement = that.wrapper.find(\"[name='\" + field.name + \"']:not([type='hidden'])\");\n\n                    if (!fieldElement || !field.label || field.isHidden || field.type !== \"boolean\" || field.editor) {\n                        continue;\n                    }\n\n                    fieldElement.parent().after(kendo.template(that._boolLabelTemplate)({\n                        styles: formStyles,\n                        id: field.id || field.field || \"\",\n                        optional: that.options.messages.optional,\n                        label: that._formatLabel(field.field, field.label)\n                    }));\n                }\n            },\n\n            _renderFieldsHints: function() {\n                var that = this,\n                    fields = that._fields,\n                    field, fieldWidgetInstance, fieldElement, nextLabelElement, hint;\n\n                for (var i = 0; i < fields.length; i += 1) {\n                    field = fields[i];\n                    fieldElement = that.wrapper.find(`[name='${field.name}'],[id='${field.name}']`);\n\n                    if (!fieldElement || !field.hint || field.isHidden) {\n                        continue;\n                    }\n\n                    hint = $(kendo.template(that._hintTemplate)({ message: field.hint || \"\", id: field.id }));\n\n                    that._associateHintContainer(fieldElement, hint.attr(\"id\"));\n\n                    fieldWidgetInstance = kendo.widgetInstance(fieldElement);\n\n                    if (fieldWidgetInstance) {\n                        nextLabelElement = fieldWidgetInstance.element.next(\"label[for='\" + fieldWidgetInstance.element.attr(\"id\") + \"']\");\n                        fieldElement = nextLabelElement.length ? nextLabelElement : fieldWidgetInstance.wrapper;\n                    }\n\n                    if (that.validator._errorsByName(field.name).length) {\n                        hint.toggleClass(formStyles.hidden);\n                        kendo.removeAttribute(fieldElement, ARIA_DESCRIBEDBY, hint.attr(\"id\"));\n                    }\n\n                    hint.insertAfter(fieldElement);\n                }\n            },\n\n            _associateHintContainer: function(input, hintId) {\n                var nextFocusable = kendo.getWidgetFocusableElement(input);\n\n                if (!nextFocusable || !hintId) {\n                    return;\n                }\n\n                kendo.toggleAttribute(nextFocusable, ARIA_DESCRIBEDBY, hintId);\n            },\n\n            _toggleHint: function(element, state) {\n                var that = this,\n                    field = element.closest(DOT + formStyles.field),\n                    hint;\n\n                if (field.length) {\n                    hint = field.find(DOT + formStyles.fieldHint);\n\n                    if (hint.length) {\n                        hint.toggleClass(formStyles.hidden, state);\n                        that._associateHintContainer(element, hint.attr(\"id\"));\n                    }\n                }\n            },\n\n            _renderGroup: function(item) {\n                var that = this,\n                    type = item.type,\n                    child, renderedGroup, fieldsContainer;\n\n                fieldsContainer = renderedGroup = $(kendo.template(that._getItemTemplate(type))({\n                    styles: formStyles,\n                    label: item.label || \"\",\n                    colSpan: item.colSpan\n                }));\n\n                fieldsContainer = that._setupLayoutContainer(renderedGroup, {\n                    grid: item.grid,\n                    layout: item.layout\n                }) || renderedGroup;\n\n                for (var i = 0; i < item.items.length; i += 1) {\n                    child = item.items[i];\n                    fieldsContainer.append(that._renderField(child));\n                }\n\n                return renderedGroup;\n            },\n\n            _renderContainers: function() {\n                var that = this,\n                    defaultFields = that._defaultFields(),\n                    columnsLayout = that.options.layout === \"grid\",\n                    targetContainer = columnsLayout ? that.layoutWrapper : that.wrapper,\n                    item, type, container;\n\n                for (var i = 0; i < defaultFields.length; i += 1) {\n                    item = defaultFields[i];\n                    type = item.type;\n\n                    if (type === GROUP) {\n                        container = that._renderGroup(item);\n                    } else {\n                        container = that._renderField(item);\n                    }\n\n                    targetContainer.append(container);\n                }\n            },\n\n            _buttonsTemplate: function() {\n                var options = this.options,\n                    messages = options.messages,\n                    formStyles = Form.styles,\n                    buttons, submit, clear;\n\n                if (options.buttonsTemplate !== null) {\n                    buttons = kendo.template(options.buttonsTemplate)({\n                        styles: formStyles,\n                        messages: messages\n                    });\n                } else {\n                    submit = $(\"<button class='\" + formStyles.submit + \"'>\" + encode(messages.submit) + \"</button>\").kendoButton({\n                        type: \"submit\",\n                        themeColor: \"primary\",\n                        size: options.size\n                    });\n\n                    buttons = submit;\n\n                    if (options.clearButton) {\n                        clear = $(\"<button class='\" + formStyles.clear + \"'>\" + encode(messages.clear) + \"</button>\").kendoButton({\n                            size: options.size\n                        });\n\n                        buttons = submit.add(clear);\n                    }\n                }\n\n                return buttons;\n            },\n\n            _renderButtons: function() {\n                var that = this,\n                    wrapper = that.wrapper,\n                    options = that.options,\n                    formStyles = Form.styles,\n                    isHorizontal = options.orientation === formOrientation.horizontal,\n                    buttonsContainer = wrapper.find(DOT + formStyles.buttonsContainer),\n                    buttons;\n\n                if (!buttonsContainer.length) {\n                    buttonsContainer = $(\"<div />\")\n                        .addClass(formStyles.buttonsContainer)\n                        .addClass(isHorizontal ? formStyles.buttonsEnd : \"\");\n                }\n\n                buttons = that._buttonsTemplate();\n\n                buttonsContainer.append(buttons);\n\n                that.element.append(buttonsContainer);\n            },\n\n            _setupLayoutContainer: function(appendTarget, options) {\n                var layout = options.layout,\n                    grid = options.grid,\n                    layoutClassNames = [],\n                    layoutContainer, rowsGap, colsGap;\n\n                if (typeof layout === \"string\" && layout !== \"\") {\n                    layoutContainer = $(\"<div></div>\")\n                        .appendTo(appendTarget)\n                        .addClass(formStyles.layout);\n\n                    layoutClassNames.push(\"k-d-\" + layout);\n                }\n\n                if (layout === \"grid\" && typeof grid === \"object\") {\n                    if (typeof grid.cols === \"number\") {\n                        layoutClassNames.push(\"k-grid-cols-\" + grid.cols);\n                    } else if (typeof grid.cols === \"string\") {\n                        layoutContainer.css(\"grid-template-columns\", grid.cols);\n                    }\n\n                    layoutClassNames.push(\"k-gap-x-\" + grid.cols);\n                }\n\n                if (layoutContainer) {\n                    layoutContainer.addClass(layoutClassNames.join(\" \"));\n                }\n\n                return layoutContainer;\n            },\n\n            _setEvents: function() {\n                var that = this,\n                    validator = that.validator;\n\n                validator\n                    .bind(VALIDATEINPUT, that._validateField.bind(that))\n                    .bind(VALIDATE, that._validate.bind(that));\n\n                that.wrapper\n                    .on(SUBMIT + NS, that._submit.bind(that))\n                    .on(CLEAR + NS, that._clear.bind(that))\n                    .on(CLICK + NS, DOT + formStyles.clear, that._clear.bind(that));\n\n                if (!that._changeHandler) {\n                    that._changeHandler = that._change.bind(that);\n                }\n\n                that._model.bind(CHANGE, that._changeHandler);\n            },\n\n            _validateField: function(ev) {\n                var that = this,\n                    data = {\n                        model: that._model.toJSON(),\n                        valid: ev.valid,\n                        field: ev.field,\n                        error: ev.error,\n                        input: ev.input\n                    };\n\n                that._toggleFieldErrorState(data.input, !data.valid);\n\n                that._toggleHint(data.input, !data.valid);\n\n                if (that.trigger(VALIDATEFIELD, data)) {\n                    ev.preventDefault();\n                }\n            },\n\n            _validate: function(ev) {\n                var that = this,\n                    data = {\n                        model: that._model.toJSON(),\n                        valid: ev.valid,\n                        errors: ev.errors\n                    };\n\n                that.trigger(VALIDATE, data);\n            },\n\n            _change: function(ev) {\n                var that = this,\n                    field = ev.field,\n                    data = {\n                        field: field,\n                        value: that._model[field]\n                    };\n\n                that.trigger(CHANGE, data);\n            },\n\n            _submit: function(ev) {\n                var that = this,\n                    jsonModel = that._model.toJSON();\n\n                if (that.trigger(SUBMIT, { model: jsonModel })) {\n                    ev.preventDefault();\n                }\n            },\n\n            _clear: function(ev) {\n                var that = this;\n\n                ev.preventDefault();\n\n                that.clear();\n\n                that.trigger(CLEAR);\n            },\n\n            validate: function() {\n                var that = this,\n                    validator = that.validator;\n\n                if (!validator) {\n                    return;\n                }\n\n                return validator.validate();\n            },\n\n            clear: function() {\n                var that = this,\n                    fields = that._fields,\n                    model = that._model,\n                    editable = that.editable,\n                    validateOnBlur = that.validator.options.validateOnBlur;\n\n                that.validator.reset();\n\n                if (validateOnBlur) {\n                    model\n                        .unbind(SET)\n                        .unbind(EQUAL_SET);\n                }\n\n                for (var i = 0; i < fields.length; i += 1) {\n                    var field = fields[i].field;\n                    var element = that.wrapper.find(\"[name='\" + field + \"']\");\n                    var widgetInstance = kendo.widgetInstance(element);\n                    var isHiddenInput = element.is(\"input[type=hidden]\");\n\n                    if (!element.is(DATA_ROLE_CHECKBOX_GROUP) && !element.is(DATA_ROLE_RADIO_GROUP) && !isHiddenInput || element.is(DATA_ROLE_OTP_INPUT)) {\n                        element.val(\"\");\n                    }\n\n                    if (!widgetInstance && element.is(DATA_ROLE_OTP_INPUT)) {\n                        widgetInstance = kendo.widgetInstance(element);\n                    }\n\n                    if (!widgetInstance && element.hasClass(\"k-hidden\")) {\n                        widgetInstance = kendo.widgetInstance(element.closest(\".k-signature\"));\n                    }\n\n                    if (widgetInstance) {\n                        if (kendo.ui.Upload && widgetInstance instanceof kendo.ui.Upload) {\n                            widgetInstance.clearAllFiles();\n                        } else if (kendo.ui.OtpInput && widgetInstance instanceof kendo.ui.OtpInput) {\n                            widgetInstance._emptyValues();\n                            widgetInstance.value(null);\n                        } else {\n                            widgetInstance.value(null);\n                        }\n                    }\n\n                    that._toggleHint(element, false);\n\n                    if (typeof model[field] === \"boolean\") {\n                        element.val(\"false\");\n                        model.set(field, false);\n                    } else if (!isHiddenInput) {\n                        model.set(field, null);\n                    }\n                }\n\n                that.wrapper.find(DOT + formStyles.fieldError)\n                    .removeClass(formStyles.fieldError);\n\n                if (validateOnBlur) {\n                    model\n                        .bind(SET, editable._validateProxy)\n                        .bind(EQUAL_SET, editable._validateProxy);\n                }\n            },\n\n            setOptions: function(newOptions) {\n                var that = this;\n\n                that.destroy();\n\n                that.wrapper\n                    .removeClass(formStyles.horizontal)\n                    .removeAttr(DATA_STOP)\n                    .empty();\n\n                that.init(that.element, newOptions);\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.wrapper.off(NS);\n\n                if (that._model) {\n                    that._model.unbind(CHANGE, that._changeHandler);\n                    that._changeHandler = null;\n                }\n\n                Widget.fn.destroy.call(that.editable);\n\n                Widget.fn.destroy.call(that);\n\n                if (that.editable) {\n                    that.editable.destroy();\n                    that.editable = null;\n                }\n            }\n        });\n\n        kendo.cssProperties.registerPrefix(\"Form\", \"k-form-\");\n\n        ui.plugin(Form);\n\n        extend(true, Form, { styles: formStyles });\n\n  })(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}
{"version":3,"sources":["raw-mjs/kendo.taskboard.js"],"names":["$","kendo","window","ui","Observable","encode","htmlEncode","extend","DOT","NS","CLICK","ACTION","TaskBoardColumnStyles","element","header","headerText","ellipsis","spacer","actions","cardsContainer","columnCards","actionButton","card","cardTitle","sortableSuffix","textbox","input","newColumn","editColumn","disabled","dragPlaceholder","dragHint","ignoreDrag","grabbingCursor","preventDefault","ev","TaskBoardColumn","init","options","dataItem","that","this","_dataItem","sortableUniqueClass","sortableIdentifier","styles","_render","_attachEvents","states","isReorderable","_initSortable","fn","call","empty","container","addCard","cardHtml","append","edit","addClass","_renderEditHeader","getDataItem","cards","children","template","data","getter","dataTextField","buttons","editTemplate","messages","attr","icon","spriteCssClass","text","command","html","renderButton","iconClass","fillMode","builtinButtons","name","rules","deleteColumn","defaultButtons","headerLabelId","guid","uid","css","width","appendTo","_renderHeader","_buildActionsHtml","setTimeout","find","trigger","i","length","button","isPlainObject","Object","keys","_validateRules","tool","split","_actionClick","target","closest","value","_textboxBlur","on","bind","keyCode","ENTER","dirClass","isRtl","sortable","Sortable","ignore","connectWith","filter","hint","clone","offsetWidth","height","offsetHeight","placeholder","move","_move","start","_start","end","_end","change","_change","draggable","userEvents","unbind","_select","ignoreDragSelectors","event","is","columnElement","sender","parents","moveArgs","action","newIndex","destroy","off","TaskBoardNewColumn","taskboard","Column","NewColumn","jQuery","TaskBoardCard","resources","contentTemplate","hbox","title","link","selectable","dataTitleField","cardMenuButton","body","dataDescriptionField","cardMenuButtonTemplate","headerActions","flatButton","actionsIcon","categoryColor","moveCursor","cardMenu","_resources","borderDir","isDisabled","toggleClass","dataCategoryField","color","get","categoryBorder","isSelectable","key","resource","field","cardResources","multiple","dataSource","view","resourceIndex","cardResource","valuePrimitive","dataValueField","dataIndex","resourceColor","dataColorField","result","push","_buildTemplate","format","headerTemplate","bodyTemplate","Card","ContextMenu","TaskBoardCardMenu","_overrideTemplates","_extendItems","_onSelect","_onOpen","_focus","templates","sprite","defaultItems","editCard","deleteCard","events","concat","item","items","_append","_extendItem","isEmptyObject","args","CardMenu","TaskBoardCommand","Class","_confirm","content","okText","cancel","confirm","taskboardOptions","editable","confirmation","fakePromise","Deferred","resolve","kendoConfirm","buttonLayout","open","AddColumnCommand","exec","column","columns","each","index","enableByColumn","addColumn","EditColumnCommand","DeleteColumnCommand","columnDS","columnsDataSource","deleteColumnConfirm","done","cancelChanges","remove","sync","SaveColumnCommand","columnSettings","val","set","CancelEditColumnCommand","MoveFocusCommand","columnIndex","cardElement","currentColumnIndex","direction","Math","max","min","_getColumnByElement","eq","_moveFromCardFocus","focusCard","currentIndex","seekFocusableCard","_getFocusableCard","focus","lastIndex","focusable","TaskBoardBaseCardCommand","_updateOrder","nextCard","dataOrderField","currentCard","cardIndex","map","idx","prevCard","SelectCardCommand","SaveChangesCommand","taskBoardOptions","receivedStatus","dataStatusField","targetColumn","_getColumn","activeElm","document","activeElement","pane","form","validate","then","DeleteCardCommand","deleteCardConfirm","fail","MoveCardCommand","EditCardCommand","_openPane","AddCardCommand","OpenPaneCommand","ClosePaneCommand","_closePane","SearchCommand","filters","searchOptions","search","operator","fields","_buildFilters","logic","Command","commands","Form","TaskBoardPane","_commandClick","fieldFormat","close","buttonTemplate","themeColor","delete","saveChanges","create","buttonsContainer","footerActions","footerActionButtons","_renderContent","_buildButtonsHtml","_buildHeaderTemplate","primary","TaskBoardPreviewPane","previewPane","preview","TaskBoardEditPane","formSettings","label","buttonsTemplate","formLabelId","focusFirst","formData","TaskBoardCreatePane","columnStatusField","firstColumn","at","status","add","createNewCard","Pane","panes","Preview","Edit","Create","baseButton","primaryButton","Keyboard","register","registerShortcut","selector","shortcut","isNaN","toUpperCase","charCodeAt","ctrlKey","shiftKey","altKey","handler","_handler","shortcuts","_getAction","_trigger","_compareShortcut","_getShortcutModifier","navigator","platform","indexOf","metaKey","KeyboardManager","__meta__","id","category","description","depends","TaskBoardStyles","wrapper","toolbar","columnsContainer","selected","undefined$1","Widget","DataSource","isArray","Array","GENERIC","MOVE","MOVE_START","MOVE_END","SELECT","EXECUTE","CHANGE","ERROR","DATABINDING","DATABOUND","COLUMNSDATABINDING","COLUMNSDATABOUND","TaskBoard","_sortableIdentifier","_wrapper","_columnsDataSource","_initResources","_dataSource","_initToolbar","_initCardMenu","_initKeyboard","autoBind","load","notify","reorderable","previewCard","defaultTools","type","overflow","component","componentOptions","commandOn","_columns","merge","itemsByStatus","itemsByColumn","columnElm","fetchPromises","_progress","fetch","when","apply","read","cardElm","getByUid","columnDataItem","columnByStatus","select","toggle","removeClass","_extendExecArgs","saveCard","model","_buildStates","_createNewModel","insert","before","executeCommand","saveColumn","keyboardManager","enable","readOnly","readOnlyByColumn","setDataSource","setColumnsDataSource","_renderCards","after","outerWidth","parseInt","ESC","headerElm","contentElm","colsContainer","tools","toolbarElm","toolbarOptions","_processTools","parentMessages","ToolBar","_toolbarClick","isDefaultTool","forEach","t","temp","hidden","_isToolEnabled","toolName","found","isEditable","_isEditable","_isReorderable","_isSelectable","isReadOnly","isSearchable","_isSearchable","notLocalColumns","transport","LocalTransport","support","commandName","commandOptions","console","warn","cardDataItem","draggableEvent","elm","ns","sort","dir","schema","defaultValue","_columnsChangeHandler","_columnsErrorHandler","_columnsDataSourceChange","_error","statusField","_moveEnd","_moveStart","_changeOrder","_tabindex","_changeHandler","_errorHandler","_clearColumns","_renderCard","cardMenuOptions","showOn","alignToAnchor","_addResource","_resourceDataSource","resourceDS","progress","_registerShortcuts","DELETE","UP","DOWN","LEFT","RIGHT","plugin","kendo$1"],"mappings":"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","file":"kendo.taskboard.js","sourcesContent":["import './kendo.sortable.js';\nimport './kendo.html.button.js';\nimport './kendo.core.js';\nimport './kendo.icons.js';\nimport './kendo.menu.js';\nimport './kendo.dialog.js';\nimport './kendo.form.js';\nimport './kendo.data.js';\nimport './kendo.toolbar.js';\nimport './kendo.textbox.js';\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        Observable = kendo.Observable,\n        encode = kendo.htmlEncode,\n        extend = $.extend,\n\n        DOT = \".\",\n        NS = DOT + \"kendoTaskBoardColumn\",\n\n        CLICK = \"click\",\n        BLUR = \"blur\",\n\n        MOVE = \"move\",\n        MOVE_START = \"moveStart\",\n        MOVE_END = \"moveEnd\",\n        CHANGE = \"change\",\n        ACTION = \"action\";\n\n    var TaskBoardColumnStyles = {\n        element: \"k-taskboard-column\",\n        header: \"k-taskboard-column-header\",\n        headerText: \"k-taskboard-column-header-text\",\n        ellipsis: \"k-text-ellipsis\",\n        spacer: \"k-spacer\",\n        actions: \"k-taskboard-column-header-actions\",\n        cardsContainer: \"k-taskboard-column-cards-container\",\n        columnCards: \"k-taskboard-column-cards\",\n        actionButton: \"k-taskboard-column-action-button\",\n        card: \"k-taskboard-card\",\n        cardTitle: \"k-card-title\",\n        sortableSuffix: \"-kendosortable\",\n        textbox: \"k-textbox k-input k-input-md k-rounded-md k-input-solid\",\n        input: \"k-input-inner\",\n        newColumn: \"k-taskboard-column-new\",\n        editColumn: \"k-taskboard-column-edit\",\n        disabled: \"k-disabled\",\n        dragPlaceholder: \"k-taskboard-drag-placeholder\",\n        dragHint: \"k-taskboard-drag-hint\",\n        ignoreDrag: \"k-taskboard-drag-ignore\",\n        grabbingCursor: \"k-cursor-grabbing\"\n    };\n\n    function preventDefault(ev) { ev.preventDefault(); }\n\n    var TaskBoardColumn = Observable.extend({\n        init: function(options, dataItem) {\n            var that = this;\n\n            that._dataItem = dataItem;\n            that.options = extend(true, {}, options);\n\n            that.sortableUniqueClass = that.options.sortableIdentifier + TaskBoardColumn.styles.sortableSuffix;\n            that._render();\n            that._attachEvents();\n\n            if (options.states.isReorderable) {\n                that._initSortable();\n            }\n\n            Observable.fn.init.call(that);\n        },\n\n        empty: function() {\n            var that = this;\n            that.container.empty();\n        },\n\n        addCard: function(cardHtml) {\n            var that = this;\n            that.container.append(cardHtml);\n        },\n\n        edit: function() {\n            var that = this,\n                styles = TaskBoardColumn.styles;\n\n            that.element.addClass(styles.editColumn);\n            that._renderEditHeader();\n        },\n\n        getDataItem: function() {\n            return this._dataItem;\n        },\n\n        cards: function() {\n            var that = this;\n\n            return that.container.children();\n        },\n\n        template: (data) => `<div class=\"${encode(data.styles.headerText)} ${encode(data.styles.ellipsis)}\">${kendo.getter(data.dataTextField)(data)}</div>` +\n                  `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n                  `${data.buttons}`,\n\n        editTemplate: (data) => `<div class=\"${encode(data.styles.headerText)} ${encode(data.styles.ellipsis)}\">` +\n                        `<span class=\"${encode(data.styles.textbox)}\">` +\n                            `<input class=\"${encode(data.styles.input)}\" placeholder=\"${encode(kendo.getter(data.dataTextField)(data) ? data.messages.editColumn : data.messages.newColumn)}\" ${encode(kendo.attr(\"command\"))}=\"SaveColumnCommand\" value=\"${encode(kendo.getter(data.dataTextField)(data))}\" />` +\n                        '</span>' +\n                        '</div>' +\n                        `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n                        `${data.buttons}`,\n\n        actionButton: ({ styles, icon, spriteCssClass, text, command, options }) =>\n                    kendo.html.renderButton(`<button class=\"${encode(styles.actionButton)}\" title=\"${encode(text)}\" ${encode(kendo.attr(\"command\"))}=\"${encode(command)}\" ${options ? encode(kendo.attr('options')) + \"=\" + encode(options) : \"\"}></button>`, {\n                        icon: encode(icon),\n                        iconClass: `k-button-icon ${encode(spriteCssClass)}`,\n                        fillMode: \"flat\"\n                    }),\n\n        builtinButtons: {\n            \"editColumn\": { name: \"editColumn\", icon: \"pencil\", text: \"Edit Column\", command: \"EditColumnCommand\", rules: \"isEditable\" },\n            \"addCard\": { name: \"addCard\", icon: \"plus\", text: \"Add Card\", command: \"AddCardCommand\", rules: \"isEditable\" },\n            \"deleteColumn\": { name: \"deleteColumn\", icon: \"x\", text: \"Delete Column\", command: \"DeleteColumnCommand\", rules: \"isEditable\" }\n        },\n\n        defaultButtons: [ \"editColumn\", \"addCard\", \"deleteColumn\" ],\n\n        _render: function() {\n            var that = this,\n                styles = TaskBoardColumn.styles,\n                headerLabelId = kendo.guid(),\n                element = $(\"<div class='\" + styles.element + \"'></div>\")\n                    .attr(kendo.attr(\"uid\"), that._dataItem.uid)\n                    .css({\n                        width: that.options.width\n                    })\n                    .attr(\"role\", \"list\").attr(\"aria-labelledby\", headerLabelId),\n                header = $(\"<div class='\" + styles.header + \"'></div>\"),\n                cardsContainer = $(\"<div class='\" + styles.cardsContainer + \"'></div>\"),\n                columnCards = $(\"<div class='\" + styles.columnCards + \"'></div>\");\n\n            that.header = header.appendTo(element).attr(\"id\", headerLabelId);\n\n            that._renderHeader();\n\n            cardsContainer.appendTo(element);\n            that.container = columnCards\n                                .appendTo(cardsContainer)\n                                .addClass(that.sortableUniqueClass);\n\n            that.element = element;\n        },\n\n        _renderHeader: function() {\n            var that = this,\n                styles = TaskBoardColumn.styles,\n                options = that.options,\n                template = options.template ? options.template : that.template;\n\n            that.header.append(kendo.template(template)(extend(true, {}, {\n                styles: styles,\n                buttons: that._buildActionsHtml(),\n                dataTextField: options.dataTextField\n            }, that._dataItem)));\n        },\n\n        _renderEditHeader: function() {\n            var that = this,\n                styles = TaskBoardColumn.styles,\n                options = that.options,\n                template = options.editTemplate ? options.editTemplate : that.editTemplate;\n\n            that.header.html(\"\");\n\n            that.header.append(kendo.template(template)(extend(true, {}, {\n                styles: styles,\n                messages: options.messages,\n                buttons: that._buildActionsHtml(),\n                dataTextField: options.dataTextField\n            }, that._dataItem)));\n\n            setTimeout(function() {\n                that.header.find(\"input\").trigger(\"focus\");\n            }, 0);\n\n            that.header.find(DOT + styles.actions).addClass(styles.disabled);\n        },\n\n        _buildActionsHtml: function() {\n            var that = this,\n                options = that.options,\n                messages = options.messages,\n                buttons = options.buttons || that.defaultButtons,\n                styles = TaskBoardColumn.styles,\n                html = \"<div class='\" + styles.actions + \"'>\";\n\n            for (var i = 0; i < buttons.length; i++) {\n                var button = buttons[i];\n                button = ($.isPlainObject(button) && Object.keys(button).length === 1 && button.name) ? button.name : button;\n\n                if (typeof button === \"string\") {\n                    button = extend(true, {},\n                        that.builtinButtons[button] || { spriteCssClass: button, command: button + \"Command\" },\n                        { text: messages[button] || button }\n                    );\n                } else if ($.isPlainObject(button) && button.name) {\n                    button = extend(true, button,\n                        { text: messages[button.name] }\n                    );\n                }\n\n                if (!that._validateRules(button)) {\n                    continue;\n                }\n\n                button.spriteCssClass = button.spriteCssClass || \"\";\n\n                html += kendo.template(that.actionButton)(extend(true, {}, {\n                    styles: styles,\n                    options: false\n                }, button));\n            }\n\n            html += \"</div>\";\n\n            return html;\n        },\n\n        _validateRules: function(tool) {\n            var that = this,\n                states = that.options.states,\n                rules = tool.rules ? tool.rules.split(\";\") : [];\n\n            if (!rules.length) {\n                return true;\n            }\n\n            for (var i = 0; i < rules.length; i++) {\n                if (!states[rules[i]]) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        _actionClick: function(ev) {\n            var that = this,\n                target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                command = target.attr(kendo.attr(\"command\")),\n                options = target.attr(kendo.attr(\"options\"));\n\n            options = typeof(options) === \"string\" ? { value: options } : options;\n\n            if (!command) {\n                return;\n            }\n\n            that.trigger(ACTION, {\n                command: command,\n                options: extend({ target: target }, options)\n            });\n        },\n\n        _textboxBlur: function(ev) {\n            var that = this,\n                target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                command = target.attr(kendo.attr(\"command\")),\n                options = target.attr(kendo.attr(\"options\"));\n\n            options = typeof(options) === \"string\" ? { value: options } : options;\n\n            if (!command) {\n                return;\n            }\n\n            that.trigger(ACTION, {\n                command: command,\n                options: extend({ target: target }, options)\n            });\n        },\n\n        _attachEvents: function() {\n            var that = this;\n\n            that.header.on(CLICK + NS,\n                DOT + TaskBoardColumn.styles.actionButton,\n                that._actionClick.bind(that));\n\n            that.header.on(BLUR + NS,\n                DOT + TaskBoardColumn.styles.input,\n                that._textboxBlur.bind(that));\n\n            that.header.on(\"keyup\" + NS,\n                DOT + TaskBoardColumn.styles.input,\n                function(ev) {\n                    if (ev.keyCode === kendo.keys.ENTER) {\n                        that._textboxBlur(ev);\n                    }\n                }\n            );\n\n            if (that.container) {\n                that.container.on(CLICK + NS,\n                    DOT + TaskBoardColumn.styles.card + \" [\" + kendo.attr(\"command\") + \"]\",\n                    that._actionClick.bind(that));\n\n                that.container.on(CLICK + NS,\n                    DOT + TaskBoardColumn.styles.card + \" a.\" + TaskBoardColumn.styles.cardTitle,\n                    preventDefault);\n\n            }\n        },\n\n        _initSortable: function() {\n            var that = this,\n                isRtl = that.options.states.isRtl,\n                dirClass = isRtl ? \" k-rtl\" : \"\",\n                container = that.container;\n\n            if (!that.container) {\n                return;\n            }\n\n            that.sortable = new ui.Sortable(container, {\n                ignore: DOT + TaskBoardColumn.styles.ignoreDrag + \" *\",\n                connectWith: DOT + that.sortableUniqueClass,\n                filter: DOT + TaskBoardColumn.styles.card,\n                hint: function(element) {\n                    return element.clone()\n                        .addClass(TaskBoardColumn.styles.dragHint + \" \" + TaskBoardColumn.styles.grabbingCursor + dirClass)\n                        .css({\n                        width: element[0].offsetWidth,\n                        height: element[0].offsetHeight\n                    });\n                },\n                placeholder: function(element) {\n                    return $(\"<div></div>\")\n                        .addClass(TaskBoardColumn.styles.dragPlaceholder + \" \" + TaskBoardColumnStyles.card)\n                        .css({\n                            height: element[0].offsetHeight\n                        });\n                },\n                move: that._move.bind(that),\n                start: that._start.bind(that),\n                end: that._end.bind(that),\n                change: that._change.bind(that)\n            });\n\n            that.sortable.draggable.userEvents.unbind(\"select\");\n            that.sortable.draggable.userEvents.bind(\"select\", that._select.bind(that));\n        },\n\n        _select: function(ev) {\n            var ignoreDragSelectors = TaskBoardColumn.ignoreDragSelectors;\n            var target = $(ev.event.target);\n\n            for (var i = 0; i < ignoreDragSelectors.length; i++) {\n                if (target.is(ignoreDragSelectors[i])) {\n                    ev.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _move: function(ev) {\n            extend(ev, {\n                columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n            });\n            this.trigger(MOVE, ev);\n        },\n\n        _start: function(ev) {\n            extend(ev, {\n                columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n            });\n            this.trigger(MOVE_START, ev);\n        },\n\n        _end: function(ev) {\n            const that = this;\n            const moveArgs = {\n                command: \"MoveCardCommand\",\n                options: ev\n            };\n\n            extend(ev, {\n                columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n            });\n            this.trigger(MOVE_END, ev);\n\n            if (ev.action === \"receive\" && ev.newIndex >= 0 && that.trigger(ACTION, moveArgs)) {\n                ev.preventDefault();\n                return;\n            }\n        },\n\n        _change: function(ev) {\n            var that = this;\n\n            extend(ev, {\n                columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n            });\n\n            that.trigger(CHANGE, ev);\n\n        },\n\n        destroy: function() {\n            var that = this;\n\n            that.header.off(NS);\n            that.container.off(NS);\n\n            if (that.sortable) {\n                that.sortable.destroy();\n            }\n        }\n    });\n\n    var TaskBoardNewColumn = TaskBoardColumn.extend({\n        _render: function() {\n            var that = this,\n                styles = TaskBoardColumn.styles,\n                element = $(\"<div class='\" + styles.element + \"'></div>\").addClass(styles.newColumn).attr(kendo.attr(\"uid\"), that._dataItem.uid),\n                header = $(\"<div class='\" + styles.header + \"'></div>\");\n\n            that.header = header.appendTo(element);\n\n            that._renderEditHeader();\n\n            that.element = element;\n        }\n    });\n\n    extend(kendo.ui, {\n        taskboard: {\n            Column: TaskBoardColumn,\n            NewColumn: TaskBoardNewColumn\n        }\n    });\n\n    extend(true, kendo.ui.taskboard.Column, {\n        styles: TaskBoardColumnStyles,\n        ignoreDragSelectors: [\"img\"]\n    });\n\n})(window.kendo.jQuery);\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        Observable = kendo.Observable,\n        encode = kendo.htmlEncode,\n        extend = $.extend;\n\n    var TaskBoardCardStyles = {\n        element: \"k-taskboard-card\",\n        card: \"k-card\",\n        header: \"k-card-header\",\n        hbox: \"k-hbox\",\n        title: \"k-card-title\",\n        link: \"k-link\",\n        spacer: \"k-spacer\",\n        button: \"k-button\",\n        cardMenuButton: \"k-taskboard-card-menu-button k-icon-button\",\n        flatButton: \"k-button-md k-rounded-md k-button-flat k-button-flat-base\",\n        body: \"k-card-body\",\n        actionsIcon: \"more-vertical\",\n        moveCursor: \"k-cursor-move\",\n        categoryBorder: \"k-taskboard-card-category\",\n        headerActions: \"k-card-header-actions\",\n        disabled: \"k-disabled\"\n    };\n\n    var TaskBoardCard = Observable.extend({\n        init: function(options, dataItem, resources) {\n            var that = this;\n\n            that._dataItem = dataItem;\n            that.resources = resources;\n\n            that.options = extend(true, {}, options);\n\n            that._render();\n\n            Observable.fn.init.call(that);\n        },\n\n        contentTemplate: (data) => `<div class=\"${encode(data.styles.header)} ${encode(data.styles.hbox)}\">` +\n            `<a class=\"${encode(data.styles.title)} ${encode(data.styles.link)}\" href=\"#\" ${data.selectable ? kendo.attr(\"command\") + '=SelectCardCommand' : ''}>${encode(kendo.getter(data.dataTitleField)(data))}</a>` +\n            `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n            `${data.cardMenuButton}` +\n        '</div>' +\n        `<div class=\"${encode(data.styles.body)}\"><p>${encode(kendo.getter(data.dataDescriptionField)(data))}</p></div>`,\n\n        cardMenuButtonTemplate: ({ styles }) => `<div class=\"${encode(styles.headerActions)}\"><button aria-label=\"menu\" class=\"${encode(styles.button)} ${encode(styles.flatButton)} ${encode(styles.cardMenuButton)}\">` +\n                                    kendo.ui.icon({ icon: encode(styles.actionsIcon), iconClass: \"k-button-icon\" }) +\n                                '</button></div>',\n\n        _render: function() {\n            var that = this,\n                options = that.options,\n                styles = TaskBoardCard.styles,\n                template = options.template || that.contentTemplate,\n                element = $(\"<div class='\" + styles.element + \" \" + styles.card + \" \" + styles.moveCursor + \"'></div>\"),\n                cardMenuButtonTemplate = options.cardMenu ? that.cardMenuButtonTemplate : \"\",\n                resources = that._resources(that._dataItem),\n                borderDir = options.states.isRtl ? \"borderRightColor\" : \"borderLeftColor\",\n                categoryColor;\n\n            element\n                .attr(kendo.attr(\"uid\"), that._dataItem.uid)\n                .attr(\"aria-disabled\", !options.states.isDisabled)\n                .attr(\"role\", \"listitem\")\n                .toggleClass(styles.disabled, options.states.isDisabled);\n\n            categoryColor = (resources[options.dataCategoryField] && resources[options.dataCategoryField].color) ||\n                                that._dataItem.get(options.dataCategoryField);\n\n            if (categoryColor) {\n                element.addClass(styles.categoryBorder).css(borderDir, categoryColor);\n            }\n\n            element.append(kendo.template(template)(extend(true, {}, {\n                styles: styles,\n                cardMenuButton: kendo.template(cardMenuButtonTemplate)({ styles: styles }),\n                selectable: options.states.isSelectable,\n                resources: resources,\n                dataTitleField: options.dataTitleField,\n                dataDescriptionField: options.dataDescriptionField\n            }, that._dataItem)));\n\n            that.element = element;\n        },\n\n        _resources: function(card) {\n            var that = this,\n                resources = {};\n\n            if (!that.resources) {\n                return resources;\n            }\n\n            for (var key in that.resources) {\n                var resource = that.resources[key];\n                var field = resource.field;\n                var cardResources = kendo.getter(field)(card);\n\n                if (!cardResources) {\n                    continue;\n                }\n\n                if (!resource.multiple) {\n                    cardResources = [cardResources];\n                }\n\n                var data = resource.dataSource.view();\n\n                for (var resourceIndex = 0; resourceIndex < cardResources.length; resourceIndex++) {\n                    var cardResource = null;\n\n                    var value = cardResources[resourceIndex];\n\n                    if (!resource.valuePrimitive) {\n                        value = kendo.getter(resource.dataValueField)(value);\n                    }\n\n                    for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                        if (data[dataIndex].get(resource.dataValueField) == value) {\n                            cardResource = data[dataIndex];\n                            break;\n                        }\n                    }\n\n                    if (cardResource !== null) {\n                        var resourceColor = kendo.getter(resource.dataColorField)(cardResource);\n                        var result = {\n                            field: resource.field,\n                            title: resource.title,\n                            name: resource.name,\n                            text: kendo.getter(resource.dataTextField)(cardResource),\n                            value: value,\n                            color: resourceColor\n                        };\n\n                        if (resource.multiple) {\n                            if (resources[resource.field]) {\n                                resources[resource.field].push(result);\n                            } else {\n                                resources[resource.field] = [result];\n                            }\n                        } else {\n                            resources[resource.field] = result;\n                        }\n                    }\n                }\n            }\n            return resources;\n        },\n\n        _buildTemplate: function() {\n            var that = this,\n                options = that.options,\n                headerTemplate = kendo.format(that.headerTemplate, options.dataTitleField),\n                bodyTemplate = kendo.format(that.bodyTemplate, options.dataDescriptionField);\n\n            return headerTemplate + bodyTemplate;\n        }\n    });\n\n    extend(kendo.ui.taskboard, {\n        Card: TaskBoardCard\n    });\n\n    extend(true, kendo.ui.taskboard.Card, { styles: TaskBoardCardStyles });\n\n})(window.kendo.jQuery);\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        extend = $.extend,\n        template = kendo.template,\n        ContextMenu = kendo.ui.ContextMenu,\n        encode = kendo.htmlEncode,\n\n        ACTION = \"action\";\n\n    var TaskBoardCardMenu = ContextMenu.extend({\n        init: function(element, options) {\n            var that = this;\n\n            ContextMenu.fn.init.call(that, element, options);\n\n            that._overrideTemplates();\n            that._extendItems();\n\n            that.bind(\"select\", that._onSelect.bind(that));\n            that.bind(\"open\", that._onOpen.bind(that));\n            that.bind(\"activate\", that._focus.bind(that));\n        },\n\n        _overrideTemplates: function() {\n            this.templates.sprite = ({ icon, spriteCssClass }) => `${(icon || spriteCssClass) ? kendo.ui.icon({ icon: encode(icon || \"\"), iconClass: encode(spriteCssClass || \"\") }) : ''}`;\n        },\n\n        defaultItems: {\n            \"editCard\": { name: \"editCard\", text: \"Edit card\", icon: \"pencil\", command: \"EditCardCommand\", rules: \"isEditable\" },\n            \"deleteCard\": { name: \"deleteCard\", text: \"Delete card\", icon: \"trash\", command: \"DeleteCardCommand\", rules: \"isEditable\" }\n        },\n\n        events: ContextMenu.fn.events.concat([\n            ACTION\n        ]),\n\n        _extendItems: function() {\n            var that = this,\n                items = that.options.items,\n                item, isBuiltInTool;\n\n            if (items && items.length) {\n                for (var i = 0; i < items.length; i++) {\n                    item = items[i];\n                    isBuiltInTool = $.isPlainObject(item) && Object.keys(item).length === 1 && item.name;\n\n                    if (isBuiltInTool) {\n                        item = item.name;\n                    }\n\n                    if ($.isPlainObject(item)) {\n                        that._append(item);\n                    } else if (that.defaultItems[item]) {\n                        item = that.defaultItems[item];\n                        that._append(item);\n                    } else if (typeof(item) === \"string\") {\n                        item = { name: item, text: item, spriteCssClass: item, command: item + \"Command\" };\n                        that._append(item);\n                    }\n                }\n            } else {\n                for (var key in that.defaultItems) {\n                    item = that.defaultItems[key];\n                    that._append(item);\n                }\n            }\n        },\n\n        _append: function(item) {\n            var that = this;\n\n            that._extendItem(item);\n\n            if (that._validateRules(item)) {\n                that.append(item);\n            }\n        },\n\n        _extendItem: function(item) {\n            var that = this,\n                messages = that.options.messages,\n                attr = {};\n\n            attr[kendo.attr(\"command\")] = item.command;\n\n            if (item.options) {\n                attr[kendo.attr(\"options\")] = item.options;\n            }\n\n            extend(item, {\n                text: messages[item.name],\n                icon: item.icon || \"\",\n                spriteCssClass: item.spriteCssClass || \"\",\n                attr: attr,\n                uid: kendo.guid()\n            });\n        },\n\n        _validateRules: function(tool) {\n            var that = this,\n                states = that.options.states,\n                rules = tool.rules ? tool.rules.split(\";\") : [];\n\n            if (!rules.length) {\n                return true;\n            }\n\n            for (var i = 0; i < rules.length; i++) {\n                if (!states[rules[i]]) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        _onSelect: function(ev) {\n            var command = $(ev.item).attr(kendo.attr(\"command\")),\n                options = $(ev.item).attr(kendo.attr(\"options\")),\n                target = $(ev.target);\n\n            options = typeof(options) === \"string\" ? { value: options } : options;\n\n            if (!command) {\n                return;\n            }\n\n            this.action({\n                command: command,\n                options: extend({ target: target }, options)\n            });\n        },\n\n        _onOpen: function(ev) {\n            var menu = ev.sender,\n                items = menu.options.items;\n\n            if (!items && $.isEmptyObject(this.defaultItems)) {\n                ev.preventDefault();\n            }\n        },\n\n        _focus: function(ev) {\n            if (ev.sender) {\n                ev.sender.element.trigger(\"focus\");\n            }\n        },\n\n        action: function(args) {\n            this.trigger(ACTION, args);\n        }\n    });\n\n    extend(kendo.ui.taskboard, {\n        CardMenu: TaskBoardCardMenu\n    });\n\n    })(window.kendo.jQuery);\n\n(function($, undefined$1) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            isPlainObject = $.isPlainObject,\n            Class = kendo.Class;\n\n        var TaskBoardCommand = Class.extend({\n            init: function(options) {\n                this.options = options;\n                this.taskboard = options.taskboard;\n            },\n            _confirm: function(title, content, okText, cancel) {\n                var that = this,\n                    taskboard = that.taskboard,\n                    taskboardOptions = taskboard.options,\n                    confirm;\n\n                if (isPlainObject(taskboardOptions.editable) && taskboardOptions.editable.confirmation === false ) {\n                    var fakePromise = $.Deferred();\n                    fakePromise.resolve();\n                    return fakePromise;\n                }\n\n                confirm = $(\"<div></div>\").kendoConfirm(extend({}, {\n                    title: title,\n                    content: content,\n                    messages: {\n                        okText: okText,\n                        cancel: cancel\n                    },\n                    buttonLayout: \"normal\"\n                })).data(\"kendoConfirm\");\n\n                confirm.open();\n\n                setTimeout(function() {\n                    confirm.element.trigger(\"focus\");\n                });\n\n                return confirm.result;\n            }\n        });\n\n        // Column commands\n        var AddColumnCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard;\n\n                if (taskboard.trigger(\"editColumn\", { column: null })) {\n                    return;\n                }\n\n                taskboard.columns().each(function(index, column) {\n                    taskboard.enableByColumn(column, false);\n                });\n                taskboard.addColumn();\n            }\n        });\n\n        var EditColumnCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    options = that.options,\n                    taskboard = that.taskboard;\n\n                if (taskboard.trigger(\"editColumn\", { column: options.column })) {\n                    return;\n                }\n\n                taskboard.columns().each(function(index, column) {\n                    taskboard.enableByColumn(column, false);\n                });\n                taskboard.editColumn(options.columnElement);\n            }\n        });\n\n        var DeleteColumnCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    options = that.options,\n                    taskboard = that.taskboard,\n                    taskboardOptions = taskboard.options,\n                    messages = taskboardOptions.messages,\n                    columnDS = taskboard.columnsDataSource;\n\n                var result = that._confirm(messages.deleteColumn, messages.deleteColumnConfirm, messages[\"delete\"], messages.cancel);\n\n                result.done(function() {\n                    if (taskboard.trigger(\"deleteColumn\", { column: options.column })) {\n                        taskboard.dataSource.cancelChanges();\n                        return;\n                    }\n\n                    columnDS.remove(options.column);\n                    columnDS.sync();\n                });\n            }\n        });\n\n        var SaveColumnCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    options = that.options,\n                    taskboard = that.taskboard,\n                    columnSettings = taskboard.options.columnSettings,\n                    columnDS = taskboard.columnsDataSource,\n                    column = options.column,\n                    text = options.target.val();\n\n                if (taskboard.trigger(\"saveColumn\", { column: options.column })) {\n                    taskboard.dataSource.cancelChanges();\n                    return;\n                }\n\n                column.set(columnSettings.dataTextField, text);\n                columnDS.sync();\n            }\n        });\n\n        var CancelEditColumnCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    columnDS = taskboard.columnsDataSource;\n\n                columnDS.cancelChanges();\n            }\n        });\n\n        //Move focus command\n        var MoveFocusCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    options = that.options,\n                    cardElement = options.cardElement,\n                    columnElement = options.columnElement,\n                    columns = taskboard.columns(),\n                    currentColumnIndex = columnElement.index(),\n                    direction = options.value,\n                    columnIndex, column;\n\n                switch (direction) {\n                    case \"left\":\n                        columnIndex = Math.max(0, currentColumnIndex - 1);\n                        break;\n                    case \"right\":\n                        columnIndex = Math.min(columns.length - 1, currentColumnIndex + 1);\n                        break;\n                    default:\n                        columnIndex = currentColumnIndex;\n                        break;\n                }\n\n                that.columns = columns;\n                that.columnIndex = columnIndex;\n                that.column = column = taskboard._getColumnByElement(columns.eq(columnIndex));\n                that.cards = column.cards();\n\n                if (cardElement) {\n                    that._moveFromCardFocus(direction, cardElement);\n                } else if (columnElement && direction === \"down\") {\n                    that.cards.eq(0).trigger(\"focus\");\n                } else {\n                    columns.eq(columnIndex).trigger(\"focus\");\n                }\n            },\n            _moveFromCardFocus: function(direction, cardElement) {\n                var that = this,\n                    currentIndex = cardElement.index(),\n                    focusCard, index, seekFocusableCard = false;\n\n                switch (direction) {\n                    case \"up\":\n                        index = currentIndex - 1;\n                        break;\n                    case \"down\":\n                        index = currentIndex + 1;\n                        break;\n                    default:\n                        seekFocusableCard = true;\n                        index = currentIndex;\n                        break;\n                }\n\n                focusCard = that.cards.eq(index);\n\n                if (!focusCard.length && seekFocusableCard) {\n                    focusCard = that._getFocusableCard(index, direction);\n                }\n\n                if (index >= 0) {\n                    focusCard.trigger(\"focus\");\n                } else {\n                    that.options.columnElement.focus();\n                }\n            },\n            _getFocusableCard: function(index, direction) {\n                var that = this,\n                    lastIndex = that.cards.length - 1,\n                    focusable = that.cards.eq(Math.min(index, lastIndex));\n\n                if (focusable.length) {\n                    return focusable;\n                }\n\n                if (that.columnIndex <= 0 || that.columnIndex >= that.columns.length - 1) {\n                    return;\n                }\n\n                switch (direction) {\n                    case \"left\":\n                        that.columnIndex = Math.max(0, that.columnIndex - 1);\n                        break;\n                    case \"right\":\n                        that.columnIndex = Math.min(that.columns.length - 1, that.columnIndex + 1);\n                        break;\n                }\n\n                that.column = that.taskboard._getColumnByElement(that.columns.eq(that.columnIndex));\n                that.cards = that.column.cards();\n\n                return that._getFocusableCard(index, direction);\n\n            }\n        });\n\n        // Card commands\n        var TaskBoardBaseCardCommand = TaskBoardCommand.extend({\n            _updateOrder: function(column, currentIndex) {\n                var that = this,\n                    taskboard = that.taskboard,\n                    taskBoardOptions = taskboard.options,\n                    dataOrderField = taskBoardOptions.dataOrderField,\n                    options = that.options,\n                    currentCard = options.card,\n                    cardIndex = options.cardElement ? options.cardElement.index() : column.cards().length,\n                    newIndex = currentIndex,\n                    cards = column.cards().map(function(idx, card) {\n                        return taskboard.dataItem(card);\n                    }),\n                    prevCard = cards[cardIndex - 1],\n                    nextCard;\n\n                    currentCard.set(dataOrderField, newIndex);\n\n                    if (prevCard && prevCard.get(dataOrderField) >= currentCard.get(dataOrderField)) {\n                        currentCard.set(dataOrderField, prevCard.get(dataOrderField) + 1);\n                    }\n\n                    for (var i = newIndex + 1; i < cards.length; i++) {\n                        nextCard = cards[i];\n\n                        if (nextCard.get(dataOrderField) <= currentCard.get(dataOrderField)) {\n                            nextCard.set(dataOrderField, currentCard.get(dataOrderField) + 1);\n                            currentCard = nextCard;\n                        } else {\n                            break;\n                        }\n                    }\n            }\n        });\n\n        var SelectCardCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    options = that.options,\n                    cardElement = options.cardElement;\n\n                taskboard._select(cardElement, true);\n                cardElement.focus();\n            }\n        });\n\n        var SaveChangesCommand = TaskBoardBaseCardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    taskBoardOptions = taskboard.options,\n                    options = that.options,\n                    receivedStatus = options.card.get(taskBoardOptions.dataStatusField),\n                    targetColumn = taskboard._getColumn(receivedStatus),\n                    activeElm = $(document.activeElement);\n\n                if (activeElm.length) {\n                    activeElm.trigger(\"change\");\n                }\n\n                if (taskboard.pane && taskboard.pane.form && !taskboard.pane.form.validate()) {\n                    return;\n                }\n\n                if (taskboard.trigger(\"saveCard\", { card: options.card })) {\n                    taskboard.dataSource.cancelChanges();\n                    return;\n                }\n\n                if (targetColumn && taskBoardOptions.dataOrderField) {\n                    that._updateOrder(targetColumn, options.card.get(taskBoardOptions.dataOrderField));\n                }\n\n                taskboard.dataSource.sync().then(function() {\n                    taskboard.columns().eq(0).trigger(\"focus\");\n                });\n            }\n        });\n\n        var DeleteCardCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    messages = taskboard.options.messages,\n                    options = that.options;\n\n                var result = that._confirm(messages.deleteCard, messages.deleteCardConfirm, messages[\"delete\"], messages.cancel);\n\n                result\n                    .done(function() {\n                        if (taskboard.trigger(\"deleteCard\", { card: options.card })) {\n                            taskboard.dataSource.cancelChanges();\n                            return;\n                        }\n\n                        taskboard.dataSource.remove(options.card);\n                        taskboard.dataSource.sync().then(function() {\n                            taskboard.columns().eq(0).trigger(\"focus\");\n                        });\n                    })\n                    .fail(function() {\n                        options.cardElement.trigger(\"focus\");\n                    });\n            }\n        });\n\n        var MoveCardCommand = TaskBoardBaseCardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    taskBoardOptions = taskboard.options,\n                    columnSettings = taskBoardOptions.columnSettings,\n                    options = that.options,\n                    receivedStatus = options.column.get(columnSettings.dataStatusField);\n\n                options.card.set(taskBoardOptions.dataStatusField, receivedStatus);\n\n                if (taskBoardOptions.dataOrderField) {\n                    that._updateOrder(taskboard._getColumn(receivedStatus), options.newIndex);\n                }\n\n                taskboard.dataSource.sync();\n            }\n        });\n\n        var EditCardCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    options = that.options;\n\n                if (taskboard.trigger(\"editCard\", { card: options.card })) {\n                    return;\n                }\n\n                taskboard._openPane(extend({\n                    pane: \"Edit\"\n                }, options));\n            }\n        });\n\n        var AddCardCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    options = that.options;\n\n                if (taskboard.trigger(\"editCard\", { card: null })) {\n                    return;\n                }\n                taskboard.dataSource.cancelChanges();\n                taskboard._openPane(extend({\n                    pane: \"Create\"\n                }, options));\n            }\n        });\n\n        // Pane commands\n        var OpenPaneCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    options = that.options,\n                    taskboard = that.taskboard;\n\n                taskboard._openPane({\n                    pane: options.value,\n                    card: options.card,\n                    cardElement: options.cardElement,\n                    column: options.column,\n                    columnElement: options.columnElement\n                });\n            }\n        });\n\n        var ClosePaneCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard;\n\n                taskboard._closePane();\n                taskboard.dataSource.cancelChanges();\n            }\n        });\n\n        // Search command\n\n        var SearchCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    value = that.options.value,\n                    taskboard = that.taskboard,\n                    taskboardOptions = taskboard.options,\n                    searchOptions = taskboardOptions.search,\n                    operator = searchOptions.operator,\n                    fields = (searchOptions && searchOptions.fields) || [ taskboardOptions.dataTitleField, taskboardOptions.dataDescriptionField ],\n                    filters;\n\n                filters = that._buildFilters(fields, operator, value);\n\n                taskboard.dataSource.filter(filters);\n            },\n            _buildFilters: function(fields, operator, value) {\n                var filters = fields.map(function(field) {\n                    return { field: field, operator: operator, value: value };\n                });\n\n                return { logic: \"or\", filters: filters };\n            }\n        });\n\n        extend(kendo.ui.taskboard, {\n            Command: TaskBoardCommand,\n            commands: {\n                AddColumnCommand: AddColumnCommand,\n                EditColumnCommand: EditColumnCommand,\n                DeleteColumnCommand: DeleteColumnCommand,\n                SaveColumnCommand: SaveColumnCommand,\n                CancelEditColumnCommand: CancelEditColumnCommand,\n                OpenPaneCommand: OpenPaneCommand,\n                ClosePaneCommand: ClosePaneCommand,\n                SelectCardCommand: SelectCardCommand,\n                MoveFocusCommand: MoveFocusCommand,\n                SaveChangesCommand: SaveChangesCommand,\n                DeleteCardCommand: DeleteCardCommand,\n                MoveCardCommand: MoveCardCommand,\n                EditCardCommand: EditCardCommand,\n                AddCardCommand: AddCardCommand,\n                SearchCommand: SearchCommand\n            }\n        });\n\n    })(window.kendo.jQuery);\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        extend = $.extend,\n        Observable = kendo.Observable,\n        encode = kendo.htmlEncode,\n\n        Form = kendo.ui.Form,\n\n        DOT = \".\",\n        NS = DOT + \"kendoTaskBoardPane\",\n\n        ACTION = \"action\",\n        CLICK = \"click\";\n\n    var TaskBoardPaneStyles = {\n        element: \"k-taskboard-pane\",\n        edit: \"k-taskboard-edit-pane\",\n        preview: \"k-taskboard-preview-pane\",\n        header: \"k-taskboard-pane-header\",\n        headerText: \"k-taskboard-pane-header-text\",\n        spacer: \"k-spacer\",\n        headerActions: \"k-taskboard-pane-header-actions\",\n        content: \"k-taskboard-pane-content\",\n        footerActions: \"k-taskboard-pane-actions\",\n        footerActionButtons: \"k-actions k-hstack k-justify-content-start\",\n        baseButton: \"k-button-solid-base\",\n        primaryButton: \"k-button-solid-primary\"\n    };\n\n    var TaskBoardPane = Observable.extend({\n        init: function(taskboard, options, dataItem, resources) {\n            var that = this;\n\n            that.taskboard = taskboard;\n            that._dataItem = dataItem;\n            that.resources = resources;\n            that.options = extend(true, {}, options);\n\n            that._render();\n\n            that.element.on(CLICK + NS,\n                \"[\" + kendo.attr(\"command\") + \"]\",\n                that._commandClick.bind(that));\n\n            Observable.fn.init.call(that);\n        },\n        headerTemplate: ({ styles, messages, fieldFormat }) => `<div class=\"${encode(styles.headerText)}\">${fieldFormat}</div>` +\n                        `<span class=\"${encode(styles.spacer)}\"></span>` +\n                        `<div class=\"${encode(styles.headerActions)}\">` +\n                            kendo.html.renderButton(`<button title=\"${encode(messages.close)}\" ${encode(kendo.attr(\"command\"))}=\"ClosePaneCommand\"></button>`, {\n                                icon: \"x\",\n                                iconClass: 'k-button-icon',\n                                fillMode: \"flat\",\n                            }) +\n                        '</div>',\n        buttonTemplate: ({ styles, icon, spriteCssClass, text, fillMode, themeColor, command, options }) =>\n            kendo.html.renderButton(`<button title=\"${encode(text)}\" ${encode(kendo.attr(\"command\"))}=\"${encode(command)}\" ${encode(kendo.attr(\"options\"))}=\"${encode(options)}\">` +\n                `${encode(text)}` +\n            '</button>', {\n                icon: encode(icon),\n                iconClass: `k-button-icon ${encode(spriteCssClass)}`,\n                fillMode: fillMode,\n                themeColor: themeColor\n            }),\n        contentTemplate: () => ``,\n        builtinButtons: {\n            \"edit\": { name: \"edit\", icon: \"pencil\", text: \"Edit\", themeColor: \"primary\", command: \"EditCardCommand\", rules: \"isEditable\" },\n            \"delete\": { name: \"delete\", icon: \"trash\", text: \"Delete\", command: \"DeleteCardCommand\", rules: \"isEditable\", fillMode: \"flat\", themeColor: \"primary\" },\n            \"cancel\": { name: \"cancel\", icon: \"cancel-outline\", text: \"Cancel\", command: \"ClosePaneCommand\" },\n            \"saveChanges\": { name: \"saveChanges\", icon: \"save\", text: \"Save\", command: \"SaveChangesCommand\", themeColor: \"primary\", rules: \"isEditable\" },\n            \"create\": { name: \"create\", icon: \"save\", text: \"Create\", command: \"SaveChangesCommand\", themeColor: \"primary\", rules: \"isEditable\" }\n        },\n        defaultButtons: [],\n        _render: function() {\n            var that = this,\n                styles = TaskBoardPane.styles,\n                element = $(\"<div class='\" + styles.element + \"'></div>\"),\n                header = $(\"<div class='\" + styles.header + \"'></div>\"),\n                content = $(\"<div class='\" + styles.content + \"'></div>\"),\n                buttonsContainer = $(\"<div class='\" + styles.footerActions + \" \" + styles.footerActionButtons + \"'></div>\");\n\n            that.header = header.appendTo(element);\n            that._renderHeader();\n            that.content = content.appendTo(element);\n            that._renderContent();\n            that.buttonsContainer = buttonsContainer.appendTo(element);\n            that.buttonsContainer.append(that._buildButtonsHtml());\n            that.element = element;\n        },\n        _renderHeader: function() {\n            var that = this,\n                styles = TaskBoardPane.styles,\n                options = that.options,\n                messages = options.messages,\n                headerTemplate = options.headerTemplate ? options.headerTemplate : that.headerTemplate,\n                resources = that._resources(that._dataItem);\n\n            that.header.append(kendo.template(headerTemplate)(extend(true, {}, {\n                styles: styles,\n                messages: messages,\n                resources: resources,\n                fieldFormat: that._buildHeaderTemplate(that._dataItem)\n            }, that._dataItem)));\n        },\n        _buildHeaderTemplate: function(dataItem) {\n            var that = this;\n            return encode(kendo.getter(that.options.dataTitleField)(dataItem));\n        },\n        _renderContent: function() {\n            var that = this,\n                styles = TaskBoardPane.styles,\n                options = that.options,\n                messages = options.messages,\n                contentTemplate = options.template || that.contentTemplate,\n                resources = that._resources(that._dataItem);\n\n            that.content.append(kendo.template(contentTemplate)(extend(true, {}, {\n                styles: styles,\n                messages: messages,\n                resources: resources\n            }, that._dataItem)));\n        },\n        _resources: function(card) {\n            var that = this,\n                resources = {};\n\n            if (!that.resources) {\n                return resources;\n            }\n\n            for (var key in that.resources) {\n                var resource = that.resources[key];\n                var field = resource.field;\n                var cardResources = kendo.getter(field)(card);\n\n                if (!cardResources) {\n                    continue;\n                }\n\n                if (!resource.multiple) {\n                    cardResources = [cardResources];\n                }\n\n                var data = resource.dataSource.view();\n\n                for (var resourceIndex = 0; resourceIndex < cardResources.length; resourceIndex++) {\n                    var cardResource = null;\n\n                    var value = cardResources[resourceIndex];\n\n                    if (!resource.valuePrimitive) {\n                        value = kendo.getter(resource.dataValueField)(value);\n                    }\n\n                    for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                        if (data[dataIndex].get(resource.dataValueField) == value) {\n                            cardResource = data[dataIndex];\n                            break;\n                        }\n                    }\n\n                    if (cardResource !== null) {\n                        var resourceColor = kendo.getter(resource.dataColorField)(cardResource);\n                        var result = {\n                            field: resource.field,\n                            title: resource.title,\n                            name: resource.name,\n                            text: kendo.getter(resource.dataTextField)(cardResource),\n                            value: value,\n                            color: resourceColor\n                        };\n\n                        if (resource.multiple) {\n                            if (resources[resource.field]) {\n                                resources[resource.field].push(result);\n                            } else {\n                                resources[resource.field] = [result];\n                            }\n                        } else {\n                            resources[resource.field] = result;\n                        }\n                    }\n                }\n            }\n            return resources;\n        },\n        _buildButtonsHtml: function() {\n            var that = this,\n                options = that.options,\n                messages = options.messages,\n                buttons = options.buttons || that.defaultButtons,\n                styles = TaskBoardPane.styles,\n                html = \"\";\n\n            for (var i = 0; i < buttons.length; i++) {\n                var button = buttons[i];\n                button = ($.isPlainObject(button) && Object.keys(button).length === 1 && button.name) ? button.name : button;\n\n                if (typeof button === \"string\") {\n                    if (button === \"spacer\") {\n                        html += '<span class=\"k-spacer\"></span>';\n                        continue;\n                    }\n\n                    button = extend(true, {},\n                        that.builtinButtons[button] || { spriteCssClass: button, command: button + \"Command\" },\n                        { text: messages[button] || button }\n                    );\n                } else if ($.isPlainObject(button) && button.name) {\n                    button = extend(true, button,\n                        { text: messages[button.name] }\n                    );\n                }\n\n                if (!that._validateRules(button)) {\n                    continue;\n                }\n\n                button.spriteCssClass = button.spriteCssClass || \"\";\n\n                html += kendo.template(that.buttonTemplate)(extend(true, {}, {\n                    styles: styles,\n                    messages: messages,\n                    primary: false,\n                    options: null\n                }, button));\n            }\n\n            return html;\n        },\n        _commandClick: function(ev) {\n            var that = this,\n                target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                command = target.attr(kendo.attr(\"command\")),\n                options = target.attr(kendo.attr(\"options\")),\n                card = that._dataItem;\n\n            options = typeof(options) === \"string\" ? { value: options } : options;\n\n            if (!command) {\n                return;\n            }\n\n            that.trigger(ACTION, {\n                command: command,\n                options: extend({ card: card }, options)\n            });\n        },\n        _validateRules: function(tool) {\n            var that = this,\n                states = that.options.states,\n                rules = tool.rules ? tool.rules.split(\";\") : [];\n\n            if (!rules.length) {\n                return true;\n            }\n\n            for (var i = 0; i < rules.length; i++) {\n                if (!states[rules[i]]) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n        destroy: function() {\n            var that = this;\n\n            that.element.off(NS);\n            that.element.remove();\n        }\n    });\n\n    var TaskBoardPreviewPane = TaskBoardPane.extend({\n        init: function(taskboard, options, dataItem, resources) {\n            var that = this;\n\n            options = extend({}, options.previewPane, {\n                dataTitleField: options.dataTitleField,\n                dataDescriptionField: options.dataDescriptionField,\n                messages: options.messages,\n                states: options.states\n            });\n\n            that.contentTemplate = (data) => encode(kendo.getter(options.dataDescriptionField)(data));\n\n            TaskBoardPane.fn.init.call(that, taskboard, options, dataItem, resources);\n\n            that.element.addClass(TaskBoardPane.styles.preview);\n        },\n        defaultButtons: [ \"edit\", \"spacer\", \"delete\" ]\n    });\n\n    var TaskBoardEditPane = TaskBoardPane.extend({\n        init: function(taskboard, options, dataItem) {\n            var that = this;\n\n            options = extend({}, options.editable, {\n                dataTitleField: options.dataTitleField,\n                dataDescriptionField: options.dataDescriptionField,\n                messages: options.messages,\n                states: options.states\n            });\n\n            that.formSettings = extend(that.formSettings, {\n                items: [\n                    { field: options.dataTitleField, label: options.messages[options.dataTitleField] },\n                    { field: options.dataDescriptionField, label: options.messages[options.dataDescriptionField] }\n                ]\n            }, options.form);\n\n            TaskBoardPane.fn.init.call(that, taskboard, options, dataItem);\n\n            that.element.addClass(TaskBoardPane.styles.edit);\n        },\n        defaultButtons: [ \"saveChanges\", \"cancel\" ],\n        formSettings: {\n            buttonsTemplate: () => \"\"\n        },\n        _buildHeaderTemplate: function(dataItem) {\n            var that = this;\n            return `${that.options.messages.edit} ${encode(kendo.getter(that.options.dataTitleField)(dataItem))}`;\n        },\n        _renderContent: function() {\n            var that = this,\n                options = that.options,\n                styles = TaskBoardPane.styles,\n                formSettings = options.form || that.formSettings,\n                formLabelId = kendo.guid(),\n                element = $(\"<div></div>\")\n                    .attr(\"role\", \"form\")\n                    .attr(\"aria-labelledby\", formLabelId),\n                focusFirst = (options.form && options.form.focusFirst !== undefined$1) ? options.form.focusFirst : true;\n\n            that.header.find(DOT + styles.headerText).attr(\"id\", formLabelId);\n\n            that.content.append(element);\n\n            that.form = new Form(element, extend({}, formSettings, {\n                formData: that._dataItem,\n                focusFirst: focusFirst\n            }));\n        }\n    });\n\n    var TaskBoardCreatePane = TaskBoardEditPane.extend({\n        init: function(taskboard, options, dataItem, resources, column) {\n            var that = this,\n                columnStatusField = options.columnSettings.dataStatusField,\n                firstColumn = taskboard.columnsDataSource.view().at(0),\n                status = column ? column[columnStatusField] : firstColumn[columnStatusField],\n                clone = extend({}, dataItem);\n\n            dataItem = taskboard.dataSource.add();\n            dataItem.set(options.dataStatusField, status);\n\n            for (var key in clone) {\n                dataItem.set(key, clone[key]);\n            }\n\n            TaskBoardEditPane.fn.init.call(that, taskboard, options, dataItem, resources);\n        },\n        _buildHeaderTemplate: function(dataItem) {\n            var that = this;\n            return that.options.messages.createNewCard;\n        },\n        defaultButtons: [ \"create\", \"cancel\"]\n    });\n\n    extend(kendo.ui.taskboard, {\n        Pane: TaskBoardPane,\n        panes: {\n            Preview: TaskBoardPreviewPane,\n            Edit: TaskBoardEditPane,\n            Create: TaskBoardCreatePane\n        }\n    });\n\n    extend(true, kendo.ui.taskboard.Pane, { styles: TaskBoardPaneStyles });\n\n})(window.kendo.jQuery);\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        Observable = kendo.Observable,\n\n        extend = $.extend,\n\n        DOT = \".\",\n        NS = DOT + \"kendoKeyboardManager\",\n        KEYDOWN = \"keydown\",\n        ACTION = \"action\";\n\n\n    var Keyboard = Observable.extend({\n        init: function(element) {\n            var that = this;\n\n            that.register = {};\n            that.element = element;\n\n            that._attachEvents();\n\n            Observable.fn.init.call(that);\n        },\n\n        registerShortcut: function(selector, shortcut, options) {\n            var that = this;\n\n            if (!that.register[selector]) {\n                that.register[selector] = [];\n            }\n\n            if (shortcut.keyCode && isNaN(shortcut.keyCode) && shortcut.keyCode.toUpperCase) {\n                shortcut.keyCode = shortcut.keyCode.toUpperCase().charCodeAt(0);\n            }\n\n            that.register[selector].push({\n                shortcut: extend({\n                    keyCode: null,\n                    ctrlKey: false,\n                    shiftKey: false,\n                    altKey: false\n                }, shortcut),\n                options: options\n            });\n\n        },\n\n        _attachEvents: function() {\n            var that = this,\n                handler = that._handler.bind(that);\n\n            that.element.on(KEYDOWN + NS, handler);\n        },\n\n        _handler: function(ev) {\n            var that = this,\n                target = $(ev.target),\n                shortcuts, action;\n\n            for (var selector in that.register) {\n                if (target.is(selector)) {\n                    shortcuts = that.register[selector];\n                    action = that._getAction(shortcuts, ev);\n\n                    if (action) {\n                        that._trigger(action, ev);\n                        break;\n                    }\n                }\n            }\n        },\n\n        _trigger: function(action, ev) {\n            var that = this,\n                target = $(ev.target);\n\n            if (action.command) {\n                that.trigger(ACTION, extend({}, ev, {\n                    command: action.command,\n                    options: extend({}, {\n                        target: target\n                    }, action.options)\n                }));\n            }\n\n            if (action.handler) {\n                action.handler(ev);\n            }\n        },\n\n        _getAction: function(shortcuts, ev) {\n            var that = this;\n\n            for (var i = 0; i < shortcuts.length; i++) {\n                if (that._compareShortcut(shortcuts[i].shortcut, ev)) {\n                    return shortcuts[i].options;\n                }\n            }\n        },\n\n        _compareShortcut: function(shortcut, ev) {\n            var that = this;\n\n            for (var key in shortcut) {\n                var result = false;\n\n                switch (key) {\n                    case \"ctrlKey\":\n                        result = shortcut[key] !== that._getShortcutModifier(ev);\n                        break;\n                    default:\n                        result = shortcut[key] !== ev[key];\n                        break;\n                }\n\n                if (result) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        _getShortcutModifier: function(ev) {\n            var mac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n            return mac ? ev.metaKey : ev.ctrlKey;\n        },\n\n        destroy: function() {\n            var that = this;\n\n            that.element.off(NS);\n        }\n    });\n\n    extend(kendo.ui.taskboard, {\n        KeyboardManager: Keyboard\n    });\n\n})(window.kendo.jQuery);\n\nconst __meta__ = {\n        id: \"taskboard\",\n        name: \"TaskBoard\",\n        category: \"web\",\n        description: \"The TaskBoard widget displays cards.\",\n        depends: [\"data\", \"sortable\", \"dialog\", \"form\", \"menu\", \"toolbar\", \"textbox\"]\n    };\n\n    var TaskBoardStyles = {\n        wrapper: \"k-taskboard\",\n        header: \"k-taskboard-header\",\n        content: \"k-taskboard-content\",\n        toolbar: \"k-taskboard-toolbar\",\n        columnsContainer: \"k-taskboard-columns-container\",\n        card: \"k-taskboard-card\",\n        column: \"k-taskboard-column\",\n        selected: \"k-selected\",\n        disabled: \"k-disabled\",\n        ignoreDrag: \"k-taskboard-drag-ignore\"\n    };\n\n    var preventDefault = function(ev) { ev.preventDefault(); };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            DataSource = kendo.data.DataSource,\n            extend = $.extend,\n            ui = kendo.ui,\n            isArray = Array.isArray,\n            isPlainObject = $.isPlainObject,\n\n            GENERIC = \"_generic\",\n\n            DOT = \".\",\n\n            MOVE = \"move\",\n            MOVE_START = \"moveStart\",\n            MOVE_END = \"moveEnd\",\n            SELECT = \"select\",\n            EXECUTE = \"execute\",\n            ACTION = \"action\",\n            CHANGE = \"change\",\n            CLICK = \"click\",\n            TOGGLE = \"toggle\",\n            ERROR = \"change\",\n            DATABINDING = \"dataBinding\",\n            DATABOUND = \"dataBound\",\n            EDIT_CARD = \"editCard\",\n            SAVE_CARD = \"saveCard\",\n            DELETE_CARD = \"deleteCard\",\n            EDIT_COLUMN = \"editColumn\",\n            SAVE_COLUMN = \"saveColumn\",\n            DELETE_COLUMN = \"deleteColumn\",\n\n            COLUMNSDATABINDING = \"columnsDataBinding\",\n            COLUMNSDATABOUND = \"columnsDataBound\";\n\n        var TaskBoard = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                Widget.fn.init.call(that, element, options);\n\n                element = that.wrapper = that.element;\n\n                that._sortableIdentifier = that.element.attr(\"id\") || kendo.guid();\n\n                that._wrapper();\n                that._columnsDataSource();\n                that._initResources();\n                that._dataSource();\n                that._initToolbar();\n                that._initCardMenu();\n                that._initKeyboard();\n\n                if (that.options.autoBind) {\n                    that.load();\n                }\n\n                kendo.notify(that);\n            },\n\n            events: [\n                MOVE,\n                MOVE_START,\n                MOVE_END,\n                CHANGE,\n                EXECUTE,\n                SELECT,\n                DATABINDING,\n                DATABOUND,\n                COLUMNSDATABINDING,\n                COLUMNSDATABOUND,\n                EDIT_CARD,\n                SAVE_CARD,\n                DELETE_CARD,\n                EDIT_COLUMN,\n                SAVE_COLUMN,\n                DELETE_COLUMN\n            ],\n\n            options: {\n                name: \"TaskBoard\",\n                autoBind: true,\n                height: 600,\n                width: \"100%\",\n                toolbar: true,\n                dataStatusField: \"status\",\n                dataTitleField: \"title\",\n                dataDescriptionField: \"description\",\n                dataCategoryField: \"category\",\n                dataOrderField: null,\n                cardMenu: true,\n                editable: true,\n                selectable: true,\n                reorderable: true,\n                previewPane: true,\n                search: {\n                    operator: \"contains\"\n                },\n                dataSource: [],\n                columns: [],\n                columnSettings: {\n                    dataStatusField: \"status\",\n                    dataTextField: \"text\",\n                    dataOrderField: null\n                },\n                resources: [],\n                messages: {\n                    edit: \"Edit\",\n                    createNewCard: \"Create new card\",\n                    create: \"Create\",\n                    search: \"Search\",\n                    previewCard: \"Preview card\",\n                    addCard: \"Add card\",\n                    editCard: \"Edit card\",\n                    deleteCard: \"Delete Card\",\n                    addColumn: \"Add column\",\n                    editColumn: \"Edit column\",\n                    deleteColumn: \"Delete column\",\n                    close: \"Close\",\n                    cancel: \"Cancel\",\n                    \"delete\": \"Delete\",\n                    saveChanges: \"Save changes\",\n                    title: \"Title:\",\n                    description: \"Description:\",\n                    newColumn: \"New column\",\n                    deleteColumnConfirm: \"Are you sure you want to delete this column?\",\n                    deleteCardConfirm: \"Are you sure you want to delete this card?\"\n                }\n            },\n\n            defaultTools: {\n                addColumn: { type: \"button\", name: \"addColumn\", command: \"AddColumnCommand\", icon: \"plus\", rules: \"isEditable\" },\n                spacer: { type: \"spacer\" },\n                search: {\n                    type: \"component\",\n                    name: \"search\",\n                    command: \"SearchCommand\",\n                    options: \"{ \\\"field\\\": \\\"name\\\", \\\"operator\\\": \\\"startswith\\\" }\",\n                    rules: \"isSearchable\",\n                    overflow: \"never\",\n                    component: \"TextBox\",\n                    componentOptions: {\n                        placeholder: \"search\",\n                        icon: \"search\",\n                        commandOn: \"input\"\n                    }\n                }\n            },\n\n            items: function() {\n                var that = this,\n                    result = $([]);\n\n                for (var key in that._columns) {\n                    $.merge(result, that._columns[key].cards());\n                }\n\n                return result;\n            },\n\n            itemsByStatus: function(status) {\n                var that = this,\n                    result = that._getColumn(status).cards();\n\n                return result;\n            },\n\n            itemsByColumn: function(columnElm) {\n                var that = this,\n                    column = that._getColumnByElement(columnElm);\n\n                if (column) {\n                    return column.cards();\n                }\n            },\n\n            load: function() {\n                var that = this,\n                    fetchPromises = [];\n\n                that._progress(true);\n\n                fetchPromises.push(that.columnsDataSource.fetch());\n\n                for (var key in that.resources) {\n                    fetchPromises.push(that.resources[key].dataSource.fetch());\n                }\n\n                $.when.apply(null, fetchPromises)\n                    .then(that.dataSource.read.bind(that.dataSource));\n            },\n\n            dataItem: function(cardElm) {\n                var that = this,\n                    dataSource = that.dataSource,\n                    uid;\n\n                cardElm = $(cardElm);\n                uid = cardElm.attr(kendo.attr(\"uid\"));\n\n                return dataSource.getByUid(uid);\n            },\n\n            columnDataItem: function(columnElm) {\n                var that = this,\n                    columnsDataSource = that.columnsDataSource,\n                    uid;\n\n                columnElm = $(columnElm);\n                uid = columnElm.attr(kendo.attr(\"uid\"));\n\n                return columnsDataSource.getByUid(uid);\n            },\n\n            columns: function() {\n                var that = this,\n                    result = $([]);\n\n                for (var key in that._columns) {\n                    $.merge(result, that._columns[key].element);\n                }\n\n                return result;\n            },\n\n            columnByStatus: function(status) {\n                return this._getColumn(status).element;\n            },\n\n            select: function(card, toggle) {\n                var that = this;\n\n                if (!card) {\n                    return that.element\n                        .find(DOT + TaskBoard.styles.card + DOT + TaskBoard.styles.selected).eq(0);\n                }\n\n                card = $(card);\n                toggle = toggle !== false;\n\n                if (toggle) {\n                    that.element\n                        .find(DOT + TaskBoard.styles.card + DOT + TaskBoard.styles.selected)\n                        .removeClass(TaskBoard.styles.selected);\n                }\n\n                card.toggleClass(TaskBoard.styles.selected, toggle);\n            },\n\n            previewCard: function(cardElement) {\n                var that = this,\n                    options = that.options,\n                    args = that._extendExecArgs({ target: cardElement });\n\n                if (options.previewPane) {\n                    that._openPane(extend({\n                        pane: \"Preview\"\n                    }, args));\n                }\n            },\n\n            editCard: function(cardElement) {\n                var that = this,\n                    options = that.options,\n                    args;\n\n                cardElement = $(cardElement);\n                args = that._extendExecArgs({ target: cardElement });\n\n                if (options.editable) {\n                    that._openPane(extend({\n                        pane: \"Edit\"\n                    }, args));\n                }\n            },\n\n            saveCard: function() {\n                var that = this;\n\n                that.dataSource.sync();\n            },\n\n            deleteCard: function(cardElement) {\n                var that = this,\n                    card = that.dataItem(cardElement);\n\n                that.dataSource.remove(card);\n                that.dataSource.sync();\n            },\n\n            addCard: function(dataItem) {\n                var that = this,\n                    options = that.options,\n                    args = { card: dataItem };\n\n                if (options.editable) {\n                    that._openPane(extend({\n                        pane: \"Create\"\n                    }, args));\n                }\n            },\n\n            addColumn: function(index, data) {\n                var that = this,\n                    columnSettings = extend(true, {}, that.options.columnSettings, {\n                        messages: that.options.messages,\n                        states: that._buildStates(),\n                        sortableIdentifier: that._sortableIdentifier\n                    }),\n                    newColumn, model, column;\n\n                if (isNaN(index) && !data) {\n                    data = index;\n                    index = null;\n                }\n\n                model = that.columnsDataSource._createNewModel(data);\n                index = isNaN(index) || index === null ? that.columnsDataSource.data().length : index;\n                column = that.columns().eq(index);\n                that.columnsDataSource.insert(index, model);\n\n                newColumn = new ui.taskboard.NewColumn(columnSettings, model);\n\n                if (isNaN(index) || !column.length) {\n                    that.columnsContainer.append(newColumn.element);\n                } else {\n                    column.before(newColumn.element);\n                }\n\n                newColumn.bind(ACTION, that.executeCommand.bind(that));\n            },\n\n            editColumn: function(columnElement) {\n                var that = this;\n\n                columnElement = $(columnElement);\n\n                that._getColumnByElement(columnElement).edit();\n            },\n\n            saveColumn: function() {\n                var that = this;\n\n                that.columnsDataSource.sync();\n            },\n\n            deleteColumn: function(columnElement) {\n                var that = this,\n                    column = that.columnDataItem(columnElement);\n\n                that.columnsDataSource.remove(column);\n                that.columnsDataSource.sync();\n            },\n\n            registerShortcut: function(selector, shortcut, options) {\n                var that = this;\n\n                that.keyboardManager.registerShortcut(selector, shortcut, options);\n            },\n\n            enable: function(cardElement, toggle) {\n                cardElement = $(cardElement);\n\n                cardElement.toggleClass(TaskBoard.styles.disabled, toggle === false);\n                cardElement.attr(\"aria-disabled\", toggle === false);\n            },\n\n            enableByColumn: function(columnElement, toggle) {\n                var that = this;\n\n                columnElement = $(columnElement);\n\n                that.itemsByColumn(columnElement).each(function(index, card) {\n                    that.enable(card, toggle);\n                });\n            },\n\n            readOnly: function(cardElement, toggle) {\n                cardElement = $(cardElement);\n\n                toggle = toggle !== false;\n\n                cardElement.find(\"[\" + kendo.attr(\"command\") + \"]\").toggleClass(TaskBoard.styles.disabled, toggle);\n                cardElement.find(\"a,button\").toggleClass(TaskBoard.styles.disabled, toggle);\n\n                cardElement.toggleClass(TaskBoard.styles.ignoreDrag, toggle);\n                cardElement.attr(\"aria-readonly\", toggle);\n            },\n\n            readOnlyByColumn: function(columnElement, toggle) {\n                var that = this;\n\n                columnElement = $(columnElement);\n\n                that.itemsByColumn(columnElement).each(function(index, card) {\n                    that.readOnly(card, toggle);\n                });\n            },\n\n            setDataSource: function(dataSource) {\n                var that = this;\n\n                that.options.dataSource = dataSource;\n                that._dataSource();\n\n                if (that.options.autoBind) {\n                    that.dataSource.read();\n                }\n            },\n\n            setColumnsDataSource: function(dataSource) {\n                var that = this;\n\n                that.options.columns = dataSource;\n                that._columnsDataSource();\n\n                if (that.options.autoBind) {\n                    that.columnsDataSource.fetch(function() {\n                        that._renderCards(that.dataSource.view());\n                    });\n                }\n            },\n\n            _getColumn: function(status) {\n                return this._columns[status];\n            },\n\n            _getColumnByElement: function(columnElement) {\n                var that = this;\n\n                columnElement = $(columnElement);\n\n                for (var key in that._columns) {\n                    if (that._columns[key].element[0] === columnElement[0]) {\n                        return that._columns[key];\n                    }\n                }\n            },\n\n            _openPane: function(options) {\n                var that = this,\n                    pane = new ui.taskboard.panes[options.pane](that, extend({}, that.options, {\n                        states: that._buildStates()\n                    }), options.card, that.resources, options.column),\n                    keyboardManager;\n\n                if (that.pane) {\n                    that._closePane();\n                }\n\n                that.pane = pane;\n                that.content.after(that.pane.element);\n                that.content.css(\"margin-right\",\n                    that.pane.element.outerWidth() -\n                    parseInt(that.content.css(\"paddingRight\"), 10));\n\n                that.pane.bind(ACTION, that.executeCommand.bind(that));\n\n                that.pane.keyboardManager = keyboardManager = new ui.taskboard.KeyboardManager(that.pane.element);\n\n                keyboardManager.bind(ACTION, that.executeCommand.bind(that));\n\n                keyboardManager.registerShortcut(\"*\", {\n                    keyCode: kendo.keys.ESC\n                }, { command: \"ClosePaneCommand\" });\n\n                keyboardManager.registerShortcut(\"*\", {\n                    keyCode: kendo.keys.ENTER\n                }, { command: \"SaveChangesCommand\", options: {\n                    card: that.pane._dataItem\n                } });\n\n                if (this.options.editable && this.options.editable.form && this.options.editable.form.focusFirst === false) {\n                    setTimeout(function() {\n                        that.pane.element.find(\"button\").eq(0).trigger(\"focus\");\n                    }, 0);\n                }\n            },\n\n            _closePane: function() {\n                var that = this;\n\n                if (that.pane) {\n                    that.pane.keyboardManager.destroy();\n                    that.pane.unbind(ACTION);\n                    that.pane.destroy();\n                    delete that.pane;\n\n                    that.content.css(\"margin-right\", \"\");\n                }\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    options = that.options,\n                    styles = TaskBoard.styles,\n                    headerElm = \"<div class='\" + styles.header + \"'></div>\",\n                    contentElm = \"<div class='\" + styles.content + \"'></div>\",\n                    colsContainer = \"<div class='\" + styles.columnsContainer + \"'></div>\";\n\n                that.element.addClass(styles.wrapper)\n                    .width(options.width)\n                    .height(options.height)\n                    .attr(\"role\", \"application\");\n                that.header = $(headerElm).appendTo(that.element);\n                that.content = $(contentElm).appendTo(that.element);\n                that.columnsContainer = $(colsContainer).appendTo(that.content);\n            },\n\n            _initToolbar: function() {\n                var that = this,\n                    styles = TaskBoard.styles,\n                    options = that.options,\n                    toolbarElm = $(\"<div class='\" + styles.toolbar + \"'></div>\"),\n                    toolbarOptions = isArray(options.toolbar) ? { items: options.toolbar } : options.toolbar,\n                    tools;\n\n                if (options.toolbar === false) {\n                    return;\n                } else if (toolbarOptions === true) {\n                    toolbarOptions = {};\n                }\n\n                tools = toolbarOptions.items ? toolbarOptions.items : Object.keys(that.defaultTools);\n                tools = that._processTools(tools);\n                toolbarOptions.tools = tools;\n                toolbarOptions.defaultTools = that.defaultTools;\n                toolbarOptions.parentMessages = that.options.messages;\n\n                that.header.append(toolbarElm);\n                that.toolbar = new kendo.ui.ToolBar(toolbarElm, toolbarOptions);\n                that.options.toolbar = that.toolbar.options;\n\n                that.toolbar.bind(CLICK, that._toolbarClick.bind(that));\n                that.toolbar.bind(TOGGLE, that._toolbarClick.bind(that));\n                that.toolbar.bind(CHANGE, that._toolbarClick.bind(that));\n            },\n\n            _processTools: function(tools) {\n                var that = this,\n                    states = that._buildStates(),\n                    isDefaultTool;\n\n                tools.forEach(t => {\n                    var rules = t.rules || that.defaultTools[t] ? that.defaultTools[t].rules : null;\n                    isDefaultTool = isPlainObject(t) && Object.keys(t).length >= 1 && t.name && that.defaultTools[t.name];\n\n                    if (isDefaultTool) {\n                        var temp = extend({}, t);\n                        extend(t, that.defaultTools[t.name], temp);\n                    }\n\n                    if (isDefaultTool && t.name == \"search\") {\n                        extend(t.componentOptions, {\n                            icon: t.icon || that.defaultTools[t.name].componentOptions.icon,\n                            placeholder: t.text || that.options.messages.search\n                        });\n                    }\n\n                    if (!rules) {\n                        return;\n                    }\n\n                    rules = rules.split(\";\");\n\n                    if (!rules.length) {\n                        return;\n                    }\n\n                    for (var i = 0; i < rules.length; i++) {\n                        if (!states[rules[i]]) {\n                            if (t.rules) {\n                                t.hidden = true;\n                            } else {\n                                that.defaultTools[t].hidden = true;\n                            }\n                        }\n                    }\n                });\n\n                return tools;\n            },\n\n            _toolbarClick: function(ev) {\n                var command = $(ev.target).data(\"command\"),\n                    options = $(ev.target).data(\"options\");\n\n                options = extend({}, options, { value: $(ev.target).val() });\n\n                if (!command) {\n                    return;\n                }\n\n                this.executeCommand({\n                    command: command,\n                    options: options\n                });\n            },\n\n            _isToolEnabled: function(toolName) {\n                var that = this,\n                    options = that.options.toolbar,\n                    items = options.items || that.defaultTools,\n                    found = false;\n\n                for (var i = 0; i < items.length; i++) {\n                    if (items[i].name == toolName) {\n                        found = true;\n                        break;\n                    }\n                }\n\n                return items[toolName] || found;\n            },\n\n            _buildStates: function() {\n                var that = this;\n\n                return {\n                    isEditable: that._isEditable(),\n                    isReorderable: that._isReorderable(),\n                    isSelectable: that._isSelectable(),\n                    isReadOnly: !that._isReorderable() && !that._isEditable(),\n                    isDisabled: !that._isReorderable() && !that._isEditable() && !that._isSelectable(),\n                    isSearchable: that._isSearchable(),\n                    notLocalColumns: !(that.columnsDataSource.transport instanceof kendo.data.LocalTransport),\n                    isRtl: kendo.support.isRtl(that.wrapper)\n                };\n            },\n\n            _isSearchable: function() {\n                return !!this.options.search;\n            },\n\n            _isEditable: function() {\n                return !!this.options.editable;\n            },\n\n            _isReorderable: function() {\n                return !!this.options.reorderable;\n            },\n\n            _isSelectable: function() {\n                return !!this.options.selectable;\n            },\n\n            executeCommand: function(args) {\n                var that = this,\n                    commandName = args.command,\n                    commandOptions = extend({ taskboard: this }, isPlainObject(args.options) ? that._extendExecArgs(args.options) : { value: args.options }),\n                    command = ui.taskboard.commands[commandName] && new ui.taskboard.commands[commandName](commandOptions);\n\n\n                if (!that.trigger(EXECUTE, args)) {\n                    if (command) {\n                        command.exec();\n                    } else {\n                        window.console.warn(kendo.format(\"Trying to use {0} command, but such is not available in the kendo.ui.taskboard.commands namespace!\", commandName));\n                    }\n                }\n            },\n\n            _extendExecArgs: function(args) {\n                var that = this,\n                    target = args.draggableEvent ? args.item : args.target,\n                    columnElm, cardElm, columnDataItem, cardDataItem;\n\n                if (args.card) {\n                    target = that.items().filter(function(idx, elm) {\n                        return $(elm).attr(kendo.attr(\"uid\")) === args.card.get(\"uid\");\n                    });\n                }\n\n                if (!target || !(target && target.length)) {\n                    return args;\n                }\n\n                columnElm = args.columnElement || (target.is(DOT + TaskBoard.styles.column) ? target : target.parents(DOT + TaskBoard.styles.column));\n                columnDataItem = that.columnsDataSource.getByUid(columnElm.data(kendo.ns + \"uid\"));\n                cardElm = target.is(DOT + TaskBoard.styles.card) ? target : target.closest(DOT + TaskBoard.styles.card);\n                cardDataItem = that.dataSource.getByUid(cardElm.data(kendo.ns + \"uid\"));\n\n                return extend(args, {\n                    card: cardDataItem,\n                    cardElement: cardElm.length ? cardElm : undefined$1,\n                    column: columnDataItem,\n                    columnElement: columnElm.length ? columnElm : undefined$1\n                });\n            },\n\n\n            _select: function(card, toggle) {\n                var that = this;\n\n                if (toggle === null) {\n                    toggle = true;\n                }\n\n                if (!that.trigger(SELECT, { card: card })) {\n                    that.select(card, toggle);\n                    that.previewCard(card);\n                }\n            },\n\n            _columnsDataSource: function() {\n                var that = this,\n                    options = that.options,\n                    columnSettings = options.columnSettings,\n                    columnsDataSource = options.columns;\n\n                columnsDataSource = isArray(columnsDataSource) ? { data: columnsDataSource } : columnsDataSource;\n\n                if (columnSettings.dataOrderField && !columnsDataSource.sort) {\n                    columnsDataSource.sort = { field: columnSettings.dataOrderField, dir: \"asc\" };\n                }\n\n                if (!columnsDataSource.schema) {\n                    var fields = {};\n\n                    fields[columnSettings.dataStatusField] = { type: \"string\", defaultValue: function() { return kendo.guid().split(\"-\")[0]; } };\n                    fields[columnSettings.dataTextField] = { type: \"string\" };\n\n                    if (columnSettings.dataOrderField) {\n                        fields[columnSettings.dataOrderField] = { type: \"number\" };\n                    }\n\n                    columnsDataSource.schema = {\n                        model: {\n                            fields: fields\n                        }\n                    };\n                }\n\n                if (that.columnsDataSource && that._columnsChangeHandler) {\n                    that.columnsDataSource.unbind(CHANGE, that._columnsChangeHandler);\n                    that.columnsDataSource.unbind(CHANGE, that._columnsErrorHandler);\n                } else {\n                    that._columnsChangeHandler = that._columnsDataSourceChange.bind(that);\n                    that._columnsErrorHandler = that._error.bind(that);\n                }\n\n                that.columnsDataSource = DataSource.create(columnsDataSource)\n                                .bind(CHANGE, that._columnsChangeHandler)\n                                .bind(ERROR, that._columnsErrorHandler);\n            },\n\n            _columnsDataSourceChange: function(ev) {\n                var that = this,\n                    view = that.columnsDataSource.view(),\n                    columnSettings = extend(true, {}, that.options.columnSettings, {\n                        messages: that.options.messages,\n                        states: that._buildStates(),\n                        sortableIdentifier: that._sortableIdentifier\n                     }),\n                    statusField = columnSettings.dataStatusField;\n\n                if (ev.action && ev.action !== \"sync\") {\n                    return;\n                }\n\n                if (that.trigger(COLUMNSDATABINDING, ev)) {\n                    return;\n                }\n\n                that._progress(true);\n\n                that._columns = {};\n                that.columnsContainer.html(\"\");\n\n                for (var i = 0; i < view.length; i++) {\n                    var data = view[i];\n                    var status = data[statusField] || GENERIC;\n                    var column;\n\n                    column = that._columns[status] = new ui.taskboard.Column(columnSettings, data);\n                    that.columnsContainer.append(column.element);\n                    column.bind(ACTION, that.executeCommand.bind(that));\n                    column.bind(MOVE, that._move.bind(that));\n                    column.bind(MOVE_END, that._moveEnd.bind(that));\n                    column.bind(MOVE_START, that._moveStart.bind(that));\n                    column.bind(CHANGE, that._changeOrder.bind(that));\n                    that._tabindex(column.element);\n                }\n\n                if (ev.action === \"sync\" || ev.action === undefined$1) {\n                    that._renderCards(that.dataSource.view());\n                }\n\n                that._progress(false);\n                that.trigger(COLUMNSDATABOUND, ev);\n            },\n\n            _move: function(ev) {\n                this.trigger(MOVE, this._extendExecArgs(ev));\n            },\n\n            _moveEnd: function(ev) {\n                this.trigger(MOVE_END, this._extendExecArgs(ev));\n            },\n\n            _moveStart: function(ev) {\n                this.trigger(MOVE_START, this._extendExecArgs(ev));\n            },\n\n            _changeOrder: function(ev) {\n                this.trigger(CHANGE, this._extendExecArgs(ev));\n            },\n\n            _dataSource: function() {\n                var that = this,\n                    options = that.options,\n                    dataSource = options.dataSource;\n\n                    dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                if (options.dataOrderField && !dataSource.sort) {\n                    dataSource.sort = { field: options.dataOrderField, dir: \"asc\" };\n                }\n\n                if (!dataSource.schema) {\n                    var fields = {};\n\n                    fields[options.dataStatusField] = { type: \"string\" };\n                    fields[options.dataTitleField] = { type: \"string\" };\n                    fields[options.dataDescriptionField] = { type: \"string\" };\n                    fields[options.dataCategoryField] = { type: \"string\" };\n\n                    if (options.dataOrderField) {\n                        fields[options.dataOrderField] = { type: \"number\" };\n                    }\n\n                    dataSource.schema = {\n                        model: {\n                            fields: fields\n                        }\n                    };\n                }\n\n                if (that.dataSource && that._changeHandler) {\n                    that.dataSource.unbind(CHANGE, that._changeHandler);\n                    that.dataSource.unbind(ERROR, that._errorHandler);\n                } else {\n                    that._changeHandler = that._change.bind(that);\n                    that._errorHandler = that._error.bind(that);\n                }\n\n                that.dataSource = DataSource.create(dataSource)\n                                .bind(CHANGE, that._changeHandler);\n            },\n\n            _change: function(ev) {\n                var that = this;\n\n                if (ev.action && ev.action !== \"sync\") {\n                    return;\n                }\n\n                if (that.trigger(DATABINDING, ev)) {\n                    return;\n                }\n\n                that._progress(true);\n\n                that._clearColumns();\n                that._renderCards(that.dataSource.view());\n                that._closePane();\n\n                that.trigger(DATABOUND, ev);\n                that._progress(false);\n            },\n\n            _error: function() {\n                this._progress(false);\n            },\n\n            _renderCards: function(data) {\n                var that = this;\n\n                for (var i = 0; i < data.length; i++) {\n                    that._renderCard(data[i]);\n                }\n            },\n\n            _renderCard: function(card) {\n                var that = this,\n                    options = extend({}, that.options, { states: that._buildStates() }),\n                    statusField = options.dataStatusField,\n                    status = card[statusField] || GENERIC;\n\n                if (status && that._columns[status]) {\n                    card = new ui.taskboard.Card(options, card, that.resources);\n                    that._columns[status].addCard(card.element);\n                    that._tabindex(card.element);\n                }\n            },\n\n            _clearColumns: function() {\n                var that = this;\n\n                for (var key in that._columns) {\n                    that._columns[key].empty();\n                }\n            },\n\n            _initCardMenu: function() {\n                var that = this,\n                    options = that.options,\n                    cardMenuOptions = isArray(options.cardMenu) ? { items: options.cardMenu } : options.cardMenu;\n\n                cardMenuOptions = extend({}, {\n                    messages: options.messages,\n                    target: that.columnsContainer,\n                    filter: \".k-taskboard-card-menu-button\",\n                    action: that.executeCommand.bind(that),\n                    showOn: \"click\",\n                    alignToAnchor: true,\n                    states: that._buildStates()\n                }, cardMenuOptions);\n\n                if (options.cardMenu === false) {\n                    return;\n                }\n\n                that.cardMenu = new ui.taskboard.CardMenu(\"<ul></ul>\", cardMenuOptions);\n            },\n\n            _initResources: function() {\n                var that = this,\n                    resources = that.options.resources;\n\n                for (var i = 0; i < resources.length; i++) {\n                    that._addResource(resources[i]);\n                }\n            },\n\n            _addResource: function(resource) {\n                var that = this;\n\n                if (!that.resources) {\n                    that.resources = {};\n                }\n\n                that.resources[resource.field] = {\n                    field: resource.field,\n                    name: resource.name,\n                    title: resource.title || resource.field,\n                    dataTextField: resource.dataTextField || \"text\",\n                    dataValueField: resource.dataValueField || \"value\",\n                    dataColorField: resource.dataColorField || \"color\",\n                    valuePrimitive: resource.valuePrimitive === false ? false : true,\n                    multiple: resource.multiple || false,\n                    dataSource: that._resourceDataSource(resource.dataSource)\n                };\n            },\n\n            _resourceDataSource: function(resourceDS) {\n                var dataSource = isArray(resourceDS) ? { data: resourceDS } : resourceDS,\n                    dataSourceInstance = kendo.data.DataSource.create(dataSource);\n\n                return dataSourceInstance;\n            },\n\n            _progress: function(toggle) {\n                var that = this;\n\n                kendo.ui.progress(that.element, toggle);\n            },\n\n            _initKeyboard: function() {\n                var that = this;\n\n                that.keyboardManager = new ui.taskboard.KeyboardManager(that.element);\n\n                that.keyboardManager.bind(ACTION, that.executeCommand.bind(that));\n                that._registerShortcuts();\n            },\n\n            _registerShortcuts: function() {\n                var that = this,\n                    states = that._buildStates();\n\n                if (states.isEditable) {\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: kendo.keys.DELETE\n                    }, { command: \"DeleteColumnCommand\" });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: \"e\",\n                        ctrlKey: true\n                    }, { command: \"EditColumnCommand\", handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: \"a\",\n                        ctrlKey: true\n                    }, { command: \"AddCardCommand\", handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column + \" *\", {\n                        keyCode: kendo.keys.ESC\n                    }, { command: \"CancelEditColumnCommand\" });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.DELETE\n                    }, { command: \"DeleteCardCommand\" });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: \"e\",\n                        ctrlKey: true\n                    }, { command: \"EditCardCommand\", handler: preventDefault });\n                }\n\n                if (states.isSelectable) {\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.ENTER\n                    }, { command: \"SelectCardCommand\", handler: preventDefault });\n                }\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                    keyCode: kendo.keys.UP\n                }, { command: \"MoveFocusCommand\", options: { value: \"up\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                    keyCode: kendo.keys.DOWN\n                }, { command: \"MoveFocusCommand\", options: { value: \"down\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                    keyCode: kendo.keys.LEFT\n                }, { command: \"MoveFocusCommand\", options: { value: \"left\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                    keyCode: kendo.keys.RIGHT\n                }, { command: \"MoveFocusCommand\", options: { value: \"right\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                    keyCode: kendo.keys.LEFT\n                }, { command: \"MoveFocusCommand\", options: { value: \"left\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                    keyCode: kendo.keys.RIGHT\n                }, { command: \"MoveFocusCommand\", options: { value: \"right\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                    keyCode: kendo.keys.DOWN\n                }, { command: \"MoveFocusCommand\", options: { value: \"down\" }, handler: preventDefault });\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that._columnsChangeHandler) {\n                    that.columnsDataSource.unbind(CHANGE, that._columnsChangeHandler);\n                    that.columnsDataSource.unbind(CHANGE, that._columnsErrorHandler);\n                }\n\n                if (that._changeHandler) {\n                    that.dataSource.unbind(CHANGE, that._changeHandler);\n                    that.dataSource.unbind(ERROR, that._errorHandler);\n                }\n\n                for (var key in that._columns) {\n                    that._columns[key].destroy();\n                }\n\n                if (that.toolbar) {\n                    that.toolbar.destroy();\n                }\n\n                if (that.cardMenu) {\n                    that.cardMenu.destroy();\n                }\n\n                if (that.keyboardManager) {\n                    that.keyboardManager.destroy();\n                }\n\n                if (that.pane) {\n                    that._closePane();\n                }\n\n                Widget.fn.destroy.call(that);\n            }\n        });\n\n        kendo.ui.plugin(TaskBoard);\n\n        extend(true, TaskBoard, { styles: TaskBoardStyles });\n\n    })(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}
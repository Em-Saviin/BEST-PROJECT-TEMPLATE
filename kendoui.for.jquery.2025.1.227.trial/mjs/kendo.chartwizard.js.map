{"version":3,"sources":["raw-mjs/kendo.chartwizard.js"],"names":["ChartWizardCommon","__meta__","id","name","category","description","depends","$","kendo","window","Widget","ui","DataSource","data","keys","fontSizes","fontNames","isCategorical","updateState","mergeStates","actionTypes","ActionTypes","getWizardDataFromDataRows","NS","extend","deepExtend","RESIZING","RESIZE","MAXIMIZE","RESTORE","CLICK","KEYDOWN","OPEN","CLOSE","ACTIVATE","CHANGE","DATA_BINGING","DATA_BOUND","EXPORT_PDF","EXPORT_SVG","EXPORT_IMAGE","DOT","REF","REF_SELECTOR","DATA_ACTION","DATA_ACTION_SELECTOR","DATA_ROLE","DATA_ROLE_SELECTOR","DATA_CHART_TYPE_ATTR","SELECTED_STATE","FILL_MODE_OUTLINE","FILL_MODE_FLAT","REG_EXP_CAPITAL","cssClasses","inputRoles","exportButtonOptions","icon","fillMode","items","expansionPanelForChart","bar","content","stackedBar","hundredStackedBar","pie","column","stackedColumn","hundredStackedColumn","line","stackedLine","hundredStackedLine","scatter","chartAreaPanel","messages","legend","chartArea","margins","default","layoutClass","editors","label","text","left","for","field","role","placeholder","auto","action","right","top","bottom","background","color","titlePanel","title","applyTo","className","font","fontPlaceholder","size","sizePlaceholder","seriesPanel","series","type","legendPanel","nowrap","showLegend","position","categoryAxisPanel","categoryAxis","labels","rotation","valueAxisPanel","valueAxis","labelFormat","createState","seriesType","templates","iconWrapper","attribute","htmlEncode","editorsBase","ref","editorId","classes","commonOptions","view","buttons","format","opacity","filter","suggest","dataTextField","dataValueField","step","animation","index","dataContentField","columns","draggable","editable","width","template","pageable","scrollable","navigatable","confirmation","mode","reorderable","rows","generateDataRows","forEach","item","row","find","rowInstance","uid","push","dataRows","map","dataItem","dataColumns","ChartWizard","init","element","options","that","this","fn","call","_initial","_dataSource","notify","dataSource","defaultState","state","actions","resizable","visible","modal","height","exportOptions","fileName","pdf","margin","image","export","exportPDF","exportSVG","exportPNG","tab","chart","expandText","configuration","add","xAxis","chartTitle","chartSubtitle","allSeries","showLabels","reverseOrder","number","currency","percent","yAxis","events","open","close","_attachEvents","splitter","bind","pane","resize","event","sender","each","_","_windowActivateHandler","_windowResizeHandler","trigger","tabStrip","contentElements","on","_handleChartTypeClick","_handleChartTypeKeydown","_refreshHandler","unbind","_refresh","Array","isArray","create","length","_requestInProgress","fetch","_refreshContent","chartState","_getChartStateInstance","previewHeader","previewPane","setOptions","_oldType","_setChartContainerHeight","_detachEvents","destroy","empty","_createExportButton","propertyPane","_seriesGrid","_seriesValueAxisDDL","_initPropertyPane","wrapper","is","center","e","from","_data","_getWizardData","_initWindow","_initSplitter","_initPreviewPane","wizardData","setDataSource","setDataColumns","off","css","keyCode","ENTER","currentTarget","newType","_getRefAttributeValue","closest","chartType","attr","change","includes","stacked","_executeAction","removeClass","addClass","_toggleFieldsForSeriesPanel","_toggleFormatPanels","_refreshEditors","editor","kendoElement","panel","elementRole","panelRef","changed","_getOptionsForPanel","check","checked","enable","val","value","_getFontState","centered","kendoWindow","kendoSplitter","orientation","append","collapsible","previewContent","_initChart","skipDefault","hasState","Object","stateObject","stack","createInitialStateInstance","isPie","initialState","area","transitions","kendoChart","pieState","_initialState","_configureExportButton","dropDownButton","kendoDropDownButton","exportHandlers","done","saveAs","dataURI","exportImage","textParts","split","toUpperCase","click","_preventLabelPointerEvents","tabStripOptions","values","_createTabsContent","kendoTabStrip","activate","contentElement","parent","siblings","_draggableRows","_reorderableRows","_expansionPanels","_prepareDataTab","_prepareFormatTab","_initStaticEditors","activateTab","tabGroup","children","first","tabs","_createExpansionPanelContent","_createChartTypesPanel","custom","_createFormPanel","getData","panelData","mainChartType","chartTypesWrapper","toLowerCase","outerHTML","form","fields","target","formFields","formGridLayout","_ensureSizeValue","fontSize","callback","numberRegExp","toString","fs","test","isNaN","parseInt","sort","a","b","dataAction","newState","getNewState","_seriesDropDownChange","_seriesChange","preventChange","_handlePropertyChange","gridField","valueAxisField","_dynamicConfigurationFields","grid","clone","container","remove","_resetFontValue","isInitial","_getFontField","activeField","activeFieldInitial","newValue","_valueReset","_getFontValue","fontState","fromSibling","active","subfield","sub","_parseFont","_createFontCombobox","comboBox","kendoComboBox","_fontState","fontNameChanged","applySubfieldToSelector","selector","sibling","initial","replace","_createDropDownList","handler","kendoDropDownList","_createSwitch","kendoSwitch","_createCheckBox","kendoCheckBox","_createColorPicker","config","enabled","undefined","colorPicker","kendoColorPicker","select","_createNumericTextBox","kendoNumericTextBox","spin","_createTextBox","textbox","kendoTextBox","_getFieldValue","parts","fontIndex","indexOf","path","slice","pop","join","f","el","fontWeight","parseFloat","_addSeries","_removedSeries","_removeSeries","removeRow","_gridDataBoundHandler","clickHandlers","button","buttonElement","removeAttr","enableRemove","enableAdd","kendoButton","_initGrid","kendoGrid","toolbar","dataBound","_preventChange","_seriesReordering","_reorderedData","cellClose","_handleSeriesEdit","_handleSeriesRemove","rowReorder","prevIndex","currentIndex","splice","prepareReorderedDataForGrid","oldIndex","newIndex","itemIndex","model","newField","unshift","valueAxisDDL","valueField","_initEditors","editorType","editorOptions","categoryAxisField","_dynamicFormatPanels","_initialAxesPanelsContent","initialContentCategory","html","initialContentValue","messagesCategory","messagesValue","categoryWrapper","valueWrapper","kendoExpansionPanel","expander","categoryAxisExpander","valueAxisFieldExpander","positionsData","legendPositions","formats","labelFormats","titleValues","titles","fieldForAxes","isCategoryDropDown","dropdownlist","chartarea","numerictextbox","min","max","colorpicker","_activeTitle","t","_titleFieldChange","_activeSeries","s","_activeSeriesChange","_changeSeriesColor","checkbox","every","_showLabels","p","switch","categoryaxis","reverse","valueaxis","_applyTo","instance","regex","RegExp","replaceAll","_currentActiveSeries","currentAction","shift","newAction","seriesName","all","getAttribute","prevRef","tabRef","expansionPanel","complete","hasNewDataSource","hasNewDataColumns","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.chartwizard.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.icons.js';\nimport './kendo.grid.js';\nimport './kendo.expansionpanel.js';\nimport './kendo.window.js';\nimport './kendo.splitter.js';\nimport './kendo.form.js';\nimport './kendo.tabstrip.js';\nimport './kendo.dataviz.chart.js';\nimport './kendo.html.icon.js';\nimport './kendo.dropdownbutton.js';\nimport './kendo.colorpicker.js';\nimport { C as ChartWizardCommon } from './kendo.charts.cmn.chunk.js';\n\nconst __meta__ = {\n    id: \"chartwizard\",\n    name: \"ChartWizard\",\n    category: \"web\",\n    description: \"The ChartWizard allows configuration and visual representation of various charts\",\n    depends: [\"core\", \"icons\", \"html.icon\", \"grid\", \"expansionpanel\", \"window\", \"form\", \"tabstrip\", \"dataviz.chart\", \"splitter\", \"dropdownbutton\", \"colorpicker\", \"charts.cmn.chunk\"],\n};\n\n(function($) {\n    const kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        DataSource = kendo.data.DataSource,\n        keys = kendo.keys,\n        fontSizes = ChartWizardCommon.fontSizes,\n        fontNames = ChartWizardCommon.fontNames,\n        isCategorical = ChartWizardCommon.isCategorical,\n        updateState = ChartWizardCommon.updateState,\n        mergeStates = ChartWizardCommon.mergeStates,\n        actionTypes = ChartWizardCommon.ActionTypes,\n        getWizardDataFromDataRows = ChartWizardCommon.getWizardDataFromDataRows,\n        NS = \".kendoChartWizard\",\n        ui = kendo.ui,\n        extend = $.extend,\n        deepExtend = kendo.deepExtend,\n        RESIZING = \"resizing\",\n        RESIZE = \"resize\",\n        MAXIMIZE = \"maximize\",\n        RESTORE = \"restore\",\n        CLICK = \"click\",\n        KEYDOWN = \"keydown\",\n        OPEN = \"open\",\n        CLOSE = \"close\",\n        ACTIVATE = \"activate\",\n        CHANGE = \"change\",\n        DATA_BINGING = \"dataBinding\",\n        DATA_BOUND = \"dataBound\",\n        EXPORT_PDF = \"exportPDF\",\n        EXPORT_SVG = \"exportSVG\",\n        EXPORT_IMAGE = \"exportImage\",\n        ICON_SIZE = \"xlarge\",\n        CHART = 'chart',\n        DATA = 'data',\n        FORMAT = 'format',\n        DOT = \".\",\n        REF = \"ref\",\n        REF_SELECTOR = \"ref*=\",\n        DATA_ACTION = \"data-action\",\n        DATA_ACTION_SELECTOR = \"[data-action]\",\n        DATA_ROLE = \"data-role\",\n        DATA_ROLE_SELECTOR = \"data-role=\",\n        DATA_CHART_TYPE_ATTR = \"data-chart-type\",\n        SELECTED_STATE = \"k-selected\",\n        FILL_MODE_OUTLINE = \"outline\",\n        FILL_MODE_FLAT = \"flat\",\n        STACKED = \"stacked\",\n        INITIAL_TYPE = \"bar\",\n        HUNDRED_STACKED = \"hundredstacked\",\n        REG_EXP_CAPITAL = /(?=[A-Z])/;\n\n\n    const cssClasses = {\n        chartWizard: \"k-chart-wizard\",\n        previewPane: \"k-chart-wizard-preview-pane\",\n        previewPaneHeader: \"k-preview-pane-header\",\n        previewPaneContent: \"k-preview-pane-content\",\n        propertyPane: \"k-chart-wizard-property-pane\",\n        splitter: \"k-chart-wizard-splitter\",\n        expansionPanelWrapper: \"k-expander\",\n        cols2gap4: \"k-grid-cols-2 k-gap-x-4\",\n        colSpan2: \"k-col-span-2\",\n    };\n\n    const inputRoles = {\n        numericTextBox: \"numerictextbox\",\n        colorPicker: \"colorpicker\",\n        textBox: \"textbox\",\n        comboBox: \"combobox\",\n        checkBox: \"checkbox\",\n        dropDownList: \"dropdownlist\",\n        switch: \"switch\",\n    };\n\n    const exportButtonOptions = {\n        icon: \"export\",\n        fillMode: FILL_MODE_FLAT,\n        items: [\n            { id: \"export-pdf\", icon: \"file-pdf\" },\n            { id: \"export-svg\", icon: \"file\" },\n            { id: \"export-png\", icon: \"file-image\" },\n        ]\n    };\n\n    const expansionPanelForChart = {\n        bar: {\n            content: {\n                bar: \"chart-bar-clustered\",\n                stackedBar: \"chart-bar-stacked\",\n                hundredStackedBar: \"chart-bar-stacked100\",\n            },\n        },\n        pie: {\n            content: {\n                pie: \"chart-pie\",\n            }\n        },\n        column: {\n            content: {\n                column: \"chart-column-clustered\",\n                stackedColumn: \"chart-column-stacked\",\n                hundredStackedColumn: \"chart-column-stacked100\",\n            }\n        },\n        line: {\n            content: {\n                line: \"chart-line\",\n                stackedLine: \"chart-line-stacked\",\n                hundredStackedLine: \"chart-line-stacked100\",\n            }\n        },\n        scatter: {\n            content: {\n                scatter: \"chart-scatter\"\n            }\n        },\n    };\n\n    const dataTabPanel = (messages) => [\n        {\n            legend: messages.configuration.categoryAxis, editors: {\n                id: \"category-axis\",\n                role: inputRoles.dropDownList,\n                action: \"categoryAxisX\"\n            }\n        },\n        {\n            legend: messages.configuration.valueAxis, editors: {\n                id: \"value-axis\",\n                role: inputRoles.dropDownList,\n                action: \"valueAxisY\"\n            }\n        },\n        {\n            legend: messages.configuration.series.title, editors: {\n                custom: `<div class=\"k-grid\" ${DATA_ACTION}=\"seriesChange\"></div>`\n            }\n        },\n    ];\n\n\n    const chartAreaPanel = (messages) =>\n    ([\n        {\n            legend: messages.chartArea.margins.default,\n            layoutClass: cssClasses.cols2gap4,\n            editors: [\n                {\n                    label: {\n                        text: messages.chartArea.margins.left,\n                        for: \"left\"\n                    },\n                    field: {\n                        id: \"left\",\n                        role: inputRoles.numericTextBox,\n                        placeholder: messages.chartArea.margins.auto,\n                        action: \"areaMarginLeft\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.chartArea.margins.right,\n                        for: \"right\"\n                    },\n                    field: {\n                        id: \"right\",\n                        role: inputRoles.numericTextBox,\n                        placeholder: messages.chartArea.margins.auto,\n                        action: \"areaMarginRight\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.chartArea.margins.top,\n                        for: \"top\"\n                    },\n                    field: {\n                        id: \"top\",\n                        role: inputRoles.numericTextBox,\n                        placeholder: messages.chartArea.margins.auto,\n                        action: \"areaMarginTop\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.chartArea.margins.bottom,\n                        for: \"bottom\"\n                    },\n                    field: {\n                        id: \"bottom\",\n                        role: inputRoles.numericTextBox,\n                        placeholder: messages.chartArea.margins.auto,\n                        action: \"areaMarginBottom\"\n                    }\n                },\n            ]\n        },\n        {\n            legend: messages.chartArea.background.default,\n            editors: [\n                {\n                    label: {\n                        text: messages.chartArea.background.color,\n                        for: 'background'\n                    },\n                    field: {\n                        id: 'background',\n                        role: inputRoles.colorPicker,\n                        action: \"areaBackground\"\n                    }\n                }\n            ]\n        }\n    ]);\n\n    const titlePanel = (messages) =>\n    ([\n        {\n            layoutClass: cssClasses.cols2gap4,\n            editors: [\n                {\n                    label: {\n                        text: messages.title.applyTo,\n                        for: \"apply-to-title\"\n                    },\n                    field: {\n                        id: \"apply-to-title\",\n                        role: inputRoles.dropDownList,\n                        action: \"activateTitle\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.title.label,\n                        for: \"title-text\"\n                    },\n                    field: {\n                        id: \"title-text\",\n                        role: inputRoles.textBox,\n                        action: \"titleText\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.title.font,\n                        for: \"title-font\"\n                    },\n                    field: {\n                        id: \"title-font\",\n                        role: inputRoles.comboBox,\n                        placeholder: messages.title.fontPlaceholder,\n                        action: \"titleFontName\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.title.size,\n                        for: \"title-size\"\n                    },\n                    field: {\n                        id: \"title-size\",\n                        role: inputRoles.comboBox,\n                        placeholder: messages.title.sizePlaceholder,\n                        action: \"titleFontSize\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.title.color,\n                        for: 'title-color'\n                    },\n                    field: {\n                        id: 'title-color',\n                        role: inputRoles.colorPicker,\n                        action: \"titleColor\"\n                    }\n                }\n            ]\n        },\n    ]);\n\n    const seriesPanel = (messages) =>\n    ([\n        {\n            editors: [\n                {\n                    label: {\n                        text: messages.series.applyTo,\n                        for: \"apply-to-series\"\n                    },\n                    field: {\n                        id: \"apply-to-series\",\n                        role: inputRoles.dropDownList,\n                        action: \"activateSeries\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.series.color,\n                        for: \"series-color\"\n                    },\n                    field: {\n                        id: \"series-color\",\n                        role: inputRoles.colorPicker,\n                        action: \"seriesColor\"\n                    }\n                },\n                {\n                    field: {\n                        id: \"show-labels\",\n                        type: \"checkbox\",\n                        role: inputRoles.checkBox,\n                        action: \"seriesLabel\"\n                    }\n                },\n            ]\n        },\n    ]);\n\n\n    const legendPanel = (messages) =>\n    ([\n        {\n            layoutClass: cssClasses.cols2gap4,\n            editors: [\n                {\n                    nowrap: true,\n                    label: {\n                        text: messages.legend.showLegend,\n                        for: \"show-legend\"\n                    },\n                },\n                {\n                    nowrap: true,\n                    field: {\n                        id: \"show-legend\",\n                        role: inputRoles.switch,\n                        action: \"legendVisible\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.legend.font,\n                        for: \"legend-font\"\n                    },\n                    field: {\n                        id: \"legend-font\",\n                        placeholder: messages.legend.fontPlaceholder,\n                        role: inputRoles.comboBox,\n                        action: \"legendFontName\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.legend.size,\n                        for: \"legend-size\"\n                    },\n                    field: {\n                        id: \"legend-size\",\n                        role: inputRoles.comboBox,\n                        placeholder: messages.legend.sizePlaceholder,\n                        action: \"legendFontSize\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.title.color,\n                        for: 'legend-color'\n                    },\n                    field: {\n                        id: 'legend-color',\n                        role: inputRoles.colorPicker,\n                        action: \"legendColor\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.legend.position.default,\n                        for: 'legend-position'\n                    },\n                    field: {\n                        id: 'legend-position',\n                        role: inputRoles.dropDownList,\n                        action: \"legendPosition\"\n                    },\n                    className: cssClasses.colSpan2\n                }\n            ]\n        },\n    ]);\n\n    const categoryAxisPanel = (messages) =>\n    ([\n        {\n            legend: messages.categoryAxis.title.text,\n            layoutClass: cssClasses.cols2gap4,\n            editors: [\n                {\n                    field: {\n                        id: \"category-axis-title\",\n                        role: inputRoles.textBox,\n                        placeholder: messages.categoryAxis.title.placeholder,\n                        action: \"categoryAxisTitleText\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.categoryAxis.title.font,\n                        for: \"category-axis-title-font\"\n                    },\n                    field: {\n                        id: \"category-axis-title-font\",\n                        role: inputRoles.comboBox,\n                        placeholder: messages.categoryAxis.title.fontPlaceholder,\n                        action: \"categoryAxisTitleFontName\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.categoryAxis.title.size,\n                        for: \"category-axis-title-size\"\n                    },\n                    field: {\n                        id: \"category-axis-title-size\",\n                        role: inputRoles.comboBox,\n                        placeholder: messages.categoryAxis.title.sizePlaceholder,\n                        action: \"categoryAxisTitleFontSize\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.categoryAxis.title.color,\n                        for: \"category-axis-title-color\"\n                    },\n                    field: {\n                        id: \"category-axis-title-color\",\n                        role: inputRoles.colorPicker,\n                        action: \"categoryAxisTitleColor\"\n                    }\n                },\n            ]\n        },\n        {\n            layoutClass: cssClasses.cols2gap4,\n            legend: messages.categoryAxis.labels.text,\n            editors: [\n                {\n                    label: {\n                        text: messages.categoryAxis.labels.font,\n                        for: \"category-axis-labels-font\"\n                    },\n                    field: {\n                        id: 'category-axis-labels-font',\n                        role: inputRoles.comboBox,\n                        placeholder: messages.categoryAxis.labels.fontPlaceholder,\n                        action: \"categoryAxisLabelsFontName\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.categoryAxis.labels.size,\n                        for: \"category-axis-labels-size\"\n                    },\n                    field: {\n                        id: 'category-axis-labels-size',\n                        role: inputRoles.comboBox,\n                        placeholder: messages.categoryAxis.labels.sizePlaceholder,\n                        action: \"categoryAxisLabelsFontSize\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.categoryAxis.labels.color,\n                        for: \"category-axis-labels-color\"\n                    },\n                    field: {\n                        id: 'category-axis-labels-color',\n                        role: inputRoles.colorPicker,\n                        action: \"categoryAxisLabelsColor\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.categoryAxis.labels.rotation.text,\n                        for: \"category-axis-labels-rotation\"\n                    },\n                    field: {\n                        id: 'category-axis-labels-rotation',\n                        role: inputRoles.numericTextBox,\n                        placeholder: messages.categoryAxis.labels.rotation.auto,\n                        action: \"categoryAxisLabelsRotation\"\n                    }\n                },\n                {\n                    field: {\n                        id: 'category-axis-labels-reverse-order',\n                        role: inputRoles.checkBox,\n                        action: \"categoryAxisReverseOrder\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n            ]\n        }\n    ]);\n    const valueAxisPanel = (messages) =>\n    ([\n        {\n            legend: messages.valueAxis.title.text,\n            layoutClass: cssClasses.cols2gap4,\n            editors: [\n                {\n                    field: {\n                        id: \"value-axis-title\",\n                        role: inputRoles.textBox,\n                        placeholder: messages.valueAxis.title.placeholder,\n                        action: \"valueAxisTitleText\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.categoryAxis.title.font,\n                        for: \"value-axis-title-font\"\n                    },\n                    field: {\n                        id: \"value-axis-title-font\",\n                        role: inputRoles.comboBox,\n                        placeholder: messages.valueAxis.title.fontPlaceholder,\n                        action: \"valueAxisTitleFontName\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.valueAxis.title.size,\n                        for: \"value-axis-title-size\"\n                    },\n                    field: {\n                        id: \"value-axis-title-size\",\n                        role: inputRoles.comboBox,\n                        placeholder: messages.valueAxis.title.sizePlaceholder,\n                        action: \"valueAxisTitleFontSize\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.valueAxis.title.color,\n                        for: \"value-axis-title-color\"\n                    },\n                    field: {\n                        id: \"value-axis-title-color\",\n                        role: inputRoles.colorPicker,\n                        action: \"valueAxisTitleColor\"\n                    }\n                },\n            ]\n        },\n        {\n            layoutClass: cssClasses.cols2gap4,\n            legend: messages.valueAxis.labels.text,\n            editors: [\n                {\n                    label: {\n                        text: messages.valueAxis.labels.labelFormat.default,\n                        for: \"value-axis-label-format\"\n                    },\n                    field: {\n                        id: 'value-axis-label-format',\n                        role: inputRoles.dropDownList,\n                        action: \"valueAxisLabelsFormat\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.valueAxis.labels.font,\n                        for: \"value-axis-label-font\"\n                    },\n                    field: {\n                        id: 'value-axis-label-font',\n                        role: inputRoles.comboBox,\n                        placeholder: messages.valueAxis.labels.fontPlaceholder,\n                        action: \"valueAxisLabelsFontName\"\n                    },\n                    className: cssClasses.colSpan2\n                },\n                {\n                    label: {\n                        text: messages.valueAxis.labels.size,\n                        for: \"value-axis-label-size\"\n                    },\n                    field: {\n                        id: 'value-axis-label-size',\n                        role: inputRoles.comboBox,\n                        placeholder: messages.valueAxis.labels.sizePlaceholder,\n                        action: \"valueAxisLabelsFontSize\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.valueAxis.labels.color,\n                        for: \"value-axis-labels-color\"\n                    },\n                    field: {\n                        id: 'value-axis-labels-color',\n                        role: inputRoles.colorPicker,\n                        action: \"valueAxisLabelsColor\"\n                    }\n                },\n                {\n                    label: {\n                        text: messages.valueAxis.labels.rotation.text,\n                        for: \"value-axis-labels-rotation\"\n                    },\n                    field: {\n                        id: 'value-axis-labels-rotation',\n                        role: inputRoles.numericTextBox,\n                        placeholder: messages.valueAxis.labels.rotation.auto,\n                        action: \"valueAxisLabelsRotation\"\n                    }\n                },\n            ]\n        }\n    ]);\n\n    function createState(data, seriesType) {\n        return ChartWizardCommon.createState(data, seriesType);\n    }\n\n    function createInitialStateInstance(data, seriesType, defaultState, stateObject) {\n        var state = createState(\n            data,\n            (defaultState && defaultState.seriesType) || seriesType\n        );\n\n        if (stateObject) {\n            state = deepExtend({}, state, stateObject);\n        }\n\n        return typeof (defaultState && defaultState.stack) !== \"undefined\"\n            ? updateState(state, actionTypes.stacked, defaultState.stack)\n            : state;\n    }\n\n    function getFormatPanels() {\n        return [\n            { ref: \"chartarea\", getData: chartAreaPanel },\n            { ref: \"title\", getData: titlePanel },\n            { ref: \"series\", getData: seriesPanel },\n            { ref: \"legend\", getData: legendPanel },\n            { ref: \"categoryaxis\", getData: categoryAxisPanel },\n            { ref: \"valueaxis\", getData: valueAxisPanel },\n        ];\n    }\n    function getNewState({ state, data, type, action, change }) {\n        let newState = state;\n        if (data && type) {\n            newState = mergeStates(state, createState(data, type));\n        }\n        if (action && (change !== null && change !== undefined)) {\n            newState = updateState(newState, action, change);\n        }\n\n        newState.transitions = false;\n\n        return newState;\n    }\n\n    function prepareReorderedDataForGrid(grid, prevIndex, currentIndex) {\n        const data = grid.options.dataSource;\n        const item = data.splice(prevIndex, 1);\n        data.splice(currentIndex, 0, item[0]);\n\n        return data;\n    }\n\n    const templates = {\n        chartTypesWrapper: () => `<div class=\"k-chart-types-wrapper\"></div>`,\n        iconTextItem: (iconWrapper, text, attribute) => `<div class=\"k-icon-text-wrapper\" ${attribute ?? \"\"}>${iconWrapper}${kendo.htmlEncode(text)}</div>`,\n        iconWrapper: (icon, size) => `<div class=\"k-icon-background-area\" tabindex=\"0\">${kendo.ui.icon({ icon: icon, size: size })}</div>`,\n        formElement: () => `<form class=\"k-form k-form-md\"></form>`,\n        formFieldSet: (legend, editorsBase) => `<fieldset class=\"k-form-fieldset\">\n            ${legend ? `<legend class=\"k-form-legend\">${legend}</legend>` : ''}\n            ${editorsBase}\n        </fieldset>`,\n        divContentWrapper: (ref) => `<div ref=${ref}></div>`,\n        formFieldWrap: (field) => `<div class=\"k-form-field-wrap\">${field}</div>`,\n        formField: (content, className) => `<div class=\"k-form-field${className ? \" \" + className : \"\"}\">\n            ${content}\n        </div>`,\n        fieldContent: (label, field) => `\n            ${label}\n            ${field}`,\n        label: (text, editorId, className) => `<label for=\"${editorId}\" class=\"k-label${className ? \" \" + className : \"\"}\">${text}</label>`,\n        formGridLayout: (classes) => `<div class=\"k-form-layout k-d-grid${\" \" + classes}\"></div>`,\n        inputBaseElement: (field) => `<input ${field.id ? `id=\"${field.id}\"` : \"\"} ${DATA_ROLE}=${field.role} ${DATA_ACTION}=${field.action} ${field.type ? `type=\"${field.type}\"` : \"\"} ${field.placeholder ? `placeholder=\"${kendo.htmlEncode(field.placeholder)}\"` : \"\"}/>`,\n    };\n\n    const legendPositions = (messages) => [\n        { value: \"bottom\", text: messages.position.bottom },\n        { value: \"top\", text: messages.position.top },\n        { value: \"left\", text: messages.position.left },\n        { value: \"right\", text: messages.position.right },\n    ];\n\n    const labelFormats = (messages) => [\n        { value: \"\", text: messages.labels.labelFormat.text },\n        { value: \"n0\", text: messages.labels.labelFormat.number },\n        { value: \"c0\", text: messages.labels.labelFormat.currency },\n        { value: \"p0\", text: messages.labels.labelFormat.percent },\n    ];\n\n    const titles = (messages) => [\n        { value: \"title\", text: messages.format.title.chartTitle, },\n        { value: \"subtitle\", text: messages.format.title.chartSubtitle },\n    ];\n\n    const commonOptions = {\n        colorPicker: {\n            fillMode: FILL_MODE_OUTLINE,\n            view: \"gradient\",\n            buttons: false,\n            format: \"rgb\",\n            opacity: true\n        },\n        comboBox: {\n            filter: \"contains\",\n            suggest: true,\n            dataTextField: \"text\",\n            dataValueField: \"value\",\n        },\n        numericTextBox: {\n            step: 1,\n            fillMode: FILL_MODE_OUTLINE,\n        },\n        dropDownList: {\n            fillMode: FILL_MODE_OUTLINE,\n            animation: false,\n            dataTextField: \"text\",\n            dataValueField: \"value\",\n            index: 0,\n        },\n        tabStrip: {\n            dataTextField: \"name\",\n            dataContentField: \"content\",\n        },\n        grid: {\n            columns: [\n                {\n                    id: 1,\n                    field: 'reoreder',\n                    draggable: true,\n                    editable: () => false,\n                    width: \"40px\"\n                },\n                { id: 2, field: 'name' },\n                {\n                    id: 3,\n                    field: 'remove',\n                    editable: () => false,\n                    width: \"40px\",\n                    template: () => `<button ${DATA_ACTION}=\"remove\" tabindex=\"0\"></button>`\n                }\n            ],\n            pageable: false,\n            scrollable: false,\n            navigatable: false,\n            editable: {\n                confirmation: false,\n                mode: \"incell\"\n            },\n            reorderable: {\n                rows: true\n            }\n        }\n    };\n\n    const generateDataRows = (data, columns) => {\n        let rows = [];\n\n        data.forEach((item) => {\n            const row = rows.find((rowInstance) => rowInstance.uid === item.uid);\n            if (!row) {\n                rows.push(item);\n            } else {\n                extend(row, item);\n            }\n        });\n\n        const dataRows = rows.map((row) => ({\n            dataItem: row,\n            dataColumns: columns\n        }));\n\n        return getWizardDataFromDataRows(dataRows);\n    };\n\n    const ChartWizard = Widget.extend({\n        init: function(element, options) {\n            let that = this;\n            options = options || {};\n            that.options = deepExtend({}, that.options, options);\n\n            Widget.fn.init.call(that, element, options);\n\n            that._initial = true;\n            that._dataSource();\n\n            kendo.notify(that);\n        },\n\n        options: {\n            name: \"ChartWizard\",\n            dataSource: [],\n            dataColumns: [],\n            defaultState: {},\n            state: {},\n            window: {\n                actions: [\"Maximize\", \"Close\"],\n                resizable: true,\n                visible: true,\n                modal: true,\n                scrollable: false,\n                animation: false,\n                width: 700,\n                height: 550\n            },\n            exportOptions: {\n                fileName: 'chart',\n                pdf: {\n                    margin: '1cm'\n                },\n                image: {\n                    width: 800,\n                    height: 600\n                }\n            },\n            messages: {\n                window: {\n                    title: \"Chart Preview\"\n                },\n                export: \"Export\",\n                exportPDF: \"PDF File\",\n                exportSVG: \"SVG File\",\n                exportPNG: \"PNG File\",\n                tab: {\n                    chart: \"Chart\",\n                    data: \"Data\",\n                    format: \"Format\"\n                },\n                chart: {\n                    bar: {\n                        expandText: \"Bar Chart\",\n                        bar: \"Bar\",\n                        stackedBar: \"Stacked Bar\",\n                        hundredStackedBar: \"100% Stacked Bar\",\n                    },\n                    pie: {\n                        expandText: \"Pie Chart\",\n                        pie: \"Pie\",\n                    },\n                    column: {\n                        expandText: \"Column Chart\",\n                        column: \"Column\",\n                        stackedColumn: \"Stacked Column\",\n                        hundredStackedColumn: \"100% Stacked Column\",\n                    },\n                    line: {\n                        expandText: \"Line Chart\",\n                        line: \"Line\",\n                        stackedLine: \"Stacked Line\",\n                        hundredStackedLine: \"100% Stacked Line\",\n                    },\n                    scatter: {\n                        expandText: \"Scatter Chart\",\n                        scatter: \"Scatter\",\n                    },\n                },\n                data: {\n                    configuration: {\n                        expandText: \"Configuration\",\n                        series: {\n                            title: \"Series\",\n                            add: \"Add\",\n                        },\n                        valueAxis: \"Value Axis\",\n                        categoryAxis: \"Category Axis\",\n                        xAxis: \"X Axis\",\n                    }\n                },\n                format: {\n                    chartArea: {\n                        expandText: \"Chart Area\",\n                        margins: {\n                            default: \"Margins\",\n                            auto: \"Auto\",\n                            left: \"Left\",\n                            right: \"Right\",\n                            top: \"Top\",\n                            bottom: \"Bottom\",\n                        },\n                        background: {\n                            default: \"Background\",\n                            color: \"Color\",\n                        },\n                    },\n                    title: {\n                        expandText: \"Title\",\n                        applyTo: \"Apply to\",\n                        chartTitle: \"Chart Title\",\n                        chartSubtitle: \"Chart Subtitle\",\n                        label: \"Title\",\n                        font: \"Font\",\n                        fontPlaceholder: \"(inherited font)\",\n                        size: \"Size\",\n                        sizePlaceholder: \"px\",\n                        color: \"Color\",\n                    },\n                    series: {\n                        expandText: \"Series\",\n                        applyTo: \"Apply to\",\n                        allSeries: \"All Series\",\n                        color: \"Color\",\n                        showLabels: \"Show Labels\",\n                    },\n                    legend: {\n                        expandText: \"Legend\",\n                        showLegend: \"Show Legend\",\n                        font: \"Font\",\n                        fontPlaceholder: \"(inherited font)\",\n                        size: \"Size\",\n                        sizePlaceholder: \"px\",\n                        color: \"Color\",\n                        position: {\n                            default: \"Position\",\n                            top: \"Top\",\n                            bottom: \"Bottom\",\n                            left: \"Left\",\n                            right: \"Right\",\n                        }\n                    },\n                    categoryAxis: {\n                        expandText: \"Category Axis\",\n                        title: {\n                            text: \"Title\",\n                            placeholder: \"Axis Title\",\n                            font: \"Font\",\n                            fontPlaceholder: \"(inherited font)\",\n                            size: \"Size\",\n                            sizePlaceholder: \"px\",\n                            color: \"Color\",\n                        },\n                        labels: {\n                            text: \"Labels\",\n                            font: \"Font\",\n                            fontPlaceholder: \"(inherited font)\",\n                            size: \"Size\",\n                            sizePlaceholder: \"px\",\n                            color: \"Color\",\n                            rotation: {\n                                text: \"Rotation\",\n                                auto: \"Auto\",\n                            },\n                            reverseOrder: \"Reverse Order\",\n                        }\n                    },\n                    valueAxis: {\n                        expandText: \"Value Axis\",\n                        title: {\n                            text: \"Title\",\n                            placeholder: \"Axis Title\",\n                            font: \"Font\",\n                            fontPlaceholder: \"(inherited font)\",\n                            size: \"Size\",\n                            sizePlaceholder: \"px\",\n                            color: \"Color\",\n                        },\n                        labels: {\n                            text: \"Labels\",\n                            labelFormat: {\n                                default: \"Label Format\",\n                                text: \"Text\",\n                                number: \"Number\",\n                                currency: \"Currency\",\n                                percent: \"Percent\",\n                            },\n                            font: \"Font\",\n                            fontPlaceholder: \"(inherited font)\",\n                            size: \"Size\",\n                            sizePlaceholder: \"px\",\n                            color: \"Color\",\n                            rotation: {\n                                text: \"Rotation\",\n                                auto: \"Auto\",\n                            },\n                        },\n                    },\n                    xAxis: {\n                        expandText: \"X Axis\",\n                    },\n                    yAxis: {\n                        expandText: \"Y Axis\",\n                    },\n                }\n            }\n        },\n\n        events: [\n            RESIZING,\n            DATA_BINGING,\n            DATA_BOUND,\n            RESIZE,\n            CLICK,\n            KEYDOWN,\n            OPEN,\n            CLOSE,\n            CHANGE,\n            EXPORT_PDF,\n            EXPORT_SVG,\n            EXPORT_IMAGE\n        ],\n\n        open: function() {\n            const that = this;\n            that.window.open();\n        },\n\n        close: function() {\n            const that = this;\n            that.window.close();\n        },\n\n\n        _attachEvents: function() {\n            const that = this;\n\n            that.splitter.bind(RESIZING, ({ pane }) => {\n                kendo.resize(pane);\n            });\n            that.splitter.bind(RESIZE, (event) => {\n                event.sender.element.find(DOT + \"k-pane\").each((_, pane) => {\n                    kendo.resize(pane);\n                });\n            });\n\n            that.window.bind(ACTIVATE, that._windowActivateHandler.bind(that));\n\n            that.window.bind(RESIZE, that._windowResizeHandler.bind(that));\n\n            that.window.bind(MAXIMIZE, that._windowActivateHandler.bind(that));\n\n            that.window.bind(RESTORE, that._windowActivateHandler.bind(that));\n\n            that.window.bind(CLOSE, function() {\n                that.trigger(CLOSE);\n            });\n\n            that.window.bind(OPEN, function() {\n                that.trigger(OPEN);\n            });\n\n            that.tabStrip.contentElements.on(CLICK + NS, DOT + \"k-icon-text-wrapper\", that._handleChartTypeClick.bind(that));\n            that.tabStrip.contentElements.on(KEYDOWN + NS, DOT + \"k-icon-text-wrapper\", that._handleChartTypeKeydown.bind(that));\n        },\n\n        _dataSource: function() {\n            const that = this,\n                options = that.options;\n\n            let dataSource = options.dataSource;\n\n            if (that.dataSource && that._refreshHandler) {\n                that.dataSource.unbind(CHANGE, that._refreshHandler);\n            } else {\n                that._refreshHandler = that._refresh.bind(that);\n            }\n\n            if (dataSource && dataSource instanceof DataSource) {\n                that.dataSource = dataSource.bind(CHANGE, that._refreshHandler);\n            } else {\n                dataSource = Array.isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                that.dataSource = DataSource.create(dataSource)\n                    .bind(CHANGE, that._refreshHandler);\n\n            }\n\n            if (that.dataSource.data().length) {\n                that._refresh();\n            } else if (!that.dataSource._requestInProgress) {\n                that.dataSource.fetch();\n            }\n        },\n\n        _refreshContent: function() {\n            const that = this;\n            const options = that.options;\n            const chartState = that._getChartStateInstance(options);\n            const previewHeader = that.previewPane.find(DOT + cssClasses.previewPaneHeader);\n\n            that.window.setOptions(\n                {\n                    title: kendo.htmlEncode(options.messages.window.title),\n                    ...options.window\n                });\n\n            that._oldType = null;\n\n            that._setChartContainerHeight();\n            that.chartState = extend(that.chartState, chartState);\n            that.chart.setOptions(that.chartState);\n\n            that._detachEvents();\n\n            kendo.destroy(previewHeader);\n            previewHeader.empty();\n            that._createExportButton(previewHeader);\n\n            kendo.destroy(that.propertyPane);\n            that.propertyPane.empty();\n            that._seriesGrid = null;\n            that._seriesValueAxisDDL = null;\n\n            that._initPropertyPane();\n\n            that._attachEvents();\n\n            if (!that.window.wrapper.is(\":visible\") && options.window.visible) {\n                that.window.open();\n            }\n\n            if (!options.position) {\n                that.window.center();\n            }\n        },\n\n        _refresh: function(e) {\n            const that = this;\n            let data = Array.from(that.dataSource.data());\n\n            that.trigger(DATA_BINGING, { data: data });\n\n            data = that._data = that._getWizardData(data);\n\n            if (that._initial) {\n                that._initWindow();\n                that._initSplitter();\n                that._initPreviewPane();\n                that._initPropertyPane();\n\n                that._attachEvents();\n\n                that._initial = false;\n            } else {\n                that._refreshContent();\n            }\n\n            that.trigger(DATA_BOUND, { data: data });\n        },\n\n        _getWizardData: function(data) {\n            const that = this;\n            let wizardData = data;\n\n            const dataColumns = that.options.dataColumns ? that.options.dataColumns.map((column) => {\n                if (typeof column === \"string\") {\n                    return { field: column };\n                }\n\n                return column;\n            }) : [];\n\n            if (data.length && data[0].dataItem && data[0].dataColumns) {\n                wizardData = getWizardDataFromDataRows(data);\n            } else if (data.length && !Array.isArray(data[0]) && dataColumns.length) {\n                wizardData = generateDataRows(data, dataColumns);\n            }\n\n            return wizardData;\n        },\n\n        setDataSource: function(dataSource) {\n            const that = this;\n            const options = that.options;\n\n            if (dataSource) {\n                options.dataSource = dataSource;\n                that._dataSource();\n            }\n        },\n\n        setDataColumns: function(dataColumns) {\n            const that = this;\n            const options = that.options;\n\n            if (dataColumns.length) {\n                options.dataColumns = dataColumns;\n            }\n        },\n\n        _detachEvents: function() {\n            const that = this;\n\n            that.splitter.unbind(RESIZING);\n            that.splitter.unbind(RESIZE);\n            that.window.unbind(ACTIVATE);\n            that.window.unbind(RESIZE);\n            that.window.unbind(CLOSE);\n            that.window.unbind(OPEN);\n            that.window.unbind(MAXIMIZE);\n            that.window.unbind(RESTORE);\n            that.tabStrip.contentElements.off(CLICK + NS);\n            that.tabStrip.contentElements.off(KEYDOWN + NS);\n        },\n\n        _setChartContainerHeight: function() {\n            const that = this;\n            that.previewPane.find(DOT + cssClasses.previewPaneContent).css({\n                height: that.previewPane.height() - 50,\n            });\n        },\n\n        _windowActivateHandler: function() {\n            const that = this;\n            that._setChartContainerHeight();\n            that.chart.resize();\n        },\n\n        _windowResizeHandler: function() {\n            const that = this;\n            that._setChartContainerHeight();\n        },\n\n        _handleChartTypeKeydown: function(e) {\n            if (e.keyCode === keys.ENTER) {\n                this._handleChartTypeClick(e);\n            }\n        },\n\n        _handleChartTypeClick: function(e) {\n            const that = this;\n            const item = $(e.currentTarget);\n            const newType = that._getRefAttributeValue(item.closest(DOT + \"k-expander-content\")[0])[0];\n            const chartType = item.attr(DATA_CHART_TYPE_ATTR);\n            const chartState = that.chartState;\n            let change = null;\n            let action = null;\n\n            if (chartType.includes(HUNDRED_STACKED)) {\n                action = actionTypes.stacked;\n                change = { type: \"100%\" };\n            } else if (chartType.includes(STACKED)) {\n                action = actionTypes.stacked;\n                change = { type: \"normal\" };\n            }\n\n            that._executeAction(\n                change, { element: item }, chartState.data, newType, action\n            );\n\n            item.closest(DOT + \"k-tabstrip-content\").find(DOT + SELECTED_STATE).removeClass(SELECTED_STATE);\n            item.addClass(SELECTED_STATE);\n\n            that._toggleFieldsForSeriesPanel(newType);\n            that._toggleFormatPanels();\n\n            that._refreshEditors();\n        },\n\n        _refreshEditors: function() {\n            const that = this;\n            const editors = that.propertyPane.find(DATA_ACTION_SELECTOR + \":not('.k-button')\");\n\n            editors.each((_, editor) => {\n                const element = $(editor);\n                const kendoElement = element.data(\"handler\");\n                const id = element.attr(\"id\");\n                const panel = $(editor).closest(`[${REF}]`);\n                const elementRole = element.attr(DATA_ROLE);\n\n                const panelRef = that._getRefAttributeValue(panel[0])[0];\n\n                if (kendoElement && kendoElement.setOptions) {\n                    const changed = that._getOptionsForPanel(id)[panelRef][elementRole];\n\n                    if (changed && changed.options) {\n                        if (elementRole === inputRoles.checkBox) {\n                            kendoElement.check(changed.options.checked);\n                        } else if (panelRef === \"series\") {\n                            kendoElement.setOptions(changed.options);\n                            if (changed.options && changed.options.enable) {\n                                kendoElement.enable(changed.options.enable);\n                            }\n                        } else {\n                            let val = changed.options.value;\n                            if (val && typeof val !== \"string\" && val.value) {\n                                val = val.value;\n                            }\n\n                            kendoElement.value(val);\n                        }\n                    }\n\n                    if (elementRole === inputRoles.comboBox) {\n                        const state = that._getFontState(element);\n                        if (state && state.value) {\n                            kendoElement.value(state.value);\n                        }\n                    }\n                }\n            });\n\n            if (that._seriesGrid) {\n                that._seriesGrid.setDataSource(that.chartState.series);\n            }\n        },\n\n        _initWindow: function() {\n            const that = this;\n            const messages = that.options.messages;\n            const options = that.options.window;\n            const centered = !options.position;\n\n            that.window = that.element.kendoWindow({\n                title: kendo.htmlEncode(messages.window.title),\n                ...options,\n            }).data(\"kendoWindow\");\n\n            if (centered) {\n                that.window.center();\n            }\n\n            that.window.element.attr(\"tabindex\", \"-1\");\n            that.wrapper = that.window.wrapper.addClass(cssClasses.chartWizard);\n        },\n\n        _initSplitter: function() {\n            const that = this;\n\n            that.splitter = $(\"<div>\").kendoSplitter({\n                orientation: \"horizontal\",\n            }).data(\"kendoSplitter\");\n\n            that.previewPane = that.splitter.append({ scrollable: false });\n            that.propertyPane = that.splitter.append({ size: \"300px\", collapsible: true });\n\n            that.splitter.wrapper.addClass(cssClasses.splitter);\n            that.window.content(that.splitter.wrapper);\n        },\n\n        _initPreviewPane: function() {\n            const that = this;\n            const options = that.options;\n            that.previewPane.addClass(cssClasses.previewPane);\n\n            const previewHeader = $(\"<div></div>\").addClass(cssClasses.previewPaneHeader);\n            const previewContent = $(\"<div></div>\").addClass(cssClasses.previewPaneContent);\n\n            if (that.options.window.visible) {\n                previewContent.css({\n                    height: that.previewPane.height() - 50,\n                });\n            }\n\n            const chart = $(\"<div id='chart'>\");\n\n            that._createExportButton(previewHeader);\n            previewContent.append(chart);\n\n            that.previewPane.append(previewHeader.add(previewContent));\n            that._initChart(chart, options);\n        },\n\n        _getChartStateInstance: function(options, skipDefault) {\n            const that = this;\n            const defaultState = skipDefault ? {} : options.defaultState;\n            const hasState = Object.keys(options.state).length;\n            const data = hasState ? options.state.data : that._data;\n            const seriesType = hasState ? !skipDefault && options.state.seriesType || INITIAL_TYPE : INITIAL_TYPE;\n\n            return createInitialStateInstance(data || [], seriesType, defaultState, options.state);\n        },\n\n        _initChart: function(element, options) {\n            const that = this;\n            const isPie = (options.defaultState && options.defaultState.seriesType === 'pie') || (options.state && options.state.seriesType === 'pie');\n            let initialState = that._getChartStateInstance(options, isPie);\n\n            const chartArea = initialState.area;\n            initialState.chartArea = chartArea;\n            initialState.transitions = false;\n\n            that.chartState = initialState;\n\n            that.chart = element.kendoChart(initialState).data(\"kendoChart\");\n            that.chart.wrapper.css({ width: '100%', height: '100%' });\n\n            if (isPie) {\n                const pieState = that._getChartStateInstance(options);\n                that.chartState = extend(that.chartState, pieState);\n                that.chart.setOptions(that.chartState);\n            }\n\n\n            if (!that._initialState) {\n                that._initialState = that.chart.options;\n            }\n        },\n\n        _createExportButton: function(previewHeader) {\n            const that = this;\n            that._configureExportButton(exportButtonOptions);\n            const dropDownButton = $(`<button>${kendo.htmlEncode(that.options.messages.export)}</button>`).kendoDropDownButton(exportButtonOptions);\n            previewHeader.append(dropDownButton);\n        },\n\n        _configureExportButton: function(options) {\n            const that = this;\n            const messages = that.options.messages;\n            const idSeparator = \"-\";\n\n            const exportHandlers = {\n                \"export-pdf\": function() {\n                    if (!that.trigger(EXPORT_PDF, { chart: that.chart, exportOptions: that.options.exportOptions })) {\n                        that.chart.exportPDF(that.options.exportOptions.pdf).done(function(data) {\n                            kendo.saveAs({\n                                dataURI: data,\n                                fileName: that.options.exportOptions.fileName\n                            });\n                        });\n                    }\n                },\n                \"export-svg\": function() {\n                    if (!that.trigger(EXPORT_SVG, { chart: that.chart, exportOptions: that.options.exportOptions })) {\n                        that.chart.exportSVG(that.options.exportOptions.fileName).done(function(data) {\n                            kendo.saveAs({\n                                dataURI: data,\n                                fileName: that.options.exportOptions.fileName\n                            });\n                        });\n                    }\n                },\n                \"export-png\": function() {\n                    if (!that.trigger(EXPORT_IMAGE, { chart: that.chart, exportOptions: that.options.exportOptions })) {\n                        that.chart.exportImage(that.options.exportOptions.image).done(function(data) {\n                            kendo.saveAs({\n                                dataURI: data,\n                                fileName: that.options.exportOptions.fileName\n                            });\n                        });\n                    }\n                }\n            };\n\n            options.items.forEach(item => {\n                const textParts = item.id.split(idSeparator);\n                const text = textParts[0] + textParts[1].toUpperCase();\n                item.text = kendo.htmlEncode(messages[text]);\n                item.click = exportHandlers[item.id];\n            });\n        },\n\n        _preventLabelPointerEvents: function() {\n            const that = this;\n\n            that.propertyPane.find(\".k-label\").addClass(\"k-pointer-events-none\");\n\n        },\n\n        _initPropertyPane: function() {\n            const that = this;\n            const tabStripOptions = commonOptions.tabStrip;\n            tabStripOptions.dataSource = Object.values(that.options.messages.tab).map(tab => ({ name: kendo.htmlEncode(tab) }));\n\n            that._createTabsContent(tabStripOptions.dataSource);\n            that.tabStrip = $(\"<div>\").kendoTabStrip(\n                {\n                    ...tabStripOptions,\n                    activate: function(e) {\n                        const contentElement = $(e.contentElement);\n\n                        if (contentElement.find(`[${REF_SELECTOR}'data']`).length) {\n                            const content = $(e.contentElement).find(\"#category-axis\").parent().siblings(DOT + \"k-form-legend\");\n\n                            if (content.length && that.chart.options.seriesType === \"scatter\") {\n                                content.text(kendo.htmlEncode(that.options.messages.data.configuration.xAxis));\n                            } else if (content.length) {\n                                content.text(kendo.htmlEncode(that.options.messages.data.configuration.categoryAxis));\n                            }\n                        }\n\n                        if (that._seriesGrid && that._seriesGrid.wrapper.is(\":visible\")) {\n                            that._seriesGrid._draggableRows();\n                            that._seriesGrid._reorderableRows();\n                        }\n                    }\n                }).data(\"kendoTabStrip\");\n\n            that.propertyPane.addClass(cssClasses.propertyPane);\n            that.propertyPane.append(that.tabStrip.wrapper);\n\n            that._expansionPanels();\n            that._prepareDataTab();\n            that._prepareFormatTab();\n\n            that._initStaticEditors();\n\n            that.tabStrip.activateTab(that.tabStrip.tabGroup.children().first());\n\n            if (that.options.window.visible) {\n                that.chart.resize();\n            }\n        },\n\n        _createTabsContent: function(tabs) {\n            const that = this;\n            tabs.forEach(tab => {\n                tab.content = that._createExpansionPanelContent(tab.name) ?? \"\";\n            });\n        },\n\n        _createExpansionPanelContent: function(tab) {\n            const that = this;\n            let content = \"\";\n            const tabs = that.options.messages.tab;\n\n            if (tab === tabs[CHART]) {\n                const fields = Object.keys(expansionPanelForChart);\n\n                fields.forEach(chartType => {\n                    content += that._createChartTypesPanel(expansionPanelForChart[chartType].content, `${chartType}-chart-panel`, chartType);\n                });\n\n            } else if (tab === tabs[DATA]) {\n                const data = dataTabPanel(that.options.messages.data);\n\n                content += that._createFormPanel(data, \"configuration-data-panel\");\n\n            } else if (tab === tabs[FORMAT]) {\n                const formatPanels = getFormatPanels();\n\n                formatPanels.forEach(panel => {\n                    const panelData = panel.getData(that.options.messages.format);\n                    content += that._createFormPanel(panelData, `${panel.ref}-format-panel`);\n                });\n\n            }\n\n            return content;\n        },\n\n        _createChartTypesPanel: function(data, ref, mainChartType) {\n            const that = this;\n            const messages = that.options.messages.chart;\n            const content = $(templates.divContentWrapper(ref));\n            const chartTypesWrapper = $(templates.chartTypesWrapper());\n            const chartTypes = Object.keys(data);\n            chartTypes.forEach(chartType => {\n                const text = kendo.htmlEncode(messages[mainChartType][chartType]);\n                const attribute = `${DATA_CHART_TYPE_ATTR}=${chartType.toLowerCase()}`;\n                chartTypesWrapper.append(templates.iconTextItem(templates.iconWrapper(data[chartType], ICON_SIZE), text, attribute));\n            });\n\n            content.append(chartTypesWrapper);\n\n            return content[0].outerHTML;\n        },\n\n        _createFormPanel: function(data, ref) {\n            const content = $(templates.divContentWrapper(ref));\n            const form = $(templates.formElement());\n\n            data.forEach(fields => {\n                const legend = fields.legend;\n                const layoutClass = fields.layoutClass;\n                const editors = fields.editors;\n                let target = \"\";\n\n                if (editors instanceof Array) {\n                    let formFields = \"\";\n\n                    editors.forEach(editor => {\n                        const nowrap = editor.nowrap;\n                        const label = editor.label ? templates.label(kendo.htmlEncode(editor.label.text), editor.label.for, !nowrap && \"k-form-label\") : \"\";\n                        const className = editor.className;\n                        let field;\n\n                        if (editor.field && editor.field.custom) {\n                            field = editor.field.custom;\n                        } else if (editor.field) {\n                            field = templates.inputBaseElement(editor.field);\n                        } else {\n                            field = \"\";\n                        }\n\n                        if (nowrap) {\n                            formFields += templates.fieldContent(label, field);\n                        } else {\n                            formFields += templates.formField(\n                                templates.fieldContent(label, templates.formFieldWrap(field)),\n                                className\n                            );\n                        }\n                    });\n\n                    if (layoutClass) {\n                        const formGridLayout = $(templates.formGridLayout(layoutClass));\n                        formGridLayout.append(formFields);\n\n                        target = formGridLayout[0].outerHTML;\n                    } else {\n                        target = formFields;\n                    }\n                } else if (editors && editors.custom) {\n                    target = editors.custom;\n                } else {\n                    target = templates.inputBaseElement(editors);\n                }\n\n                if (legend) {\n                    form.append(templates.formFieldSet(kendo.htmlEncode(legend), target));\n                } else {\n                    form.append(target);\n                }\n            });\n\n            content.append(form);\n\n            return content[0].outerHTML;\n        },\n\n        _ensureSizeValue: function(fontSize, callback) {\n            const numberRegExp = /^\\d+$/;\n            const size = fontSize.toString();\n\n            let item = fontSizes.find((fs) => fs.text === size);\n\n            if (!item) {\n\n                if (!numberRegExp.test(size) || isNaN(parseInt(size, 10))) {\n                    return false;\n                }\n\n                item = { text: size, value: size + \"px\" };\n                fontSizes.push(item);\n                fontSizes.sort((a, b) => parseInt(a.text, 10) - parseInt(b.text, 10));\n                callback(fontSizes);\n            }\n\n\n            return true;\n        },\n\n        _executeAction: function(change, from, data, type, dataAction) {\n            const that = this;\n            const action = from.element.data(\"action\");\n            const chartState = that.chartState;\n\n            const state = {\n                state: chartState,\n                action: dataAction ?? actionTypes[action],\n                change: change\n            };\n\n            if (data) {\n                state.data = data;\n                state.type = type ?? that.chartState.seriesType;\n            }\n\n            const newState = getNewState(state);\n\n            newState.chartArea = newState.area;\n            that.chart.setOptions(newState);\n            that.chartState = newState;\n\n            return newState;\n        },\n\n        _seriesDropDownChange: function(e) {\n            const that = this;\n            that._seriesChange = true;\n            e.preventChange = true;\n\n            const newState = that._handlePropertyChange(e);\n            delete that._seriesChange;\n\n            that._seriesGrid && that._seriesGrid.setDataSource(newState.series);\n        },\n\n        _prepareDataTab: function() {\n            const that = this;\n\n            const form = that.element.find(`[${REF_SELECTOR}'data'] > form`);\n            const gridField = form.find(\".k-grid\").closest(\".k-form-fieldset\");\n            const valueAxisField = form.find(\"#value-axis\").closest(\".k-form-fieldset\");\n\n\n            that._dynamicConfigurationFields = {\n                grid: gridField.clone(),\n                valueAxis: valueAxisField.clone(),\n                container: form,\n            };\n\n            gridField.remove();\n            valueAxisField.remove();\n        },\n\n        _resetFontValue: function(isInitial, field) {\n            if (isInitial && field) {\n                field.font = \"\";\n                return true;\n            }\n\n            return false;\n        },\n\n        _getFontField: function(activeField, activeFieldInitial, isInitial) {\n            const that = this;\n            let newValue;\n\n            if (isInitial) {\n                newValue = activeFieldInitial && activeFieldInitial.font;\n            } else {\n                newValue = activeField && activeField.font;\n            }\n\n            that._valueReset = that._resetFontValue(isInitial, activeField);\n\n            return newValue;\n        },\n\n        _getFontValue: function(fontState, field, type, fromSibling) {\n            const that = this;\n            let newValue;\n            const isInitial = type === \"initial\";\n            const activeFieldInitial = that._initialState[fontState.active];\n            const activeField = that.chartState[fontState.active];\n\n            if (Array.isArray(activeField)) {\n                newValue = that._getFontField(activeField[0], activeFieldInitial, isInitial, fromSibling);\n            } else {\n                newValue = that._getFontField(activeField, activeFieldInitial, isInitial, fromSibling);\n            }\n\n            if (!newValue && fontState.subfield) {\n                const sub = fontState.subfield.toLowerCase();\n\n                if (Array.isArray(activeField)) {\n                    newValue = that._getFontField(activeField[0][sub], activeFieldInitial[sub], isInitial, fromSibling);\n                } else {\n                    newValue = that._getFontField(activeField[sub], activeFieldInitial[sub], isInitial, fromSibling);\n                }\n            }\n\n            if (newValue) {\n                newValue = that._parseFont(newValue)[field];\n            }\n\n            return newValue;\n        },\n\n        _createFontCombobox: function(element) {\n            const that = this;\n            const state = that._getFontState(element);\n\n            const comboBox = element.kendoComboBox({\n                dataSource: state.dataSource,\n                value: state.value,\n                change: function(e) {\n                    const fontState = e.sender._fontState;\n                    const fontNameChanged = fontState.type === 'name';\n                    const applySubfieldToSelector = fontState.subfield && state.active !== 'legend';\n                    const selector = `${fontState.active}${fontState.subfield && applySubfieldToSelector ? `${fontState.subfield}` : \"\"}Font`;\n                    let field = fontNameChanged ? 'Size' : 'Name';\n                    let value = e.sender.value();\n\n                    const sibling = e.sender.wrapper\n                        .closest(\".k-form\")\n                        .find(`[${DATA_ACTION}*=${selector + field}]`).data(\"kendoComboBox\");\n\n                    field = field.toLowerCase();\n\n                    const initial = !value;\n\n                    if (initial) {\n                        that._getFontValue(fontState, fontState.type, \"initial\");\n\n                        if (that._valueReset) {\n                            e.sender.value(\"\");\n                            sibling.value(\"\");\n                            return that.chart.setOptions(that.chartState);\n                        }\n\n                    } else {\n                        if (!fontNameChanged) {\n                            value = value.replace(\"px\", '');\n                        }\n\n                        if (value !== '' && !fontNameChanged && !that._ensureSizeValue(value, e.sender.setDataSource.bind(e.sender))) {\n                            return;\n                        }\n\n                        that._handlePropertyChange(e);\n                    }\n\n                    if (!initial && !sibling.value()) {\n                        let newValue = that._getFontValue(fontState, field);\n\n                        let change;\n                        if (!fontNameChanged) {\n                            newValue = newValue.replace(/^['\"]*([a-zA-Z0-9\\s]+)['\"]*$/g, '$1');\n                            change = fontNames.find((item) => item.value.includes(newValue));\n                        } else if (that._ensureSizeValue(newValue, sibling.setDataSource.bind(sibling))) {\n                            change = fontSizes.find((item) => item.text === newValue.toString());\n                        }\n\n                        if (change && change.value) {\n                            sibling.value(change.text);\n                            that._handlePropertyChange({ sender: sibling, preventChange: true }, change.value);\n                        }\n                    }\n                },\n                ...commonOptions.comboBox,\n            }).data(\"kendoComboBox\");\n\n            comboBox._fontState = state;\n\n            return comboBox;\n        },\n\n        _createDropDownList: function(element, options, handler) {\n            const that = this;\n            const dropdownlist = $(element).kendoDropDownList({\n                ...commonOptions.dropDownList,\n                ...options,\n                change: handler || function(e) {\n                    that._handlePropertyChange(e);\n                },\n            }).data(\"kendoDropDownList\");\n\n            return dropdownlist;\n        },\n\n        _createSwitch: function(element, options, handler) {\n            const that = this;\n            const switchElement = element.kendoSwitch({\n                ...options,\n                change: handler || function(e) {\n                    that._handlePropertyChange(e);\n                }\n            }).data(\"kendoSwitch\");\n\n            return switchElement;\n        },\n\n        _createCheckBox: function(element, options, handler) {\n            const that = this;\n            const checkbox = element.kendoCheckBox({\n                ...options,\n                change: handler || function(e) {\n                    that._handlePropertyChange(e);\n                }\n            }).data(\"kendoCheckBox\");\n\n            return checkbox;\n        },\n\n        _createColorPicker: function(element, options, handler) {\n            const that = this;\n            const config = options ?? {};\n            const enabled = config.enable !== undefined ? config.enable : true;\n            delete config.enabled;\n\n            const colorPicker = element.kendoColorPicker({\n                ...commonOptions.colorPicker,\n                ...config,\n                change: handler || function(e) {\n                    that._handlePropertyChange(e);\n                },\n                select: handler || function(e) {\n                    that._handlePropertyChange(e, e.value);\n                },\n            }).data(\"kendoColorPicker\");\n\n            colorPicker.enable(enabled);\n\n            return colorPicker;\n        },\n\n        _createNumericTextBox: function(element, options, handler) {\n            const that = this;\n            const numeric = element.kendoNumericTextBox(\n                {\n                    ...commonOptions.numericTextBox,\n                    ...options,\n                    change: handler || function(e) {\n                        that._handlePropertyChange(e);\n                    },\n                    spin: handler || function(e) {\n                        that._handlePropertyChange(e);\n                    },\n                }\n            ).data(\"kendoNumericTextBox\");\n\n            return numeric;\n        },\n\n        _createTextBox: function(element, options) {\n            const that = this;\n            const textbox = element.kendoTextBox({\n                ...options\n            });\n\n            textbox.on(\"input\" + NS, function(e) {\n                const sender = {\n                    element: $(e.target),\n                };\n                that._handlePropertyChange({ sender }, $(e.target).val());\n            });\n            return textbox.data(\"kendoTextBox\");\n        },\n\n        _getFieldValue: function(action) {\n            const parts = action.split(REG_EXP_CAPITAL);\n            const fontIndex = parts.indexOf(\"Font\");\n            const path = parts.slice(0, fontIndex);\n            const type = parts[fontIndex + 1].toLowerCase();\n\n            let field;\n            let subfield;\n\n            if (path.length === 1) {\n                field = path[0];\n            } else if (path.length > 1) {\n                subfield = path.pop();\n                field = path.join('');\n            }\n\n            return {\n                type,\n                field,\n                subfield: field === \"legend\" ? \"Labels\" : subfield,\n            };\n\n        },\n\n        _getFontState: function(element) {\n            const that = this;\n            const state = that.chartState;\n            const action = element.data(\"action\");\n            const parts = that._getFieldValue(action);\n            const field = parts.field;\n            const subfield = parts.subfield && parts.subfield.toLowerCase();\n\n            let font = state[field] && state[field].font;\n\n            if (!font && subfield) {\n                font = state[field] && state[field][subfield] && state[field][subfield].font;\n            }\n\n            let value = null;\n            let dataSource = [];\n\n            if (parts.type === 'name') {\n                dataSource = fontNames;\n                value = (font && dataSource.find((f) => f.value === that._parseFont(font).name)) || null;\n            } else {\n                dataSource = fontSizes;\n                value = (font && dataSource.find((f) => f.value === that._parseFont(font).size)) || null;\n            }\n\n            return {\n                dataSource,\n                value,\n                type: parts.type,\n                active: field,\n                subfield: parts.subfield\n            };\n        },\n\n        _parseFont: function(font) {\n            const el = $(\"<span></span>\");\n            el.css(\"font\", font);\n\n            return {\n                fontWeight: el.css('fontWeight'),\n                size: parseInt(parseFloat(el.css('fontSize'))),\n                name: el.css('fontFamily')\n            };\n        },\n\n        _addSeries: function(e) {\n            const that = this;\n            const grid = that._seriesGrid;\n            const item = that._removedSeries.pop();\n            const data = grid.options.dataSource;\n            data.push(item);\n\n            grid.setDataSource(data);\n        },\n\n        _removeSeries: function(e) {\n            const that = this;\n            const target = e.target.closest(\"tr\");\n\n            that._seriesGrid.removeRow(target);\n\n        },\n\n        _gridDataBoundHandler: function(grid) {\n            const that = this;\n            const clickHandlers = {\n                add: this._addSeries.bind(that),\n                remove: this._removeSeries.bind(that)\n            };\n\n            grid.wrapper.find(\".k-grid-header\").remove();\n\n            grid.wrapper.find(DATA_ACTION_SELECTOR).each((_, button) => {\n                const buttonElement = $(button);\n\n                if (buttonElement.data(\"kendoButton\")) {\n                    buttonElement.data(\"kendoButton\").destroy();\n                    buttonElement.removeAttr(\"disabled\");\n                }\n\n                const action = buttonElement.data(\"action\");\n                const enableRemove = !!(action === 'remove' && grid._data.length > 1);\n                const enableAdd = !!(action === 'add' && that._removedSeries && that._removedSeries.length > 0);\n\n                const enabled = enableRemove || enableAdd;\n\n                buttonElement.kendoButton({\n                    icon: action === 'add' ? \"plus\" : \"trash\",\n                    enabled: enabled,\n                    fillMode: FILL_MODE_FLAT,\n                    click: clickHandlers[action]\n                });\n            });\n        },\n\n        _initGrid: function(element) {\n            const that = this;\n            const messages = that.options.messages.data.configuration.series;\n\n            const grid = element.kendoGrid({\n                ...commonOptions.grid,\n                toolbar: [{ template: () => `<button ${DATA_ACTION}='add' tabindex=\"0\">${kendo.htmlEncode(messages.add)}</button>` }],\n                dataBound: function(e) {\n                    const grid = e.sender;\n                    that._preventChange = true;\n\n                    if (that._seriesReordering) {\n                        if (grid._data.length === that._reorderedData.length) {\n                            that._seriesReordering = false;\n                            that._executeAction(that._reorderedData, grid);\n                            delete that._reorderedData;\n\n                            that.trigger(CHANGE, { state: that.chartState });\n                        }\n                    } else {\n                        that._executeAction(grid.options.dataSource, grid);\n                        that.trigger(CHANGE, { state: that.chartState });\n                    }\n\n                    that._preventChange = false;\n\n                    that._gridDataBoundHandler(grid);\n                },\n                cellClose: function(e) {\n                    if (e.type === 'save') {\n                        that._handleSeriesEdit(e);\n                    }\n                },\n                remove: function(e) {\n                    that._handleSeriesRemove(e);\n                },\n                rowReorder: function(e) {\n                    that._seriesReordering = true;\n                    that._reorderedData = prepareReorderedDataForGrid(e.sender, e.oldIndex, e.newIndex - 1);\n                },\n                dataSource: that.chartState.series,\n            }).data(\"kendoGrid\");\n\n            that._seriesGrid = grid;\n        },\n\n        _handleSeriesEdit: function(e) {\n            const that = this;\n            const grid = e.sender;\n            const data = grid.options.dataSource;\n            const itemIndex = grid.dataSource.indexOf(e.model);\n\n            const editedField = data[itemIndex];\n\n            const newField = { ...editedField, name: e.model.name };\n\n            data.splice(itemIndex, 1, newField);\n\n            that._executeAction(data, grid);\n            that.trigger(CHANGE, { state: that.chartState });\n        },\n\n        _handleSeriesRemove: function(e) {\n            const that = this;\n            const data = e.sender.options.dataSource;\n            let itemIndex;\n            const item = data.find((item, index) => {\n                itemIndex = index;\n                return item.name === e.model.name;\n            });\n\n            data.splice(itemIndex, 1);\n\n            if (that._removedSeries) {\n                that._removedSeries.unshift(item);\n            } else {\n                that._removedSeries = [item];\n            }\n        },\n\n\n        _toggleFieldsForSeriesPanel: function(type) {\n            const that = this;\n            const gridField = $(that._dynamicConfigurationFields.grid[0].outerHTML);\n            const valueAxisField = $(that._dynamicConfigurationFields.valueAxis[0].outerHTML);\n            const container = that._dynamicConfigurationFields.container;\n\n            if (!gridField || !valueAxisField) {\n                return;\n            }\n\n            if (isCategorical(that._oldType) && isCategorical(type)) {\n                return;\n            }\n\n            if (isCategorical(type)) {\n                that._seriesValueAxisDDL && that._seriesValueAxisDDL.wrapper && that._seriesValueAxisDDL.wrapper.data && that._seriesValueAxisDDL.destroy();\n                delete that._seriesValueAxisDDL;\n                container.find(\"[data-action=valueAxisY]\").closest(\".k-form-fieldset\").remove();\n\n                container.append(gridField);\n                that._initGrid(gridField.find(\".k-grid\"));\n            } else {\n                that._seriesGrid && that._seriesGrid.wrapper && that._seriesGrid.wrapper.data && that._seriesGrid.destroy();\n                delete that._seriesGrid;\n                container.find(\".k-grid\").closest(\".k-form-fieldset\").remove();\n\n                container.append(valueAxisField);\n                const valueAxisDDL = valueAxisField.find(`[${DATA_ROLE_SELECTOR}${inputRoles.dropDownList}]`);\n                that._seriesValueAxisDDL = that._createDropDownList(\n                    valueAxisDDL, {\n                    value: that.chartState.valueField || '',\n                    dataSource: that.chartState.columns.map((column) => ({ text: column, value: column }))\n                },\n                    that._seriesDropDownChange.bind(that)\n                );\n            }\n\n            that._oldType = type;\n            that._preventLabelPointerEvents();\n        },\n\n        _initStaticEditors: function() {\n            const that = this;\n            const panelsForms = that.element.find(\".k-form\");\n\n            panelsForms.each((_, form) => {\n                const wrapper = $(form);\n                const panel = wrapper.closest(`[${REF}]`);\n                const editors = $(panel).find(`[${DATA_ROLE}]`);\n                const panelRef = that._getRefAttributeValue(panel[0])[0];\n\n                that._initEditors(editors, panelRef);\n            });\n\n            that._toggleFieldsForSeriesPanel(that.chartState.seriesType);\n            that._toggleFormatPanels();\n        },\n\n        _initEditors: function(editors, panelRef) {\n            const that = this;\n            editors.each((_, editor) => {\n                const element = $(editor);\n                const id = element.attr(\"id\");\n                const editorType = element.data(\"role\");\n                const optionsForPanel = that._getOptionsForPanel(id)[panelRef];\n                const editorOptions = optionsForPanel[editorType];\n\n                const options = editorOptions ? editorOptions.options : editorOptions;\n                const handler = editorOptions ? editorOptions.handler : editorOptions;\n\n                if (editorType === \"combobox\") {\n                    that._createFontCombobox(element, options, handler);\n                } else if (editorType === \"dropdownlist\") {\n                    that._createDropDownList(element, options, handler);\n                } else if (editorType === \"colorpicker\") {\n                    that._createColorPicker(element, options, handler);\n                } else if (editorType === \"numerictextbox\") {\n                    that._createNumericTextBox(element, options, handler);\n                } else if (editorType === \"switch\") {\n                    that._createSwitch(element, options, handler);\n                } else if (editorType === \"checkbox\") {\n                    that._createCheckBox(element, options, handler);\n                } else if (editorType === \"textbox\") {\n                    that._createTextBox(element, options, handler);\n                }\n            });\n        },\n\n        _prepareFormatTab: function() {\n            const that = this;\n\n            const categoryAxisField = that.element.find(`[${REF_SELECTOR}'categoryaxis'] > form`);\n            const valueAxisField = that.element.find(`[${REF_SELECTOR}'valueaxis'] > form`);\n\n            that._dynamicFormatPanels = {\n                categoryAxis: categoryAxisField,\n                valueAxis: valueAxisField,\n                container: categoryAxisField.closest(DOT + cssClasses.expansionPanelWrapper).parent()\n            };\n\n            that._initialAxesPanelsContent = {\n                categoryAxis: categoryAxisField.clone(),\n                valueAxis: valueAxisField.clone()\n            };\n\n            categoryAxisField.closest(DOT + cssClasses.expansionPanelWrapper).remove();\n            valueAxisField.closest(DOT + cssClasses.expansionPanelWrapper).remove();\n        },\n\n        _toggleFormatPanels: function() {\n            const that = this;\n            const messages = that.options.messages.format;\n            const chartType = that.chartState.seriesType;\n\n            const categoryAxisField = that._dynamicFormatPanels.categoryAxis;\n            const valueAxisField = that._dynamicFormatPanels.valueAxis;\n            const container = that._dynamicFormatPanels.container;\n\n            const initialContentCategory = that._initialAxesPanelsContent.categoryAxis.html();\n            const initialContentValue = that._initialAxesPanelsContent.valueAxis.html();\n\n            categoryAxisField\n                .empty()\n                .append(initialContentCategory);\n            valueAxisField\n                .empty()\n                .append(initialContentValue);\n\n            if (chartType !== \"pie\") {\n                let messagesCategory = kendo.htmlEncode(messages.categoryAxis.expandText);\n                let messagesValue = kendo.htmlEncode(messages.valueAxis.expandText);\n\n                if (chartType === \"scatter\") {\n                    messagesCategory = kendo.htmlEncode(messages.xAxis.expandText);\n                    messagesValue = kendo.htmlEncode(messages.yAxis.expandText);\n                }\n\n                if (container.find($(valueAxisField)).length === 0) {\n                    const categoryWrapper = $(templates.divContentWrapper(\"categoryaxis-format-panel\")).append(categoryAxisField);\n                    const valueWrapper = $(templates.divContentWrapper(\"valueaxis-format-panel\")).append(valueAxisField);\n\n                    container.append(categoryWrapper);\n                    container.append(valueWrapper);\n\n                    $(categoryWrapper).kendoExpansionPanel({ title: messagesCategory });\n                    $(valueWrapper).kendoExpansionPanel({ title: messagesValue });\n                } else {\n                    categoryAxisField\n                        .closest(DOT + cssClasses.expansionPanelWrapper)\n                        .find(\".k-expander-title\")\n                        .text(messagesCategory);\n                    valueAxisField\n                        .closest(DOT + cssClasses.expansionPanelWrapper)\n                        .find(\".k-expander-title\")\n                        .text(messagesValue);\n                }\n\n\n                if (categoryAxisField.closest(DOT + cssClasses.expansionPanelWrapper).length) {\n                    categoryAxisField.closest(`[${REF}]`)\n                        .add(valueAxisField.closest(`[${REF}]`))\n                        .each((_, expander) => {\n                            const editors = $(expander).find(`[${DATA_ROLE}]`);\n                            const panelRef = that._getRefAttributeValue(expander)[0];\n                            that._initEditors(editors, panelRef);\n                        });\n                }\n            } else if (container.find(valueAxisField).length) {\n                const categoryAxisExpander = categoryAxisField.closest(DOT + cssClasses.expansionPanelWrapper);\n                const valueAxisFieldExpander = valueAxisField.closest(DOT + cssClasses.expansionPanelWrapper);\n\n                kendo.destroy(categoryAxisExpander);\n                kendo.destroy(valueAxisFieldExpander);\n\n                categoryAxisExpander.remove();\n                valueAxisFieldExpander.remove();\n            }\n\n            that._preventLabelPointerEvents();\n        },\n\n        _handlePropertyChange: function(e, value) {\n            const that = this;\n            const change = (value || value === \"\") ? value : e.sender.value();\n            const newState = that._executeAction(change, e.sender);\n\n            !e.preventChange && that.trigger(CHANGE, { state: that.chartState });\n\n            return newState;\n        },\n\n\n        _getOptionsForPanel: function(id) {\n            const that = this;\n            const chartState = that.chartState;\n            const messages = that.options.messages;\n            const positionsData = legendPositions(messages.format.legend).map((position) => ({ ...position, text: kendo.htmlEncode(position.text) }));\n            const formats = labelFormats(messages.format.valueAxis).map((format) => ({ ...format, text: kendo.htmlEncode(format.text) }));\n            const titleValues = titles(messages).map((title) => ({ ...title, text: kendo.htmlEncode(title.text) }));\n            const fieldForAxes = id.includes(\"title\") ? \"title\" : \"labels\";\n            const isCategoryDropDown = id.includes(\"category\");\n            return {\n                configuration: {\n                    dropdownlist: {\n                        options: {\n                            value: chartState[isCategoryDropDown ? \"categoryField\" : \"valueField\"],\n                            dataSource: chartState.columns.map((column) => ({ text: column, value: column }))\n                        },\n                        handler: that._seriesDropDownChange.bind(that)\n                    }\n                },\n                chartarea: {\n                    numerictextbox: {\n                        options: {\n                            value: chartState.chartArea && chartState.chartArea.margin[id] ? chartState.chartArea.margin[id] : null,\n                            min: 0,\n                            max: 1000\n                        },\n                    },\n                    colorpicker: {\n                        options: {\n                            value: (chartState.chartArea.background && chartState.chartArea.background.color) || ''\n                        },\n                    }\n                },\n                title: {\n                    dropdownlist: {\n                        options: {\n                            dataSource: titleValues,\n                            value: that._activeTitle && titleValues.find((t) => t.value === that._activeTitle.value)\n                        },\n                        handler: that._titleFieldChange.bind(that)\n                    },\n                    textbox: {\n                        options: {\n                            value: that._activeTitle && chartState[that._activeTitle].text\n                        }\n                    },\n                    colorpicker: {\n                        options: {\n                            value: that._activeTitle && chartState[that._activeTitle].color\n                        }\n                    },\n                },\n                series: {\n                    dropdownlist: {\n                        options: {\n                            dataSource: [\n                                { name: kendo.htmlEncode(messages.format.series.allSeries) },\n                                ...chartState.series\n                            ],\n                            dataTextField: \"name\",\n                            dataValueField: \"name\",\n                            enable: isCategorical(chartState.seriesType),\n                            value: that._activeSeries && chartState.series.find((s) => s.name === that._activeSeries)\n                        },\n                        handler: that._activeSeriesChange.bind(that)\n                    },\n                    colorpicker: {\n                        options: {\n                            value: that._activeSeries ? chartState.series.find((s) => s.name === that._activeSeries).color : '',\n                            enable: false\n                        },\n                        handler: that._changeSeriesColor.bind(that)\n                    },\n                    checkbox: {\n                        options: {\n                            label: messages.format.series.showLabels,\n                            checked: that._activeSeries\n                                ? chartState.series.find((s) => s.name === that._activeSeries).labels.visible\n                                : chartState.series.every((s) => s.labels?.visible)\n                        },\n                        handler: that._showLabels.bind(that)\n                    }\n                },\n                legend: {\n                    dropdownlist: {\n                        options: {\n                            dataSource: positionsData,\n                            value: chartState.legend && chartState.legend.position && positionsData.find((p) => p.value === chartState.legend.position),\n                        }\n                    },\n                    colorPicker: {\n                        options: {\n                            value: (chartState.legend && chartState.legend.labels && chartState.legend.labels.color) || ''\n                        }\n                    },\n                    switch: {\n                        options: {\n                            checked: chartState.legend && chartState.legend.visible\n                        }\n                    }\n                },\n                categoryaxis: {\n                    textbox: {\n                        options: {\n                            value: (chartState.categoryAxis[0][fieldForAxes] && chartState.categoryAxis[0][fieldForAxes].text) || \"\"\n                        }\n                    },\n                    numerictextbox: {\n                        options: {\n                            value: chartState.categoryAxis[fieldForAxes] && chartState.categoryAxis[fieldForAxes].rotation,\n                            min: -360,\n                            max: 360,\n                        }\n                    },\n                    checkbox: {\n                        options: {\n                            label: messages.format.categoryAxis[fieldForAxes].reverseOrder,\n                            checked: chartState.categoryAxis[0].reverse || false\n                        }\n                    },\n                    colorpicker: {\n                        options: {\n                            value: (chartState.categoryAxis[0][fieldForAxes] && chartState.categoryAxis[0][fieldForAxes].color) || \"\"\n                        }\n                    }\n                },\n                valueaxis: {\n                    dropdownlist: {\n                        options: {\n                            dataSource: formats,\n                            value: chartState.valueAxis[fieldForAxes] && chartState.valueAxis[fieldForAxes].labelFormat && formats.find((f) => f.value === chartState.valueAxis[fieldForAxes].labelFormat),\n                        }\n                    },\n                    textbox: {\n                        options: {\n                            value: (chartState.valueAxis[fieldForAxes] && chartState.valueAxis[fieldForAxes].text) || \"\"\n                        }\n                    },\n                    numerictextbox: {\n                        options: {\n                            value: chartState.valueAxis[0][fieldForAxes] && typeof chartState.valueAxis[0][fieldForAxes].rotation === 'number'\n                                ? chartState.valueAxis[0][fieldForAxes].rotation\n                                : null,\n                            min: -360,\n                            max: 360,\n                        }\n                    },\n                    colorpicker: {\n                        options: {\n                            value: (chartState.valueAxis[0][fieldForAxes] && chartState.valueAxis[0][fieldForAxes].color) || ''\n                        }\n                    }\n                }\n            };\n        },\n\n        _titleFieldChange: function(e) {\n            const that = this;\n            const value = that._applyTo(e);\n            const form = e.sender.wrapper.closest(DOT + \"k-form\");\n\n            form.find(`[${DATA_ROLE_SELECTOR}${inputRoles.textBox}]`)\n                .data(\"kendoTextBox\")\n                .value(that.chartState[value].text);\n\n            form.find(`[${DATA_ROLE_SELECTOR}${inputRoles.colorPicker}]`)\n                .data(\"kendoColorPicker\")\n                .value(that.chartState[value].color ?? \"\");\n\n            form.find(`[${DATA_ROLE_SELECTOR}${inputRoles.comboBox}]`).each((_, editor) => {\n                const action = $(editor).data(\"action\");\n                const field = action.includes(\"FontName\") ? \"name\" : \"size\";\n                const newValue = that._parseFont(that.chartState[value].font)[field].toString();\n\n                const instance = $(editor).data(\"kendoComboBox\");\n\n                let change;\n\n                if (newValue) {\n                    const regex = new RegExp(`${newValue.replaceAll(`\"`, \"\").split(\",\")[0]}`, 'g');\n\n                    if (field === \"name\") {\n                        change = fontNames.find((item) => regex.test(item.text));\n                    } else {\n                        change = fontSizes.find((item) => item.text === newValue.toString());\n                    }\n\n                    if (change) {\n                        that._handlePropertyChange({ sender: instance }, change ? change.value : null);\n                    }\n                }\n\n                that._activeTitle = value;\n                instance._fontState.active = value;\n                instance.value(change ? change.text : null);\n            });\n        },\n\n\n        _activeSeriesChange: function(e) {\n            const that = this;\n            const value = e.sender.value();\n            const colorPicker = e.sender.wrapper\n                .closest(\".k-form\")\n                .find(`[${DATA_ROLE_SELECTOR}${inputRoles.colorPicker}]`)\n                .data(\"kendoColorPicker\");\n\n            if (value !== that.options.messages.format.series.allSeries) {\n                const series = that.chart.options.series.find((s) => s.name === value);\n\n                colorPicker.enable(true);\n                if (series) {\n                    colorPicker.value(series.color);\n                }\n\n                colorPicker._currentActiveSeries = value;\n                that._activeSeries = value;\n            } else {\n                colorPicker.value('');\n                colorPicker.enable(false);\n                colorPicker._currentActiveSeries = null;\n                that._activeSeries = null;\n            }\n        },\n\n        _applyTo: function(e) {\n            const value = e.sender.value();\n            const actionsToUpdate = e.sender.wrapper.closest(\".k-form\").find(DATA_ACTION_SELECTOR);\n\n            actionsToUpdate.each((_, el) => {\n                const element = $(el);\n                if (!element.is(e.sender.element)) {\n                    const currentAction = element.data(\"action\").split(REG_EXP_CAPITAL);\n                    currentAction.shift();\n\n                    const newAction = value + currentAction.join(\"\");\n\n                    element\n                        .attr(DATA_ACTION, newAction)\n                        .data(\"action\", newAction);\n                }\n            });\n\n            return value;\n        },\n\n        _showLabels: function(e) {\n            const that = this;\n            const value = e.sender.check();\n            const form = e.sender.wrapper.closest(\".k-form\");\n\n            const colorPicker = form\n                .find(`[${DATA_ROLE_SELECTOR}${inputRoles.colorPicker}]`)\n                .data(\"kendoColorPicker\");\n\n            that._handlePropertyChange(e, {\n                seriesName: colorPicker._currentActiveSeries,\n                all: !colorPicker._currentActiveSeries,\n                visible: value\n            });\n        },\n\n        _changeSeriesColor: function(e) {\n            const that = this;\n            const value = e.value;\n\n            that._handlePropertyChange(e, {\n                seriesName: e.sender._currentActiveSeries,\n                color: value\n            });\n        },\n\n        _getRefAttributeValue: function(element) {\n            return element.getAttribute(`${REF}`).split(\"-\");\n        },\n\n        _expansionPanels: function() {\n            const that = this;\n            let prevRef = \"\";\n            let index = 0;\n            that.tabStrip.contentElements.children().each((_, element) => {\n                const tabRef = that._getRefAttributeValue(element)[1];\n\n                if (prevRef === tabRef) {\n                    index++;\n                } else {\n                    index = 0;\n                }\n\n                const titles = Object.keys(that.options.messages[tabRef]);\n\n                const expansionPanel = $(element).kendoExpansionPanel({\n                    title: kendo.htmlEncode(that.options.messages[tabRef][titles[index]].expandText),\n                    complete: () => {\n                        if (that._seriesGrid && that._seriesGrid.wrapper.is(\":visible\")) {\n                            that._seriesGrid._draggableRows();\n                            that._seriesGrid._reorderableRows();\n                        }\n                    },\n                }).data(\"kendoExpansionPanel\");\n\n                expansionPanel.wrapper.removeClass();\n                expansionPanel.wrapper.addClass(cssClasses.expansionPanelWrapper);\n\n                prevRef = tabRef;\n            });\n        },\n\n        setOptions: function(options) {\n\n            if (!options) {\n                return;\n            }\n\n            const that = this;\n            const hasNewDataSource = options.dataSource !== null && options.dataSource !== undefined;\n            const hasNewDataColumns = options.dataColumns !== null && options.dataColumns !== undefined;\n            const hasNewState = options.state !== null && options.state !== undefined;\n\n            if (hasNewState) {\n                delete that.options.state;\n                // options.state = deepExtend({}, createInitialState([], INITIAL_TYPE, options.defaultState), options.state);\n            }\n\n            if (hasNewDataSource) {\n                delete that.options.dataSource;\n            }\n\n            if (hasNewDataColumns) {\n                delete that.options.dataColumns;\n            }\n\n            deepExtend(that.options, options);\n\n            if (hasNewDataColumns) {\n                that.setDataColumns(options.dataColumns);\n            }\n\n            if (hasNewDataSource) {\n                that.setDataSource(that.options.dataSource);\n            } else {\n                that._refreshContent();\n            }\n        },\n\n        destroy: function() {\n            const that = this;\n\n            kendo.destroy(that.previewPane);\n            kendo.destroy(that.propertyPane);\n\n            that.element.empty();\n\n            Widget.fn.destroy.call(that);\n\n            that.element.off(NS);\n            that.wrapper.off(NS);\n\n\n            that._detachEvents();\n\n            if (that.splitter) {\n                that.splitter.destroy();\n            }\n            if (that.chart) {\n                that.chart.destroy();\n            }\n            if (that.tabStrip) {\n                that.tabStrip.destroy();\n            }\n            if (that.window) {\n                that.window.destroy();\n            }\n\n\n            that.chart =\n                that.tabStrip =\n                that.window =\n                that.splitter =\n                that.propertyPane =\n                that.chartState =\n                that.previewPane = null;\n\n            that._dynamicConfigurationFields =\n                that._dynamicFormatPanels =\n                that._initialAxesPanelsContent =\n                that._initialState =\n                that._oldType =\n                that._seriesGrid = null;\n        }\n    });\n\n    ui.plugin(ChartWizard);\n\n\n    extend(kendo.ui.ChartWizard, {\n        generateDataRows: generateDataRows,\n        getWizardDataFromDataRows: getWizardDataFromDataRows\n    });\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}
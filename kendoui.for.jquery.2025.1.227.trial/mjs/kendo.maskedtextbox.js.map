{"version":3,"sources":["raw-mjs/kendo.maskedtextbox.js"],"names":["addInputPrefixSuffixContainers","__meta__","id","name","category","description","depends","$","undefined$1","global","window","min","Math","kendo","caret","keys","ui","Widget","NS","isPlainObject","setTimeout","STATEDISABLED","STATEINVALID","FOCUSED","DISABLED","READONLY","CHANGE","MOUSEUP","DROP","KEYDOWN","PASTE","ns","INPUT_EVENT_NAME","support","propertyChangeEvent","MaskedTextBox","extend","init","element","options","DOMElement","that","this","fn","call","_rules","rules","_wrapper","_tokenize","_form","inputMode","attr","addClass","on","value","_togglePrompt","_old","_emptyMask","_oldValue","wrapper","_timeoutId","_maskLength","val","clearTimeout","removeClass","_change","mask","length","is","parents","enable","readonly","_validationIcon","icon","iconClass","insertAfter","_label","_applyCssClasses","widget","suffixInsertAfter","floatingLabel","refresh","notify","clearPromptChar","unmaskOnPost","promptChar","culture","label","size","fillMode","rounded","prefixOptions","separator","suffixOptions","events","L","C","A","a","setOptions","_unbindInput","_bindInput","destroy","off","_formElement","_resetHandler","_submitHandler","raw","_unmask","replace","RegExp","escapeRegExp","emptyMask","_mask","_unmaskedValue","_activeElement","show","_editable","disable","_keydown","bind","_drop","_trackChange","_inputHandler","browser","msie","version","join","_legacyIEInputHandler","toggleClass","prop","trigger","__changing","inputChange","backward","old","cursor","lengthDiff","mobile","mobileOS","__dropping","android","contentStart","str1","str2","i","stringDiffStart","content","substring","caretPos","endContent","_trimStartPromptChars","unmasked","_findCaretPosBackwards","count","indexOf","pos","caretStart","_find","__backward","e","input","type","__pasting","formId","form","closest","key","keyCode","BACKSPACE","ENTER","idx","step","charAt","tokens","start","end","valueLength","chr","current","empty","chrIdx","split","token","tokenIdx","tokensLength","result","test","isFunction","_blinkInvalidState","floating","labelText","_floatingLabelContainer","wrap","parent","FloatingLabel","guid","_inputLabel","style","cssText","width","className","_addInvalidState","_invalidStateTimeout","_removeInvalidState","rule","maskChars","numberFormat","getCulture","currency","symbol","l","text","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.maskedtextbox.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.floatinglabel.js';\nimport './kendo.icons.js';\nimport { a as addInputPrefixSuffixContainers } from './kendo.prefix-suffix-containers.chunk.js';\n\nconst __meta__ = {\n    id: \"maskedtextbox\",\n    name: \"MaskedTextBox\",\n    category: \"web\",\n    description: \"The MaskedTextBox widget allows to specify a mask type on an input field.\",\n    depends: [\"core\", \"floatinglabel\", \"icons\", \"prefix-suffix-containers.chunk\"]\n};\n\n(function($, undefined$1) {\n    var global = window;\n    var min = global.Math.min;\n    var kendo = global.kendo;\n    var caret = kendo.caret;\n    var keys = kendo.keys;\n    var ui = kendo.ui;\n    var Widget = ui.Widget;\n    var NS = \".kendoMaskedTextBox\";\n    var isPlainObject = $.isPlainObject;\n    var setTimeout = window.setTimeout;\n\n    var LABELCLASSES = \"k-label k-input-label\";\n    var FLOATINGLABELCLASS = \"k-floating-label\";\n    var STATEDISABLED = \"k-disabled\";\n    var STATEINVALID = \"k-invalid\";\n    var FOCUSED = \"k-focus\";\n    var DISABLED = \"disabled\";\n    var READONLY = \"readonly\";\n    var CHANGE = \"change\";\n    var MOUSEUP = \"mouseup\";\n    var DROP = \"drop\";\n    var KEYDOWN = \"keydown\";\n    var PASTE = \"paste\";\n    var INPUT = \"input\";\n\n    function ns(name) { return name + NS; }\n\n    var INPUT_EVENT_NAME = ns(kendo.support.propertyChangeEvent ? \"propertychange\" : INPUT);\n\n    function stringDiffStart(str1, str2) {\n        var i = 0;\n        while (i < str2.length) {\n            if (str1[i] !== str2[i]) {\n                break;\n            }\n            i++;\n        }\n\n        return i;\n    }\n    var MaskedTextBox = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n            var DOMElement;\n\n            Widget.fn.init.call(that, element, options);\n\n            that._rules = $.extend({}, that.rules, that.options.rules);\n\n            element = that.element;\n            DOMElement = element[0];\n\n            that._wrapper();\n            that._tokenize();\n            that._form();\n            that.options.inputMode = that.options.inputMode || element.attr(\"inputmode\") || \"text\";\n\n            that.element\n                .addClass(\"k-input-inner\")\n                .attr(\"autocomplete\", \"off\")\n                .attr(\"inputmode\", that.options.inputMode)\n                .on(\"focus\" + NS, function() {\n                    var value = DOMElement.value;\n\n                    if (!value) {\n                        DOMElement.value = that._old = that._emptyMask;\n                    } else {\n                        that._togglePrompt(true);\n                    }\n\n                    that._oldValue = value;\n                    that.wrapper.addClass(FOCUSED);\n\n                    that._timeoutId = setTimeout(function() {\n                        caret(element, 0, value ? that._maskLength : 0);\n                    });\n                })\n                .on(\"focusout\" + NS, function() {\n                    var value = element.val();\n\n                    clearTimeout(that._timeoutId);\n                    DOMElement.value = that._old = \"\";\n\n                    if (value !== that._emptyMask) {\n                        DOMElement.value = that._old = value;\n                    }\n\n                    that.wrapper.removeClass(FOCUSED);\n                    that._change();\n                    that._togglePrompt();\n                });\n\n            if (that.options.mask && that.options.mask.length > 0) {\n                that.element.attr(\"aria-placeholder\", that.options.mask);\n            }\n\n            var disabled = element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n                that.enable(false);\n            } else {\n                that.readonly(element.is(\"[readonly]\"));\n            }\n\n            that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n\n            that.value(that.options.value || element.val());\n\n            that._label();\n            that._applyCssClasses();\n\n            addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, suffixInsertAfter: that._validationIcon });\n            if (that.floatingLabel) {\n                that.floatingLabel.refresh();\n            }\n\n            kendo.notify(that);\n        },\n\n        options: {\n            name: \"MaskedTextBox\",\n            clearPromptChar: false,\n            unmaskOnPost: false,\n            promptChar: \"_\",\n            culture: \"\",\n            rules: {},\n            value: \"\",\n            mask: \"\",\n            label: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            prefixOptions: {\n                separator: true\n            },\n            suffixOptions: {\n                separator: true\n            }\n        },\n\n        events: [\n            CHANGE\n        ],\n\n        rules: {\n            \"0\": /\\d/,\n            \"9\": /\\d|\\s/,\n            \"#\": /\\d|\\s|\\+|\\-/,\n            \"L\": /[a-zA-Z]/,\n            \"?\": /[a-zA-Z]|\\s/,\n            \"&\": /\\S/,\n            \"C\": /./,\n            \"A\": /[a-zA-Z0-9]/,\n            \"a\": /[a-zA-Z0-9]|\\s/\n        },\n\n        setOptions: function(options) {\n            var that = this;\n\n            Widget.fn.setOptions.call(that, options);\n\n            that._rules = $.extend({}, that.rules, that.options.rules);\n\n            that._tokenize();\n\n            this._unbindInput();\n            this._bindInput();\n\n            that.value(that.element.val());\n        },\n\n        destroy: function() {\n            var that = this;\n\n            if (that.floatingLabel) {\n                that.floatingLabel.destroy();\n            }\n\n            that.element.off(NS);\n\n            if (that._formElement) {\n                that._formElement.off(\"reset\", that._resetHandler);\n                that._formElement.off(\"submit\", that._submitHandler);\n            }\n\n            Widget.fn.destroy.call(that);\n        },\n\n        raw: function() {\n            var unmasked = this._unmask(this.element.val(), 0);\n            return unmasked.replace(new RegExp(escapeRegExp(this.options.promptChar), \"g\"), \"\");\n        },\n\n        value: function(value) {\n            var element = this.element;\n            var emptyMask = this._emptyMask;\n\n            if (value === undefined$1) {\n                return this.element.val();\n            }\n\n            if (value === null) {\n                value = \"\";\n            }\n\n            if (!emptyMask) {\n                this._oldValue = value;\n                element.val(value);\n                return;\n            }\n\n            value = this._unmask(value + \"\");\n\n            element.val(value ? emptyMask : \"\");\n\n            this._mask(0, this._maskLength, value);\n            this._unmaskedValue = null;\n\n            value = element.val();\n            this._oldValue = value;\n\n            if (kendo._activeElement() !== element) {\n                if (value === emptyMask) {\n                    element.val(\"\");\n                } else {\n                    this._togglePrompt();\n                }\n            }\n\n            if (this.floatingLabel) {\n                this.floatingLabel.refresh();\n            }\n        },\n\n        _togglePrompt: function(show) {\n            var DOMElement = this.element[0];\n            var value = DOMElement.value;\n\n            if (this.options.clearPromptChar) {\n                if (!show) {\n                    value = value.replace(new RegExp(escapeRegExp(this.options.promptChar), \"g\"), \" \");\n                } else {\n                    value = this._oldValue;\n                }\n\n                DOMElement.value = this._old = value;\n            }\n        },\n\n        readonly: function(readonly) {\n            var that = this;\n\n            this._editable({\n                readonly: readonly === undefined$1 ? true : readonly,\n                disable: false\n            });\n\n            if (that.floatingLabel) {\n                that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n            }\n        },\n\n        enable: function(enable) {\n            var that = this;\n\n            this._editable({\n                readonly: false,\n                disable: !(enable = enable === undefined$1 ? true : enable)\n            });\n\n            if (that.floatingLabel) {\n                that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n            }\n        },\n\n        _bindInput: function() {\n            var that = this;\n\n            if (that._maskLength) {\n                that.element\n                    .on(ns(KEYDOWN), that._keydown.bind(that))\n                    .on(ns(DROP), that._drop.bind(that))\n                    .on(ns(CHANGE), that._trackChange.bind(that))\n                    .on(INPUT_EVENT_NAME, that._inputHandler.bind(that));\n\n\n                if (kendo.support.browser.msie) {\n                    var version = kendo.support.browser.version;\n                    if (version > 8 && version < 11) {\n                        var events = [ns(MOUSEUP), ns(DROP), ns(KEYDOWN), ns(PASTE)].join(\" \");\n                        that.element.on(events, that._legacyIEInputHandler.bind(that));\n                    }\n                }\n            }\n        },\n\n        _unbindInput: function() {\n            var events = [INPUT_EVENT_NAME, ns(KEYDOWN), ns(MOUSEUP), ns(DROP), ns(PASTE)].join(\" \");\n\n            this.element.off(events);\n        },\n\n        _editable: function(options) {\n            var that = this;\n            var element = that.element;\n            var wrapper = that.wrapper;\n            var disable = options.disable;\n            var readonly = options.readonly;\n\n            that._unbindInput();\n\n            if (!readonly && !disable) {\n                element.prop(DISABLED, false)\n                       .prop(READONLY, false);\n\n                wrapper.removeClass(STATEDISABLED);\n\n                that._bindInput();\n            } else {\n                element.attr(DISABLED, disable)\n                       .attr(READONLY, readonly);\n\n                wrapper.toggleClass(STATEDISABLED, disable);\n            }\n        },\n\n        _change: function() {\n            var that = this;\n            var value = that.value();\n\n            if (value !== that._oldValue) {\n                that._oldValue = value;\n\n                that.trigger(CHANGE);\n                that.element.trigger(CHANGE);\n            }\n            else if (value === \"\" && that.__changing) {//ensure change is raised when empty value (mask is stripped from input content) for consistent ngjs model update\n                that.element.trigger(CHANGE);\n            }\n        },\n\n        inputChange: function(backward) {\n            var that = this;\n            var old = that._old;\n            var element = that.element[0];\n            var value = element.value;\n            var selection = caret(element);\n            var cursor = selection[1];\n            var lengthDiff = value.length - old.length;\n            var mobile = kendo.support.mobileOS;\n\n            if (that.__dropping && lengthDiff < 0) {//dropping in same input on WebKit is raised once for the removal phase and once for the adding phase\n                return;\n            }\n\n            if (lengthDiff === -1 && mobile.android && mobile.browser === \"chrome\") {\n                backward = true;\n            }\n\n            var contentStart = min(cursor, stringDiffStart(value, old));\n            var content = value.substring(contentStart, cursor);\n\n            element.value = value.substring(0, contentStart) + that._emptyMask.substring(contentStart);\n\n            var caretPos = that._mask(contentStart, cursor, content);\n            var endContent = that._trimStartPromptChars(value.substring(cursor), min(lengthDiff, caretPos - contentStart));\n\n            var unmasked = that._unmask(endContent, old.length - endContent.length);\n            that._mask(caretPos, caretPos, unmasked);\n\n            if (backward) {\n                caretPos = that._findCaretPosBackwards(contentStart);\n            }\n\n            caret(element, caretPos);\n\n            //clean-up flags\n            that.__dropping = false;\n        },\n\n        _trimStartPromptChars: function(content, count) {\n            var promptChar = this.options.promptChar;\n\n            while (count-- > 0 && content.indexOf(promptChar) === 0) {\n                content = content.substring(1);\n            }\n\n            return content;\n        },\n\n        _findCaretPosBackwards: function(pos) {\n            var caretStart = this._find(pos, true);\n            if (caretStart < pos) {\n                caretStart += 1;\n            }\n\n            return caretStart;\n        },\n\n        _inputHandler: function() {\n            if (kendo._activeElement() !== this.element[0]) {\n                return;\n            }\n\n            this.inputChange(this.__backward);\n        },\n\n        _legacyIEInputHandler: function(e) {\n            var that = this;\n            var input = that.element[0];\n            var value = input.value;\n            var type = e.type;\n\n            that.__pasting = (type === \"paste\");\n\n            setTimeout(function() {\n                if (type === \"mouseup\" && that.__pasting) {\n                    return;\n                }\n                if (input.value && input.value !== value) {\n                    that.inputChange(that.__backward);\n                }\n            });\n        },\n\n        _trackChange: function() {\n            var that = this;\n\n            that.__changing = true;\n            setTimeout(function() { that.__changing = false; });\n        },\n\n        _form: function() {\n            var that = this;\n            var element = that.element;\n            var formId = element.attr(\"form\");\n            var form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n                that._resetHandler = function() {\n                    setTimeout(function() {\n                        that.value(element[0].value);\n                    });\n                };\n\n                that._submitHandler = function() {\n                    that.element[0].value = that._old = that.raw();\n                };\n\n                if (that.options.unmaskOnPost) {\n                    form.on(\"submit\", that._submitHandler);\n                }\n\n                that._formElement = form.on(\"reset\", that._resetHandler);\n            }\n        },\n\n        _keydown: function(e) {\n            var key = e.keyCode;\n\n            this.__backward = key === keys.BACKSPACE;\n\n            if (key === keys.ENTER) {\n                this._change();\n            }\n        },\n\n        _drop: function() {\n            this.__dropping = true;\n        },\n\n        _find: function(idx, backward) {\n            var value = this.element.val() || this._emptyMask;\n            var step = 1;\n\n            if (backward === true) {\n                step = -1;\n            }\n\n            while (idx > -1 || idx <= this._maskLength) {\n                if (value.charAt(idx) !== this.tokens[idx]) {\n                    return idx;\n                }\n\n                idx += step;\n            }\n\n            return -1;\n        },\n\n        _mask: function(start, end, value, backward) {\n            var element = this.element[0];\n            var current = element.value || this._emptyMask;\n            var empty = this.options.promptChar;\n            var valueLength;\n            var chrIdx = 0;\n            var unmasked;\n            var chr;\n            var idx;\n\n            start = this._find(start, backward);\n\n            if (start > end) {\n                end = start;\n            }\n\n            unmasked = this._unmask(current.substring(end), end);\n            value = this._unmask(value, start);\n            valueLength = value.length;\n\n            if (value) {\n                unmasked = unmasked.replace(new RegExp(\"^_{0,\" + valueLength + \"}\"), \"\");\n            }\n\n            value += unmasked;\n            current = current.split(\"\");\n            chr = value.charAt(chrIdx);\n\n            while (start < this._maskLength) {\n                current[start] = chr || empty;\n                chr = value.charAt(++chrIdx);\n\n                if (idx === undefined$1 && chrIdx > valueLength) {\n                    idx = start;\n                }\n\n                start = this._find(start + 1);\n            }\n\n            element.value = this._old = current.join(\"\");\n\n            if (kendo._activeElement() === element) {\n                if (idx === undefined$1) {\n                    idx = this._maskLength;\n                }\n\n                caret(element, idx);\n            }\n\n            return idx;\n        },\n\n        _unmask: function(value, idx) {\n            if (!value) {\n                return \"\";\n            }\n\n            if (this._unmaskedValue === value) {\n                return this._unmaskedValue;\n            }\n            value = (value + \"\").split(\"\");\n\n            var chr;\n            var token;\n            var chrIdx = 0;\n            var tokenIdx = idx || 0;\n\n            var empty = this.options.promptChar;\n\n            var valueLength = value.length;\n            var tokensLength = this.tokens.length;\n\n            var result = \"\";\n\n            while (tokenIdx < tokensLength) {\n                chr = value[chrIdx];\n                token = this.tokens[tokenIdx];\n\n                if (chr === token || chr === empty) {\n                    result += chr === empty ? empty : \"\";\n\n                    chrIdx += 1;\n                    tokenIdx += 1;\n                } else if (typeof token !== \"string\") {\n                    if ((token && token.test && token.test(chr)) || (kendo.isFunction(token) && token(chr))) {\n                        result += chr;\n                        tokenIdx += 1;\n                    } else {\n                        if (valueLength === 1) {\n                            this._blinkInvalidState();\n                        }\n                    }\n\n                    chrIdx += 1;\n                } else {\n                    tokenIdx += 1;\n                }\n\n                if (chrIdx >= valueLength) {\n                    break;\n                }\n            }\n            this._unmaskedValue = result;\n            return result;\n        },\n\n        _label: function() {\n            var that = this;\n            var element = that.element;\n            var options = that.options;\n            var id = element.attr(\"id\");\n            var floating;\n            var labelText;\n\n            if (options.label !== null) {\n                floating = isPlainObject(options.label) ? options.label.floating : false;\n                labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n                if (floating) {\n                    that._floatingLabelContainer = that.wrapper.wrap(\"<span></span>\").parent();\n                    that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });\n                }\n\n                if (kendo.isFunction(labelText)) {\n                    labelText = labelText.call(that);\n                }\n\n                if (!labelText) {\n                    labelText = \"\";\n                }\n\n                if (!id) {\n                    id = options.name + \"_\" + kendo.guid();\n                    element.attr(\"id\", id);\n                }\n\n                that._inputLabel = $(\"<label class='\" + (floating ? FLOATINGLABELCLASS : LABELCLASSES) + \"' for='\" + id + \"'>\" + labelText + \"</label>'\")[floating ? \"insertAfter\" : \"insertBefore\"](that.wrapper);\n            }\n        },\n\n        _wrapper: function() {\n            var that = this;\n            var element = that.element;\n            var DOMElement = element[0];\n\n            var wrapper = element.wrap(\"<span class='k-input k-maskedtextbox'></span>\").parent();\n            wrapper[0].style.cssText = DOMElement.style.cssText;\n            DOMElement.style.width = \"100%\";\n            that.wrapper = wrapper.addClass(DOMElement.className).removeClass('input-validation-error');\n        },\n\n        _blinkInvalidState: function() {\n            var that = this;\n\n            that._addInvalidState();\n            clearTimeout(that._invalidStateTimeout);\n            that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n        },\n\n        _addInvalidState: function() {\n            var that = this;\n\n            that.wrapper.addClass(STATEINVALID);\n            that._validationIcon.removeClass(\"k-hidden\");\n        },\n\n        _removeInvalidState: function() {\n            var that = this;\n\n            that.wrapper.removeClass(STATEINVALID);\n            that._validationIcon.addClass(\"k-hidden\");\n            that._invalidStateTimeout = null;\n        },\n\n        _tokenize: function() {\n            var tokens = [];\n            var tokenIdx = 0;\n\n            var mask = this.options.mask || \"\";\n            var maskChars = mask.split(\"\");\n            var length = maskChars.length;\n            var idx = 0;\n            var chr;\n            var rule;\n\n            var emptyMask = \"\";\n            var promptChar = this.options.promptChar;\n            var numberFormat = kendo.getCulture(this.options.culture).numberFormat;\n            var rules = this._rules;\n\n            while (idx < length) {\n                chr = maskChars[idx];\n                rule = rules[chr];\n\n                if (rule) {\n                    tokens[tokenIdx] = rule;\n                    emptyMask += promptChar;\n                    tokenIdx += 1;\n                } else {\n                    if (chr === \".\" || chr === \",\") {\n                        chr = numberFormat[chr];\n                    } else if (chr === \"$\") {\n                        chr = numberFormat.currency.symbol;\n                    } else if (chr === \"\\\\\") {\n                        idx += 1;\n                        chr = maskChars[idx];\n                    }\n\n                    chr = chr.split(\"\");\n\n                    for (var i = 0, l = chr.length; i < l; i++) {\n                        tokens[tokenIdx] = chr[i];\n                        emptyMask += chr[i];\n                        tokenIdx += 1;\n                    }\n                }\n                idx++;\n            }\n\n            this.tokens = tokens;\n\n            this._emptyMask = emptyMask;\n            this._maskLength = emptyMask.length;\n        }\n    });\n\n    function escapeRegExp(text) {\n        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    }\n\n    kendo.cssProperties.registerPrefix(\"MaskedTextBox\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"MaskedTextBox\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n    ui.plugin(MaskedTextBox);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}
{"version":3,"sources":["raw-mjs/kendo.numerictextbox.js"],"names":["addInputPrefixSuffixContainers","__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","caret","keys","html","ui","Widget","activeElement","_activeElement","extractFormat","_extractFormat","parse","parseFloat","placeholderSupported","support","placeholder","getCulture","CHANGE","DISABLED","READONLY","INPUT","SPIN","ns","HOVEREVENTS","FOCUSED","HOVER","FOCUS","POINT","SELECTED","STATEDISABLED","STATEINVALID","ARIA_DISABLED","INTEGER_REGEXP","NULL","isPlainObject","extend","NumericTextBox","init","element","options","min","max","step","value","inputType","that","this","isStep","fn","call","on","_focusout","bind","attr","inputMode","_parse","_initialOptions","_reset","_wrapper","_arrows","_validation","_input","mobileOS","_text","browser","edge","one","_focusin","selectValue","_click","factor","format","val","enable","is","parents","readonly","_label","_ariaLabel","_applyCssClasses","widget","wrapper","prefixInsertBefore","suffixInsertAfter","_validationIcon","floatingLabel","refresh","notify","decimals","autoAdjust","restrictDecimals","round","culture","spinners","selectOnFocus","upArrowText","downArrowText","label","size","fillMode","rounded","prefixOptions","separator","suffixOptions","events","_editable","disable","text","add","off","_toggleText","_upArrowEventHandler","unbind","_downArrowEventHandler","_inputLabel","addClass","removeClass","_toggleHover","prop","e","preventDefault","_spin","_upArrow","_downArrow","_keydown","_keyup","_paste","_inputHandler","focus","setOptions","_placeholder","destroy","_arrowsWrap","remove","_floatingLabelContainer","unwrap","Boolean","_value","_form","_resetHandler","_option","_adjust","_update","_old","arrows","_release","clearTimeout","_spinning","siblings","buttonHtml","appendTo","wrapAll","parent","toggle","eq","UserEvents","release","icon","iconClass","insertAfter","_blur","_change","_focusing","setTimeout","result","groupRegExp","extractRegExp","input","target","idx","substring","_format","group","caretPosition","RegExp","exec","replace","length","indexOf","select","_getFactorValue","_typing","trigger","_culture","_removeInvalidState","numberFormat","toLowerCase","currency","percent","show","accessKey","inputs","find","first","insertBefore","setAttribute","type","title","tabIndex","style","cssText","className","role","autocomplete","key","keyCode","NUMPAD_DOT","_numPadDot","DOWN","UP","ENTER","TAB","_cachedCaret","_step","decimalSeparator","minInvalid","charAt","_isPasted","toString","_numericRegex","test","_oldText","_blinkInvalidState","_addInvalidState","_invalidStateTimeout","precision","fractionRule","_separator","_oldPrecision","_floatRegExp","option","timeout","originalValue","toFixed","currentTarget","toggleClass","removeAttr","_round","truncate","isNotNull","floating","labelText","content","wrap","FloatingLabel","isFunction","guid","DOMElement","hide","width","css","formId","form","closest","direction","dir","renderButton","shape","parts","split","join","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.numerictextbox.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.userevents.js';\nimport './kendo.floatinglabel.js';\nimport './kendo.html.button.js';\nimport './kendo.icons.js';\nimport { a as addInputPrefixSuffixContainers } from './kendo.prefix-suffix-containers.chunk.js';\n\nconst __meta__ = {\n    id: \"numerictextbox\",\n    name: \"NumericTextBox\",\n    category: \"web\",\n    description: \"The NumericTextBox widget can format and display numeric, percentage or currency textbox.\",\n    depends: [\"core\", \"userevents\", \"floatinglabel\", \"html.button\", \"icons\", \"prefix-suffix-containers.chunk\"]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        caret = kendo.caret,\n        keys = kendo.keys,\n        html = kendo.html,\n        ui = kendo.ui,\n        Widget = ui.Widget,\n        activeElement = kendo._activeElement,\n        extractFormat = kendo._extractFormat,\n        parse = kendo.parseFloat,\n        placeholderSupported = kendo.support.placeholder,\n        getCulture = kendo.getCulture,\n        CHANGE = \"change\",\n        DISABLED = \"disabled\",\n        READONLY = \"readonly\",\n        INPUT = \"k-input-inner\",\n        SPIN = \"spin\",\n        ns = \".kendoNumericTextBox\",\n        TOUCHEND = \"touchend\",\n        MOUSELEAVE = \"mouseleave\" + ns,\n        HOVEREVENTS = \"mouseenter\" + ns + \" \" + MOUSELEAVE,\n        FOCUSED = \"k-focus\",\n        HOVER = \"k-hover\",\n        FOCUS = \"focus\",\n        POINT = \".\",\n        SYMBOL = \"symbol\",\n        CLASS_ICON = \"k-icon\",\n        LABELCLASSES = \"k-label k-input-label\",\n        FLOATINGLABELCLASS = \"k-floating-label\",\n        SELECTED = \"k-selected\",\n        STATEDISABLED = \"k-disabled\",\n        STATEINVALID = \"k-invalid\",\n        ARIA_DISABLED = \"aria-disabled\",\n        INTEGER_REGEXP = /^(-)?(\\d*)$/,\n        NULL = null,\n        isPlainObject = $.isPlainObject,\n        extend = $.extend;\n\n    var NumericTextBox = Widget.extend({\n         init: function(element, options) {\n             var that = this,\n             isStep = options && options.step !== undefined$1,\n             min, max, step, value, disabled;\n             var inputType;\n\n             Widget.fn.init.call(that, element, options);\n\n             options = that.options;\n             element = that.element\n                           .on(\"focusout\" + ns, that._focusout.bind(that))\n                           .attr(\"role\", \"spinbutton\");\n\n             options.placeholder = options.placeholder || element.attr(\"placeholder\");\n             options.inputMode = options.inputMode || element.attr(\"inputmode\") || \"text\";\n\n             min = that.min(element.attr(\"min\"));\n             max = that.max(element.attr(\"max\"));\n             step = that._parse(element.attr(\"step\"));\n\n             if (options.min === NULL && min !== NULL) {\n                 options.min = min;\n             }\n\n             if (options.max === NULL && max !== NULL) {\n                 options.max = max;\n             }\n\n             if (!isStep && step !== NULL) {\n                 options.step = step;\n             }\n\n             that._initialOptions = extend({}, options);\n\n             inputType = element.attr(\"type\");\n\n             that._reset();\n             that._wrapper();\n             that._arrows();\n             that._validation();\n             that._input();\n\n             if (!kendo.support.mobileOS) {\n                 that._text.on(FOCUS + ns, that._click.bind(that));\n             } else {\n                 that._text.on(TOUCHEND + ns + \" \" + FOCUS + ns, function() {\n                     if (kendo.support.browser.edge) {\n                         that._text.one(FOCUS + ns, function() {\n                            that._focusin();\n                         });\n                     } else {\n                        that._focusin();\n                     }\n                     that.selectValue();\n                 });\n             }\n\n             element.attr(\"aria-valuemin\", options.min !== NULL ? options.min * options.factor : options.min)\n                    .attr(\"aria-valuemax\", options.max !== NULL ? options.max * options.factor : options.max);\n\n             options.format = extractFormat(options.format);\n\n             value = options.value;\n\n             if (value == NULL) {\n                 if (inputType == \"number\") {\n                    value = parseFloat(element.val());\n                 } else {\n                     value = element.val();\n                 }\n             }\n\n             that.value(value);\n\n             disabled = !options.enable || element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n             if (disabled) {\n                 that.enable(false);\n             } else {\n                 that.readonly(element.is(\"[readonly]\"));\n             }\n\n             that._label();\n             that._ariaLabel(that._text);\n             that._applyCssClasses();\n\n             addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._text, suffixInsertAfter: that._validationIcon });\n             if (that.floatingLabel) {\n                 that.floatingLabel.refresh();\n             }\n\n             kendo.notify(that);\n         },\n\n        options: {\n            name: \"NumericTextBox\",\n            decimals: NULL,\n            autoAdjust: true,\n            enable: true,\n            restrictDecimals: false,\n            min: NULL,\n            max: NULL,\n            value: NULL,\n            step: 1,\n            round: true,\n            culture: \"\",\n            format: \"n\",\n            spinners: true,\n            placeholder: \"\",\n            selectOnFocus: false,\n            factor: 1,\n            upArrowText: \"Increase value\",\n            downArrowText: \"Decrease value\",\n            label: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            prefixOptions: {\n                separator: true\n            },\n            suffixOptions: {\n                separator: true\n            }\n        },\n        events: [\n            CHANGE,\n            SPIN\n        ],\n\n        _editable: function(options) {\n            var that = this,\n                element = that.element,\n                disable = options.disable,\n                readonly = options.readonly,\n                text = that._text.add(element),\n                wrapper = that.wrapper.off(HOVEREVENTS);\n\n            that._toggleText(true);\n\n            that._upArrowEventHandler.unbind(\"press\");\n            that._downArrowEventHandler.unbind(\"press\");\n            element\n                .off(\"keydown\" + ns)\n                .off(\"keyup\" + ns)\n                .off(\"input\" + ns)\n                .off(\"paste\" + ns);\n\n            if (that._inputLabel) {\n                that._inputLabel.off(ns);\n            }\n\n            if (!readonly && !disable) {\n                wrapper\n                    .removeClass(STATEDISABLED)\n                    .on(HOVEREVENTS, that._toggleHover);\n\n                text.prop(DISABLED, false)\n                    .prop(READONLY, false)\n                    .attr(ARIA_DISABLED, false);\n\n                that._upArrowEventHandler.bind(\"press\", function(e) {\n                    e.preventDefault();\n                    that._spin(1);\n                    that._upArrow.addClass(SELECTED);\n                });\n\n                that._downArrowEventHandler.bind(\"press\", function(e) {\n                    e.preventDefault();\n                    that._spin(-1);\n                    that._downArrow.addClass(SELECTED);\n                });\n\n                that.element\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"keyup\" + ns, that._keyup.bind(that))\n                    .on(\"paste\" + ns, that._paste.bind(that))\n                    .on(\"input\" + ns, that._inputHandler.bind(that));\n\n                if (that._inputLabel) {\n                    that._inputLabel.on(\"click\" + ns, that.focus.bind(that));\n                }\n\n            } else {\n                wrapper\n                    .addClass(disable ? STATEDISABLED : \"\")\n                    .removeClass(disable ? \"\" : STATEDISABLED);\n\n                text.attr(DISABLED, disable)\n                    .attr(READONLY, readonly)\n                    .attr(ARIA_DISABLED, disable);\n            }\n        },\n\n        readonly: function(readonly) {\n            var that = this;\n\n            this._editable({\n                readonly: readonly === undefined$1 ? true : readonly,\n                disable: false\n            });\n\n            if (that.floatingLabel) {\n                that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n            }\n        },\n\n        enable: function(enable) {\n            var that = this;\n\n            this._editable({\n                readonly: false,\n                disable: !(enable = enable === undefined$1 ? true : enable)\n            });\n\n            if (that.floatingLabel) {\n                that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n            }\n        },\n\n        setOptions: function(options) {\n            var that = this;\n            Widget.fn.setOptions.call(that, options);\n\n            that._text.prop(\"placeholder\", that.options.placeholder);\n            that._placeholder(that.options.placeholder);\n            that.element.attr({\n                \"aria-valuemin\": that.options.min !== NULL ? that.options.min * that.options.factor : that.options.min,\n                \"aria-valuemax\": that.options.max !== NULL ? that.options.max * that.options.factor : that.options.max\n            });\n\n            that.options.format = extractFormat(that.options.format);\n            that._upArrowEventHandler.destroy();\n            that._upArrowEventHandler = null;\n            that._downArrowEventHandler.destroy();\n            that._downArrowEventHandler = null;\n            that._arrowsWrap.remove();\n            that._arrows();\n\n            that._applyCssClasses();\n\n            if (that._inputLabel) {\n                that._inputLabel.off(ns);\n                that._inputLabel.remove();\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.destroy();\n                    if (that._floatingLabelContainer) {\n                        that.wrapper.unwrap();\n                    }\n                }\n            }\n\n            that._label();\n\n            if (options.enable !== undefined$1 || options.readonly !== undefined$1) {\n                that._editable({\n                    readonly: options.readonly,\n                    disable: !options.enable\n                });\n            } else {\n                that._editable({\n                    readonly: that.element.attr(\"readonly\") !== undefined$1 ? Boolean(that.element.attr(\"readonly\")) : that.options.readonly,\n                    disable: that.element.attr(\"disabled\") !== undefined$1 ? Boolean(that.element.attr(\"disabled\")) : !that.options.enable\n                });\n            }\n\n            if (options.value !== undefined$1) {\n                that.value(options.value);\n            } else if (that._value !== undefined$1) {\n                that.value(that._value);\n            }\n        },\n\n        destroy: function() {\n            var that = this;\n\n            if (that._inputLabel) {\n                that._inputLabel.off(ns);\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.destroy();\n                }\n            }\n\n            that.element\n                .add(that._text)\n                .add(that._upArrow)\n                .add(that._downArrow)\n                .off(ns);\n\n            that._upArrowEventHandler.destroy();\n            that._downArrowEventHandler.destroy();\n\n            if (that._form) {\n                that._form.off(\"reset\", that._resetHandler);\n            }\n\n            Widget.fn.destroy.call(that);\n        },\n\n        min: function(value) {\n            return this._option(\"min\", value);\n        },\n\n        max: function(value) {\n            return this._option(\"max\", value);\n        },\n\n        step: function(value) {\n            return this._option(\"step\", value);\n        },\n\n        value: function(value) {\n            var that = this, adjusted;\n\n            if (value === undefined$1) {\n                return that._value;\n            }\n\n            value = that._parse(value);\n            adjusted = that._adjust(value);\n\n            if (value !== adjusted) {\n                value = NULL;\n            }\n\n            that._update(value);\n            that._old = that._value;\n\n            if (that.floatingLabel) {\n                that.floatingLabel.refresh();\n            }\n        },\n\n        focus: function() {\n            this._focusin();\n            this.selectValue();\n        },\n\n        _adjust: function(value) {\n            let that = this,\n                options = that.options,\n                min = options.min,\n                max = options.max,\n                autoAdjust = options.autoAdjust;\n\n            if (value === NULL || !autoAdjust) {\n                return value;\n            }\n\n            if (min !== NULL && value < min) {\n                value = min;\n            } else if (max !== NULL && value > max) {\n                value = max;\n            }\n\n            return value;\n        },\n\n        _arrows: function() {\n            var that = this,\n            arrows,\n            _release = function() {\n                clearTimeout( that._spinning );\n                arrows.removeClass(SELECTED);\n            },\n            options = that.options,\n            spinners = options.spinners,\n            element = that.element;\n\n            arrows = element.siblings(\".k-icon-button\");\n\n            if (!arrows[0]) {\n                arrows = $(buttonHtml(\"increase\", options.upArrowText, options) + buttonHtml(\"decrease\", options.downArrowText, options))\n                        .appendTo(that.wrapper);\n\n                that._arrowsWrap = arrows.wrapAll('<span class=\"k-input-spinner k-spin-button\"/>').parent();\n            }\n\n            if (!spinners) {\n                arrows.parent().toggle(spinners);\n            }\n\n            that._upArrow = arrows.eq(0);\n            that._upArrowEventHandler = new kendo.UserEvents(that._upArrow, { release: _release });\n            that._downArrow = arrows.eq(1);\n            that._downArrowEventHandler = new kendo.UserEvents(that._downArrow, { release: _release });\n        },\n\n        _validation: function() {\n            var that = this;\n            var element = that.element;\n\n            that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n        },\n\n        _blur: function() {\n            var that = this;\n\n            that._toggleText(true);\n\n            that._change(that.element.val());\n        },\n\n        _click: function(e) {\n            var that = this;\n\n            clearTimeout(that._focusing);\n            that._focusing = setTimeout(function() {\n                var input = e.target,\n                    idx = caret(input)[0],\n                    value = input.value.substring(0, idx),\n                    format = that._format(that.options.format),\n                    group = format[\",\"],\n                    result, groupRegExp, extractRegExp,\n                    caretPosition = 0;\n\n                if (group) {\n                    groupRegExp = new RegExp(\"\\\\\" + group, \"g\");\n                    extractRegExp = new RegExp(\"(-)?(\" + format[SYMBOL] + \")?([\\\\d\\\\\" + group + \"]+)(\\\\\" + format[POINT] + \")?(\\\\d+)?\");\n                }\n\n                if (extractRegExp) {\n                    result = extractRegExp.exec(value);\n                }\n\n                if (result) {\n                    caretPosition = result[0].replace(groupRegExp, \"\").length;\n\n                    if (value.indexOf(\"(\") != -1 && that._value < 0) {\n                        caretPosition++;\n                    }\n                }\n\n                that._focusin();\n\n                caret(that.element[0], caretPosition);\n                that.selectValue();\n            });\n        },\n\n        selectValue: function() {\n            if (this.options.selectOnFocus) {\n                this.element[0].select();\n            }\n        },\n\n        _getFactorValue: function(value) {\n            var that = this,\n                factor = that.options.factor;\n\n            if (factor && factor !== 1) {\n                value = kendo.parseFloat(value);\n                if (value !== null) {\n                    value = value / factor;\n                }\n            }\n\n            return value;\n        },\n\n        _change: function(value) {\n            var that = this;\n\n            value = that._getFactorValue(value);\n            that._update(value);\n            value = that._value;\n\n            if (that._old != value) {\n                that._old = value;\n\n                if (!that._typing) {\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n\n                that.trigger(CHANGE);\n            }\n\n            that._typing = false;\n        },\n\n        _culture: function(culture) {\n            return culture || getCulture(this.options.culture);\n        },\n\n        _focusin: function() {\n            var that = this;\n            that.wrapper.addClass(FOCUSED);\n            that._toggleText(false);\n            that.element.trigger(\"focus\");\n        },\n\n        _focusout: function() {\n            var that = this;\n\n            clearTimeout(that._focusing);\n            that.wrapper.removeClass(FOCUSED).removeClass(HOVER);\n            that._blur();\n            that._removeInvalidState();\n        },\n\n        _format: function(format, culture) {\n            var numberFormat = this._culture(culture).numberFormat;\n\n            format = format.toLowerCase();\n\n            if (format.indexOf(\"c\") > -1) {\n                numberFormat = numberFormat.currency;\n            } else if (format.indexOf(\"p\") > -1) {\n                numberFormat = numberFormat.percent;\n            }\n\n            return numberFormat;\n        },\n\n        _input: function() {\n            var that = this,\n                options = that.options,\n                element = that.element.addClass(INPUT).show()[0],\n                accessKey = element.accessKey,\n                wrapper = that.wrapper,\n                inputs = wrapper.find(POINT + INPUT),\n                text;\n\n            that.element.attr(\"inputmode\", options.inputMode);\n\n            text = inputs.first();\n\n            if (text.length < 2) {\n                text = $('<input type=\"text\"/>')\n                        .attr(kendo.attr(\"validate\"), \"false\")\n                        .insertBefore(element);\n            }\n\n            try {\n                element.setAttribute(\"type\", \"text\");\n            } catch (e) {\n                element.type = \"text\";\n            }\n\n            text[0].title = element.title;\n            text[0].tabIndex = element.tabIndex;\n            text[0].style.cssText = element.style.cssText;\n            text.prop(\"placeholder\", options.placeholder);\n\n            if (accessKey) {\n                text.attr(\"accesskey\", accessKey);\n                element.accessKey = \"\";\n            }\n\n\n            that._text = text.addClass(element.className)\n                             .attr({\n                                 \"role\": \"spinbutton\",\n                                 \"aria-valuemin\": options.min !== NULL ? options.min * options.factor : options.min,\n                                 \"aria-valuemax\": options.max !== NULL ? options.max * options.factor : options.max,\n                                 \"autocomplete\": \"off\"\n                             });\n        },\n\n        _keydown: function(e) {\n            var that = this,\n                key = e.keyCode;\n\n            if (key === keys.NUMPAD_DOT) {\n                that._numPadDot = true;\n            }\n\n            if (key == keys.DOWN) {\n                that._step(-1);\n                return;\n            } else if (key == keys.UP) {\n                that._step(1);\n                return;\n            } else if (key == keys.ENTER) {\n                that._change(that.element.val());\n                return;\n            }\n\n            if (key != keys.TAB) {\n                that._typing = true;\n            }\n            that._cachedCaret = caret(that.element);\n        },\n\n        _keyup: function() {\n            this._removeInvalidState();\n        },\n\n        _inputHandler: function() {\n            var element = this.element;\n            var value = element.val();\n            var min = this.options.min;\n            var numberFormat = this._format(this.options.format);\n            var decimalSeparator = numberFormat[POINT];\n            var minInvalid = (min !== null && min >= 0 && value.charAt(0) === \"-\");\n\n            if (this._numPadDot && decimalSeparator !== POINT) {\n                value = value.replace(POINT, decimalSeparator);\n                this.element.val(value);\n                this._numPadDot = false;\n            }\n\n            if (this._isPasted && this._parse(value)) {\n                value = this._parse(value)\n                    .toString()\n                    .replace(POINT, numberFormat[POINT]);\n            }\n\n            if (this._numericRegex(numberFormat).test(value) && !minInvalid) {\n                this._oldText = value;\n            } else {\n                this._blinkInvalidState();\n                this.element.val(this._oldText);\n                if (this._cachedCaret) {\n                    caret(element, this._cachedCaret[0]);\n                    this._cachedCaret = null;\n                }\n            }\n\n            this._isPasted = false;\n        },\n\n        _blinkInvalidState: function() {\n            var that = this;\n\n            that._addInvalidState();\n            clearTimeout(that._invalidStateTimeout);\n            that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n        },\n\n        _addInvalidState: function() {\n            var that = this;\n\n            that.wrapper.addClass(STATEINVALID);\n            that._validationIcon.removeClass('k-hidden');\n        },\n\n        _removeInvalidState: function() {\n            var that = this;\n\n            that.wrapper.removeClass(STATEINVALID);\n            that._validationIcon.addClass('k-hidden');\n            that._invalidStateTimeout = null;\n        },\n\n        _numericRegex: function(numberFormat) {\n            var that = this;\n            var separator = numberFormat[POINT];\n            var precision = that.options.decimals;\n            var fractionRule = \"*\";\n\n            if (separator === POINT) {\n                separator = \"\\\\\" + separator;\n            }\n\n            if (precision === NULL) {\n                precision = numberFormat.decimals;\n            }\n\n            if (precision === 0 && that.options.restrictDecimals) {\n                return INTEGER_REGEXP;\n            }\n\n            if (that.options.restrictDecimals) {\n                fractionRule = \"{0,\" + precision + \"}\";\n            }\n\n            if (that._separator !== separator || that._oldPrecision !== precision) {\n                that._separator = separator;\n                that._floatRegExp = new RegExp(\"^(-)?(((\\\\d+(\" + separator + \"\\\\d\" + fractionRule + \")?)|(\" + separator + \"\\\\d\" + fractionRule + \")))?$\");\n                that._oldPrecision = precision;\n            }\n\n            return that._floatRegExp;\n        },\n\n        _paste: function(e) {\n            var that = this;\n            var element = e.target;\n            var value = element.value;\n            var numberFormat = that._format(that.options.format);\n\n            that._isPasted = true;\n\n           setTimeout(function() {\n                var result = that._parse(element.value);\n\n                if (result === NULL) {\n                    that._update(value);\n                } else {\n                    element.value = result.toString().replace(POINT, numberFormat[POINT]);\n                    if (that._adjust(result) !== result || !that._numericRegex(numberFormat).test(element.value)) {\n                        value = that._getFactorValue(element.value);\n                        that._update(value);\n                    }\n                }\n            });\n        },\n\n        _option: function(option, value) {\n            var that = this,\n                element = that.element,\n                options = that.options;\n\n            if (value === undefined$1) {\n                return options[option];\n            }\n\n            value = that._parse(value);\n\n            if (!value && option === \"step\") {\n                return;\n            }\n\n            options[option] = value;\n            element\n                .add(that._text)\n                .attr(\"aria-value\" + option, value);\n\n            element.attr(option, value);\n        },\n\n        _spin: function(step, timeout) {\n            var that = this;\n\n            timeout = timeout || 500;\n\n            clearTimeout( that._spinning );\n            that._spinning = setTimeout(function() {\n                that._spin(step, 50);\n            }, timeout );\n\n            that._step(step);\n        },\n\n        _step: function(step) {\n            var that = this,\n                element = that.element,\n                originalValue = that._value,\n                value = that._parse(element.val()) || 0,\n                precision = that.options.decimals || 2;\n\n            if (activeElement() != element[0]) {\n                that._focusin();\n            }\n\n            if (that.options.factor && value) {\n                value = value / that.options.factor;\n            }\n\n            value = +(value + that.options.step * step).toFixed(precision);\n            value = that._adjust(value);\n            that._update(value);\n            that._typing = false;\n\n            if (originalValue !== value) {\n                that.trigger(SPIN);\n            }\n        },\n\n        _toggleHover: function(e) {\n            $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n        },\n\n        _toggleText: function(toggle) {\n            var that = this;\n\n            that._text.toggle(toggle);\n            if (toggle) {\n                that._text.removeAttr(\"aria-hidden\");\n            } else {\n                that._text.attr(\"aria-hidden\", \"true\");\n            }\n            that.element.toggle(!toggle);\n        },\n\n        _parse: function(value, culture) {\n            return parse(value, this._culture(culture), this.options.format);\n        },\n\n        _round: function(value, precision) {\n            var rounder = this.options.round ? kendo._round : truncate;\n\n            return rounder(value, precision);\n        },\n\n        _update: function(value) {\n            var that = this,\n                options = that.options,\n                factor = options.factor,\n                format = options.format,\n                decimals = options.decimals,\n                culture = that._culture(),\n                numberFormat = that._format(format, culture),\n                originalValue,\n                isNotNull;\n\n            if (decimals === NULL) {\n                decimals = numberFormat.decimals;\n            }\n\n            value = that._parse(value, culture);\n\n            isNotNull = value !== NULL;\n\n            if (isNotNull) {\n                value = parseFloat(that._round(value, decimals), 10);\n            }\n\n            that._value = value = that._adjust(value);\n            that._placeholder(kendo.toString(value, format, culture));\n\n            if (isNotNull) {\n                if (factor) {\n                    value = parseFloat(that._round(value * factor, decimals), 10);\n                }\n                value = value.toString();\n                if (value.indexOf(\"e\") !== -1) {\n                    value = that._round(+value, decimals);\n                }\n                originalValue = value;\n                value = value.replace(POINT, numberFormat[POINT]);\n            } else {\n                value = null;\n                originalValue = null;\n            }\n\n            that.element.val(value);\n            that._oldText = value;\n            that.element.add(that._text).attr(\"aria-valuenow\", originalValue);\n        },\n\n        _placeholder: function(value) {\n            var input = this._text;\n\n            input.val(value);\n            if (!placeholderSupported && !value) {\n                input.val(this.options.placeholder);\n            }\n\n            input.attr(\"title\", this.element.attr(\"title\") || input.val());\n        },\n\n        _label: function() {\n            var that = this;\n            var element = that.element;\n            var options = that.options;\n            var id = element.attr(\"id\");\n            var floating;\n            var labelText;\n\n            if (options.label !== null) {\n                floating = isPlainObject(options.label) ? options.label.floating : false;\n                labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n                if (floating) {\n                    that._floatingLabelContainer = that.wrapper.wrap(\"<span></span>\").parent();\n                    that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });\n                }\n\n                if (kendo.isFunction(labelText)) {\n                    labelText = labelText.call(that);\n                }\n\n                if (!labelText) {\n                    labelText = \"\";\n                }\n\n                if (!id) {\n                    id = options.name + \"_\" + kendo.guid();\n                    element.attr(\"id\", id);\n                }\n\n                that._inputLabel = $(\"<label class='\" + (floating ? FLOATINGLABELCLASS : LABELCLASSES) + \"' for='\" + id + \"'>\" + labelText + \"</label>'\")[floating ? \"insertAfter\" : \"insertBefore\"](that.wrapper);\n\n                if ((that.element.attr(\"disabled\") === undefined$1) && (that.element.attr(\"readonly\") === undefined$1)) {\n                    that._inputLabel.on(\"click\" + ns, that.focus.bind(that));\n                }\n            }\n        },\n\n        _wrapper: function() {\n            var that = this,\n                element = that.element,\n                DOMElement = element[0],\n                wrapper;\n\n            wrapper = element.parents(\".k-numerictextbox\");\n\n            if (!wrapper.is(\"span.k-numerictextbox\")) {\n                wrapper = element.hide().wrap(\"<span/>\").parent();\n            }\n\n            wrapper[0].style.cssText = DOMElement.style.cssText;\n            DOMElement.style.width = \"\";\n            that.wrapper = wrapper.addClass(\"k-numerictextbox k-input\")\n                                  .addClass(DOMElement.className)\n                                  .removeClass('input-validation-error')\n                                  .css(\"display\", \"\");\n        },\n\n        _reset: function() {\n            var that = this,\n                element = that.element,\n                formId = element.attr(\"form\"),\n                form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n                that._resetHandler = function() {\n                    setTimeout(function() {\n                        that.value(element[0].value);\n                        that.max(that._initialOptions.max);\n                        that.min(that._initialOptions.min);\n                    });\n                };\n\n                that._form = form.on(\"reset\", that._resetHandler);\n            }\n        }\n    });\n\n    kendo.cssProperties.registerPrefix(\"NumericTextBox\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"NumericTextBox\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n    function buttonHtml(direction, text, options) {\n        var className = direction === \"increase\" ? \"caret-alt-up\" : \"caret-alt-down\";\n        var dir = direction === \"increase\" ? \"increase\" : \"decrease\";\n\n        return html.renderButton('<button role=\"button\" tabindex=\"-1\" unselectable=\"on\" class=\"k-spinner-' + dir + '\" aria-label=\"' + text + '\" title=\"' + text + '\"></button>', extend({}, options, {\n            icon: className,\n            shape: null,\n            rounded: null\n        }));\n    }\n\n    function truncate(value, precision) {\n        var parts = parseFloat(value, 10).toString().split(POINT);\n\n        if (parts[1]) {\n            parts[1] = parts[1].substring(0, precision);\n        }\n\n        return parts.join(POINT);\n\n    }\n\n    ui.plugin(NumericTextBox);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}
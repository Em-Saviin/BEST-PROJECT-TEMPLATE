{"version":3,"sources":["raw-mjs/kendo.autocomplete.js"],"names":["addInputPrefixSuffixContainers","__meta__","id","name","category","description","depends","features","$","undefined$1","kendo","window","encode","htmlEncode","support","caret","activeElement","_activeElement","placeholderSupported","placeholder","ui","List","keys","DataSource","data","ARIA_DISABLED","ARIA_READONLY","CHANGE","DISABLED","READONLY","FOCUSED","STATEDISABLED","ns","HOVEREVENTS","indexOfWordAtCaret","caretIdx","text","separator","substring","split","length","AutoComplete","extend","init","element","options","wrapper","that","this","Array","isArray","dataSource","fn","call","attr","inputMode","_wrapper","_clearButton","_dataSource","_ignoreCase","type","_popup","addClass","on","_keydown","bind","_keypress","_search","_prev","_accessor","_oldText","_placeholder","ev","filterInput","relatedTarget","_change","close","removeClass","autocomplete","role","inputmode","_clear","_clearValue","_clearValueMouseDownHandler","_enable","_old","_initList","parents","is","enable","listView","e","preventDefault","_resetFocusItemHandler","_resetFocusItem","widget","prefixInsertBefore","_inputValuesContainer","suffixInsertAfter","clearButton","notify","_toggleCloseVisibility","_applyCssClasses","label","_label","_aria","enabled","suggest","template","groupTemplate","fixedGroupTemplate","prefixOptions","suffixOptions","dataTextField","minLength","enforceMinLength","delay","height","filter","ignoreCase","highlightFirst","animation","virtual","value","autoWidth","popup","size","fillMode","rounded","currentTarget","classList","contains","_clearValueTrigger","_onActionSheetCreate","val","trigger","_onCloseButtonPressed","_refreshHandler","_unbindDataSource","_progressHandler","_showBusy","_errorHandler","_hideBusy","create","setDataSource","events","setOptions","listOptions","_listOptions","_accessors","skipUpdateOnBind","dataValueField","selectedItemChange","_editable","off","readonly","disable","_toggleHover","prop","current","focus","_deactivateItem","destroy","refresh","select","li","_select","search","word","lowerCaseValue","_separator","accentFoldingFiltering","clearTimeout","_typingTimeout","wordAtCaret","_open","_mute","toLocaleLowerCase","toLowerCase","_filterSource","operator","field","one","_unifySeparators","idx","key","_last","currentValue","words","wordIndex","selectionEnd","BACKSPACE","DELETE","view","inArray","ul","_text","indexOf","lastIndexOf","_defaultSeparator","toString","push","lastSeparator","matchAll","source","pop","slice","join","_refreshFloatingLabel","_click","item","dataItem","dataItemByIndex","getElementIndex","_active","done","_blur","_clearText","noop","_highlightFirst","index","scrollTo","_listBound","action","flatView","groupsLength","_group","isActive","_renderFooter","_renderNoData","_toggleNoData","_toggleHeader","_resizePopup","position","_inputValue","_allowOpening","unbind","_touchScroller","reset","callback","_muted","_listChange","_selectValue","selectedDataItems","defaultSeparator","splice","replaceWordAtCaret","_preselect","oldText","setValue","unifyType","valueUpdated","_typing","itemSelected","clearValueTrigger","typing","className","keyCode","visible","DOWN","_move","open","ESC","altKey","UP","HOME","END","ENTER","TAB","PAGEDOWN","PAGEUP","_hovered","direction","scrollWith","screenHeight","_view","show","toggleClass","document","RegExp","setTimeout","candidate","insertAfter","preventShow","_showClear","_hideClear","DOMelement","parent","wrap","style","cssText","css","width","_focused","plugin","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","jQuery","kendo$1"],"mappings":";;;;;;;;MAAA,wBACA,mCACA,qCACAA,mCAAA,4CAEA,MAAAC,SAAA,CACAC,GAAA,eACAC,KAAA,eACAC,SAAA,MACAC,YAAA,kHACAC,QAAA,CAAA,OAAA,kCACAC,SAAA,CAAA,CACAL,GAAA,kBACAC,KAAA,kBACAE,YAAA,iDACAC,QAAA,CAAA,oBACA,CACAJ,GAAA,iBACAC,KAAA,cACAE,YAAA,6BACAC,QAAA,CAAA,mBAIA,SAAAE,EAAAC,GACA,IAAAC,EAAAC,OAAAD,MACAE,EAAAF,EAAAG,WACAC,EAAAJ,EAAAI,QACAC,EAAAL,EAAAK,MACAC,EAAAN,EAAAO,eACAC,EAAAJ,EAAAK,YACAC,EAAAV,EAAAU,GACAC,EAAAD,EAAAC,KACAC,EAAAZ,EAAAY,KACAC,EAAAb,EAAAc,KAAAD,WACAE,EAAA,gBACAC,EAAA,gBACAC,EAAA,SACAC,EAAA,WACAC,EAAA,WACAC,EAAA,UAEAC,EAAA,aAGAC,EAAA,qBACAC,EAAA,aAAAD,EAAA,cAAAA,EAEA,SAAAE,EAAAC,EAAAC,EAAAC,GACA,OAAAA,EAAAD,EAAAE,UAAA,EAAAH,GAAAI,MAAAF,GAAAG,OAAA,EAAA,CACA,CAkBA,IAAAC,EAAApB,EAAAqB,OAAA,CACAC,KAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAC,KAEAD,EAAAf,GAAAA,EACAa,EAAAI,MAAAC,QAAAL,GAAA,CAAAM,WAAAN,GAAAA,EAEAxB,EAAA+B,GAAAT,KAAAU,KAAAN,EAAAH,EAAAC,GAEAD,EAAAG,EAAAH,SACAC,EAAAE,EAAAF,SAEA1B,YAAA0B,EAAA1B,aAAAyB,EAAAU,KAAA,eACAT,EAAAU,UAAAV,EAAAU,WAAAX,EAAAU,KAAA,cAAA,OAEApC,GACA0B,EAAAU,KAAA,cAAAT,EAAA1B,aAGA4B,EAAAS,WACAT,EAAAU,eAEAV,EAAAW,cACAX,EAAAY,cAEAf,EAAA,GAAAgB,KAAA,OACAd,EAAAC,EAAAD,QAEAC,EAAAc,SAEAjB,EACAkB,SAAA,iBACAC,GAAA,UAAA/B,EAAAe,EAAAiB,SAAAC,KAAAlB,IACAgB,GAAA,WAAA/B,EAAAe,EAAAmB,UAAAD,KAAAlB,IACAgB,GAAA,QAAA/B,EAAAe,EAAAoB,QAAAF,KAAAlB,IACAgB,GAAA,QAAA/B,EAAAe,EAAAoB,QAAAF,KAAAlB,IACAgB,GAAA,QAAA/B,GAAA,WACAe,EAAAqB,MAAArB,EAAAsB,YACAtB,EAAAuB,SAAAvB,EAAAqB,MACArB,EAAAwB,cAAA,GACAzB,EAAAgB,SAAAhC,EACA,IACAiC,GAAA,WAAA/B,GAAA,SAAAwC,GACAzB,EAAA0B,aAAAD,EAAAE,gBAAA3B,EAAA0B,YAAA,KAIA1B,EAAA4B,UACA5B,EAAAwB,eACAxB,EAAA6B,QACA9B,EAAA+B,YAAA/C,GACA,IACAwB,KAAA,CACAwB,aA9EA,MA+EAC,KAAA,WACA,iBAAA,EACAC,UAAAnC,EAAAU,YAGAR,EAAAkC,OAAAlB,GAAA,QAAA/B,EAAA,YAAAA,EAAAe,EAAAmC,YAAAjB,KAAAlB,IACAA,EAAAkC,OAAAlB,GAAA,YAAA/B,EAAAe,EAAAoC,4BAAAlB,KAAAlB,IACAA,EAAAqC,UAEArC,EAAAsC,KAAAtC,EAAAsB,YAEAtB,EAAAwB,eAEAxB,EAAAuC,YAEA9E,EAAAuC,EAAAH,SAAA2C,QAAA,YAAAC,GAAA,cAGAzC,EAAA0C,QAAA,GAGA1C,EAAA2C,SAAAzB,KAAA,SAAA,SAAA0B,GAAAA,EAAAC,gBAAA,IAEA7C,EAAA8C,uBAAA9C,EAAA+C,gBAAA7B,KAAAlB,GACA/C,+BAAA,CAAA+F,OAAAhD,EAAAD,QAAAC,EAAAD,QAAAD,QAAAE,EAAAF,QAAAmD,mBAAAjD,EAAAkD,sBAAAC,kBAAArD,EAAAsD,YAAApD,EAAAkC,OAAAlC,EAAAH,UAEAlC,EAAA0F,OAAArD,GACAA,EAAAsD,yBACAtD,EAAAuD,mBAEAzD,EAAA0D,OACAxD,EAAAyD,SAGAzD,EAAA0D,OACA,EAEA5D,QAAA,CACA1C,KAAA,eACAuG,SAAA,EACAC,SAAA,EACAC,SAAA,GACAC,cAAArF,GAAAZ,EAAAY,GACAsF,mBAAAtF,GAAAZ,EAAAY,GACAuF,cAAA,CACA1E,WAAA,GAEA2E,cAAA,CACA3E,WAAA,GAEA4E,cAAA,GACAC,UAAA,EACAC,kBAAA,EACAC,MAAA,IACAC,OAAA,IACAC,OAAA,aACAC,YAAA,EACAC,gBAAA,EACAnF,UAAA,KACAlB,YAAA,GACAsG,UAAA,CAAA,EACAC,SAAA,EACAC,MAAA,KACAxB,aAAA,EACAyB,WAAA,EACAC,MAAA,KACAC,KAAA,SACAC,SAAA,QACAC,QAAA,SACAzB,MAAA,MAGApB,4BAAA,SAAAX,GAGAA,GAAAA,EAAAyD,eAAAzD,EAAAyD,cAAAC,UAAAC,SAAA,iBAFAnF,KAGAoF,oBAAA,EAHApF,KAKAoF,oBAAA,CAEA,EAEAC,qBAAA,WACA,IAAAtF,EAAAC,KAEAD,EAAA0B,cACA1B,EAAA0B,YACAV,GAAA,UAAA/B,EAAAe,EAAAiB,SAAAC,KAAAlB,IACAgB,GAAA,WAAA/B,EAAAe,EAAAmB,UAAAD,KAAAlB,IACAgB,GAAA,QAAA/B,EAAAe,EAAAoB,QAAAF,KAAAlB,IACAgB,GAAA,QAAA/B,EAAAe,EAAAoB,QAAAF,KAAAlB,IACAO,KAAA,CACAwB,aA3KA,MA4KAC,KAAA,WACA,iBAAA,IAGAhC,EAAA8E,MAAA5D,KAAA,YAAA,KACAlB,EAAA0B,YAAA6D,IAAAvF,EAAAH,QAAA0F,OACAvF,EAAA0B,YAAA8D,QAAA,QAAA,IAGAxF,EAAA8E,MAAA5D,KAAA,cAAA,KACAlB,EAAAH,QAAA2F,QAAA,QAAA,IAGA,EAEAC,sBAAA,WACA,IAAAzF,EAAAC,KAEAD,EAAA0B,aAAAzD,MAAA+B,EAAA0B,YAAA,IACA1B,EAAAH,QAAA0F,IAAAvF,EAAA0B,YAAA6D,MAEA,EAEAzE,OAAA,WACAxC,EAAA+B,GAAAS,OAAAR,KAAAL,MACAA,KAAA6E,MAAAjF,QAAAkB,SAAA,uBACA,EAEAJ,YAAA,WACA,IAAAX,EAAAC,KAEAD,EAAAI,YAAAJ,EAAA0F,gBACA1F,EAAA2F,qBAEA3F,EAAA4F,iBAAA5F,EAAA6F,UACA7F,EAAA8F,cAAA9F,EAAA+F,WAGA/F,EAAAI,WAAA5B,EAAAwH,OAAAhG,EAAAF,QAAAM,YACAc,KAAA,WAAAlB,EAAA4F,kBACA1E,KAAA,QAAAlB,EAAA8F,cACA,EAEAG,cAAA,SAAA7F,GACAH,KAAAH,QAAAM,WAAAA,EACAH,KAAAU,cAEAV,KAAA0C,SAAAsD,cAAAhG,KAAAG,WACA,EAEA8F,OAAA,CACA,OACA,QACAtH,EACA,SACA,YACA,cACA,aAGAuH,WAAA,SAAArG,GACA,IAAAsG,EAAAnG,KAAAoG,aAAAvG,GAEAxB,EAAA+B,GAAA8F,WAAA7F,KAAAL,KAAAH,GAEAG,KAAA0C,SAAAwD,WAAAC,GACAnG,KAAAqG,aACArG,KAAAyD,QACAzD,KAAAS,cACA,EAEA2F,aAAA,SAAAvG,GACA,IAAAsG,EAAA9H,EAAA+B,GAAAgG,aAAA/F,KAAAL,KAAAxC,EAAAkC,OAAAG,EAAA,CACAyG,kBAAA,KAMA,OAHAH,EAAAI,eAAAJ,EAAAlC,cACAkC,EAAAK,mBAAA,KAEAL,CACA,EAEAM,UAAA,SAAA5G,GACA,IAAAE,EAAAC,KACAJ,EAAAG,EAAAH,QACAE,EAAAC,EAAAD,QAAA4G,IAAA1H,GACA2H,EAAA9G,EAAA8G,SACAC,EAAA/G,EAAA+G,QAEAD,GAAAC,GAUA9G,EACAgB,SAAA8F,EAAA7H,EAAA,IACA8C,YAAA+E,EAAA,GAAA7H,GAEAa,EAAAU,KAAA1B,EAAAgI,GACAtG,KAAAzB,EAAA8H,GACArG,KAAA7B,EAAAmI,GACAtG,KAAA5B,EAAAiI,KAhBA7G,EACA+B,YAAA9C,GACAgC,GAAA9B,EAAAc,EAAA8G,cAEAjH,EAAAkH,KAAAlI,GAAA,GACAkI,KAAAjI,GAAA,GACAyB,KAAA7B,GAAA,GACA6B,KAAA5B,GAAA,IAYAqB,EAAAsD,wBACA,EAEAzB,MAAA,WACA,IAAA7B,EAAAC,KACA+G,EAAAhH,EAAA2C,SAAAsE,QAEAD,GACAA,EAAAlF,YAnSA,cAsSA9B,EAAA8E,MAAAjD,QACA7B,EAAAkH,iBACA,EAEAC,QAAA,WACA,IAAAnH,EAAAC,KAEAD,EAAAH,QAAA8G,IAAA1H,GACAe,EAAAkC,OAAAyE,IAAA1H,GACAe,EAAAD,QAAA4G,IAAA1H,GAEAe,EAAA0B,aACA1B,EAAA0B,YAAAiF,IAAA1H,GAGAX,EAAA+B,GAAA8G,QAAA7G,KAAAN,EACA,EAEAoH,QAAA,WACAnH,KAAA0C,SAAAyE,SACA,EAEAC,OAAA,SAAAC,GACArH,KAAAsH,QAAAD,EACA,EAEAE,OAAA,SAAAC,GACA,IAIAhI,EACAiI,EALA1H,EAAAC,KACAH,EAAAE,EAAAF,QACA0E,EAAA1E,EAAA0E,WACAlF,EAAAU,EAAA2H,aAGAC,EAAA5H,EAAAI,WAAAN,QAAA8H,uBACA/H,EAAAG,EAAA0B,aAAAzD,MAAA+B,EAAA0B,YAAA,GAAA1B,EAAA0B,YAAA1B,EAAAH,QAEA4H,EAAAA,GAAAzH,EAAAsB,YAEAuG,aAAA7H,EAAA8H,gBAEAxI,IACAmI,EApUA,SAAArI,EAAAC,EAAAC,GACA,OAAAD,EAAAG,MAAAF,GAAAH,EAAAC,EAAAC,EAAAC,GACA,CAkUAyI,CAAA/J,EAAA6B,GAAA,GAAA4H,EAAAnI,IAGAG,EAAAgI,EAAAhI,SAEAK,EAAAsE,mBAAA3E,GAAAA,GAAAK,EAAAqE,aACAnE,EAAAgI,OAAA,EAEAhI,EAAAiI,OAAA,WACAhI,KAAA0C,SAAAiC,MAAA,GACA,IAEA8C,EAAAE,EAAAH,EAAAS,kBAAAN,GAAAH,EAAAU,cAEAnI,EAAAoI,cAAA,CACAxD,MAAAJ,EAAAkD,EAAAD,EACAY,SAAAvI,EAAAyE,OACA+D,MAAAxI,EAAAoE,cACAM,WAAAA,IAGAxE,EAAAuI,IAAA,QAAAvI,EAAAwI,iBAAAtH,KAAAlB,KAEAA,EAAAsD,wBACA,EAEAM,QAAA,SAAA6D,GACA,IAUAgB,EAVAzI,EAAAC,KACAyI,EAAA1I,EAAA2I,MACA/D,EAAA5E,EAAAsB,YACAsH,EAAA5I,EAAA4E,QACA/E,EAAAG,EAAAH,QAAA,GACAT,EAAApB,EAAA6B,GAAA,GACAP,EAAAU,EAAA2H,aACAkB,EAAAjE,EAAApF,MAAAF,GACAwJ,EAAA3J,EAAAC,EAAAwF,EAAAtF,GACAyJ,EAAA3J,EAEAwI,EAAA5H,EAAAI,WAAAN,QAAA8H,uBAEA,GAAAc,GAAAnK,EAAAyK,WAAAN,GAAAnK,EAAA0K,OAAA,CA0CA,GAnCA,iBAFAxB,EAAAA,GAAA,MAGAA,EAAA,KACAA,EAAAzH,EAAAI,WAAA8I,OAAA5K,EAAA6K,QAAA1B,EAAA,GAAAzH,EAAAoJ,GAAA,MAGA3B,EAAAA,EAAAzH,EAAAqJ,MAAA5B,GAAA,IAGArI,GAAA,IACAA,GAAAwI,EAAAhD,EAAAsD,kBAAAN,GAAAhD,EAAAuD,eAAAmB,QAAA1B,EAAAH,EAAAS,kBAAAN,GAAAH,EAAAU,eAAA,GAIAM,GADAA,EAAA7D,EAAArF,UAAA,EAAAH,GAAAmK,YAAAvJ,EAAAwJ,uBACA,EAAApK,GAAAqJ,EAAAzI,EAAAwJ,oBAAA/J,QAAAL,EACAwF,EAAAiE,EAAAC,GAAAvJ,UAAA,EAAAkJ,GAEAhB,IACAA,EAAAA,EAAAgC,YACAhB,GAAAb,EAAAH,EAAAS,kBAAAN,GAAAH,EAAAU,eAAAmB,QAAA1B,EAAAhD,EAAAsD,kBAAAN,GAAAhD,EAAAuD,iBACA,IAGAY,EAAA3J,GAFAqI,EAAAA,EAAAlI,UAAAkJ,EAAA7D,EAAAnF,SAEAA,OAEAmF,GAAA6C,GAGAnI,GAAA,KAAAuJ,EAAAA,EAAApJ,OAAA,IACAoJ,EAAAa,KAAA,KAKAb,EAAAC,GAAAlE,EAEA,iBAAA5E,EAAAF,QAAAR,WAAA,MAAAU,EAAAF,QAAAR,UACA,GAAAsJ,EAAAnJ,OAAA,EAAA,CACA,IAAAkK,EAAA,IAAAf,EAAAgB,SAAAtK,EAAAuK,SAAAC,MACAH,EACA3J,EAAAsB,UAAAuH,EAAAkB,MAAA,GAAA,GAAAC,KAAAhK,EAAAwJ,qBAAA,IAAAG,EAAAd,EAAAA,EAAApJ,OAAA,IAEAO,EAAAsB,UAAAuH,EAAAkB,MAAA,GAAA,GAAAC,KAAAhK,EAAAwJ,qBAAA,IAEA,MACAxJ,EAAAsB,UAAAuH,EAAAmB,KAAA/J,KAAAuJ,qBAAA,UAGAxJ,EAAAsB,UAAAuH,EAAAmB,KAAA1K,GAAA,KAGAO,IAAA5B,KACAD,EAAA6B,EAAAT,EAAA2J,EAvDA,MAFA/I,EAAA2I,MAAAjL,CA2DA,EAEAkH,MAAA,SAAAA,GACA,GAAAA,IAAAlH,EAOA,OAAAuC,KAAAqB,YANArB,KAAA0C,SAAAiC,MAAAA,GAEA3E,KAAAqB,UAAAsD,GACA3E,KAAAqC,KAAArC,KAAAqB,YACArB,KAAAsB,SAAAtB,KAAAqB,YAIArB,KAAAqD,yBACArD,KAAAgK,uBACA,EAEAC,OAAA,SAAAtH,GACA,IAAAuH,EAAAvH,EAAAuH,KACAnK,EAAAC,KACAJ,EAAAG,EAAAH,QACAuK,EAAApK,EAAA2C,SAAA0H,gBAAArK,EAAA2C,SAAA2H,gBAAAH,IAEAvH,EAAAC,iBAEA7C,EAAAuK,SAAA,EAEAvK,EAAAwF,QAAA,SAAA,CAAA4E,SAAAA,EAAAD,KAAAA,IACAnK,EAAA6B,SAGA7B,EAAAuB,SAAA1B,EAAA0F,MACAvF,EAAAuH,QAAA4C,GAAAK,MAAA,WACAxK,EAAAyK,QAEAzM,EAAA6B,EAAAA,EAAA0F,MAAA9F,OACA,IACA,EAEAiL,WAAAjN,EAAAkN,KAEAC,gBAAA,WACA,IAAAC,EAAA5K,KAAAH,QAAA2E,eAAA,GAAA,EAEAxE,KAAA0C,SAAAsE,MAAA4D,EACA,EAEA9H,gBAAA,WACA9C,KAAAH,QAAA6E,SACA1E,KAAA0C,SAAAmI,SAAA,GAGA7K,KAAA2K,iBACA,EAEAG,WAAA,WACA,IAOAC,EAPAhL,EAAAC,KACA6E,EAAA9E,EAAA8E,MACAhF,EAAAE,EAAAF,QACArB,EAAAuB,EAAAI,WAAA6K,WACAxL,EAAAhB,EAAAgB,OACAyL,EAAAlL,EAAAI,WAAA+K,OAAAnL,EAAAI,WAAA+K,OAAA1L,OAAA,EACA2L,EAAApL,EAAAH,QAAA,KAAA5B,KAAA+B,EAAA0B,aAAA1B,EAAA0B,YAAA,KAAAzD,IAGA+B,EAAAqL,gBACArL,EAAAsL,gBACAtL,EAAAuL,eAAA9L,GACAO,EAAAwL,gBAAAN,KAAAzL,GAEAO,EAAAyL,eAEA3G,EAAA4G,WAEAjM,IACAK,EAAA8D,SAAAwH,GAAApL,EAAA2L,eACA3L,EAAA4D,QAAAnF,EAAA,IAGAuB,EAAA4K,mBAGA5K,EAAAgI,QACAhI,EAAAgI,OAAA,EACAgD,EAAAhL,EAAA4L,gBAAA,OAAA,QAEA5L,EAAA8H,iBAAAsD,IACAJ,EAAA,SAGAvL,IACAO,EAAA+C,kBAEAjD,EAAA6E,SACA3E,EAAA8E,MACA+G,OAAA,WAAA7L,EAAA8C,wBACAyF,IAAA,WAAAvI,EAAA8C,yBAIAgC,EAAAkG,KACAhL,EAAA8H,eAAApK,GAGAsC,EAAA8L,gBACA9L,EAAA8L,eAAAC,QAGA/L,EAAA+F,YAEA/F,EAAAwF,QAAA,YACA,EAEAyC,MAAA,SAAA+D,GACA/L,KAAAgM,QAAA,EACAD,EAAA1L,KAAAL,MACAA,KAAAgM,QAAA,CACA,EAEAC,YAAA,YACAjM,KAAAsK,SAAAtK,KAAAJ,QAAA,KAAA5B,OAEAgC,KAAAgM,QACAhM,KAAAkM,aAAAlM,KAAA0C,SAAAyJ,oBAAA,GAEA,EAEAD,aAAA,SAAA/B,GACA,IAAA9K,EAAAW,KAAA0H,aACAtI,EAAA,GAEA+K,IACA/K,EAAAY,KAAAoJ,MAAAe,IAGA,OAAA/K,IACAA,EAAA,IAGAC,IACAD,EA/iBA,SAAAD,EAAAC,EAAAoI,EAAAnI,EAAA+M,GACA,IAAAxD,EAAAxJ,EAAAG,MAAAF,GAQA,OANAuJ,EAAAyD,OAAAnN,EAAAC,EAAAC,EAAAC,GAAA,EAAAmI,GAEAnI,GAAA,KAAAuJ,EAAAA,EAAApJ,OAAA,IACAoJ,EAAAa,KAAA,IAGAb,EAAAmB,KAAAqC,EACA,CAqiBAE,CAAAvO,EAAAiC,KAAAJ,SAAA,GAAAI,KAAAqB,YAAAjC,EAAAC,EAAAW,KAAAuJ,sBAGAvJ,KAAAoB,MAAAhC,EACAY,KAAAqB,UAAAjC,GACAY,KAAAuB,cACA,EAEAgH,iBAAA,WAEA,OADAvI,KAAAqB,UAAArB,KAAA2E,QAAApF,MAAAS,KAAA0H,cAAAqC,KAAA/J,KAAAuJ,sBACAvJ,IACA,EAEAuM,WAAA,SAAA5H,EAAAvF,GACAY,KAAA0L,YAAAtM,GACAY,KAAAqB,UAAAsD,GAEA3E,KAAAqC,KAAArC,KAAAwM,QAAAxM,KAAAqB,YAEArB,KAAA0C,SAAA+J,SAAA9H,GACA3E,KAAAuB,cACA,EAEAI,QAAA,WACA,IAAA5B,EAAAC,KACA2E,EAAA5E,EAAAwI,mBAAA5D,QACAY,EAAAZ,IAAAtG,EAAAqO,UAAA3M,EAAAsC,YAAAsC,GAEAgI,EAAApH,IAAAxF,EAAA6M,QACAC,EAAA9M,EAAAuB,WAAAqD,EACAmI,EAAA/M,EAAAqF,mBAEArF,EAAAsC,KAAAsC,EACA5E,EAAAuB,SAAAqD,EAEA5E,EAAA0B,aAAAzD,MAAA+B,EAAA0B,YAAA,IACA1B,EAAAH,QAAA0F,IAAAvF,EAAA0B,YAAA6D,QAGAqH,IAAAE,GAAAC,GAEA/M,EAAAH,QAAA2F,QAAA5G,GAGA4G,IAAAuH,GACA/M,EAAAwF,QAAA5G,GAGAoB,EAAAgN,QAAA,EACAhN,EAAAsD,wBACA,EAEAhC,UAAA,SAAAsD,GACA,IAAA5E,EAAAC,KACAJ,EAAAG,EAAA0B,aAAAzD,MAAA+B,EAAA0B,YAAA,GAAA1B,EAAA0B,YAAA,GAAA1B,EAAAH,QAAA,GAEA,GAAA+E,IAAAlH,EAMA,OAFAkH,EAAA/E,EAAA+E,MAEA/E,EAAAoN,UAAA3D,QAAA,eAAA,GACA1E,IAAA5E,EAAAF,QAAA1B,YACA,GAMAwG,EAbA/E,EAAA+E,MAAA,OAAAA,EAAA,GAAAA,EACA5E,EAAAwB,cAcA,EAEAP,SAAA,SAAA2B,GACA,IAAA5C,EAAAC,KACAyI,EAAA9F,EAAAsK,QACAvK,EAAA3C,EAAA2C,SACAwK,EAAAnN,EAAA8E,MAAAqI,UACAnG,EAAArE,EAAAsE,QAIA,GAFAjH,EAAA2I,MAAAD,EAEAA,IAAAnK,EAAA6O,KACAD,EACAlN,KAAAoN,MAAArG,EAAA,YAAA,cACAhH,EAAA4E,SACA5E,EAAAoI,cAAA,CACAxD,MAAA5E,EAAAwE,WAAAxE,EAAA4E,QAAAuD,cAAAnI,EAAA4E,QACAyD,SAAArI,EAAAF,QAAAyE,OACA+D,MAAAtI,EAAAF,QAAAoE,cACAM,WAAAxE,EAAAwE,aACAgG,MAAA,WACAxK,EAAA4L,kBACA5L,EAAA+C,kBACA/C,EAAA8E,MAAAwI,OAEA,IAEA1K,EAAAC,sBACA,GAAA6F,IAAAnK,EAAAgP,IACAJ,GACAvK,EAAAC,iBACA7C,EAAA6B,SAEA7B,EAAAmC,mBAEA,GAAAS,EAAA4K,QAAA9E,IAAAnK,EAAAkP,IAAAN,EACAvK,EAAAC,iBACA7C,EAAA6B,aACA,GAAA6G,IAAAnK,EAAAkP,GACAN,GACAlN,KAAAoN,MAAArG,EAAA,YAAA,aAEApE,EAAAC,sBACA,GAAA6F,IAAAnK,EAAAmP,KACAzN,KAAAoN,MAAA,mBACA,GAAA3E,IAAAnK,EAAAoP,IACA1N,KAAAoN,MAAA,kBACA,GAAA3E,IAAAnK,EAAAqP,OAAAlF,IAAAnK,EAAAsP,IAAA,CAMA,GAJAnF,IAAAnK,EAAAqP,OAAAT,GACAvK,EAAAC,iBAGAsK,GAAAnG,EAAA,CACA,IAAAoD,EAAAzH,EAAA0H,gBAAA1H,EAAA2H,gBAAAtD,IACA,GAAAhH,EAAAwF,QAAA,SAAA,CAAA4E,SAAAA,EAAAD,KAAAnD,IACA,OAGA/G,KAAAsH,QAAAP,EACA,CAEA/G,KAAAwK,OACA,MAAA,IAAAzK,EAAA8E,MAAAqI,WAAAzE,IAAAnK,EAAAuP,UAAApF,IAAAnK,EAAAwP,OAQA/N,EAAA8E,MAAAkJ,UAAA,EACAhO,EAAAoB,cATA,CACAwB,EAAAC,iBAEA,IAAAoL,EAAAvF,IAAAnK,EAAAuP,SAAA,GAAA,EACAnL,EAAAuL,WAAAD,EAAAtL,EAAAwL,eACA,CAMA,EAEAhN,UAAA,WACAlB,KAAAsB,SAAAtB,KAAAJ,QAAA0F,MACAtF,KAAA4M,SAAA,CACA,EAEAQ,MAAA,SAAArC,GAGA,GAFA/K,KAAA0C,SAAAqI,KAEA/K,KAAAH,QAAA8D,SAAA,MAAA3D,KAAA0C,SAAAsE,SAAA,aAAA+D,EACA/K,KAAA0C,SAAAsE,MAAA,GACAhH,KAAA2D,QAAA3D,KAAA0C,SAAAyL,MAAA,GAAAjE,WACA,GAAAlK,KAAAH,QAAA8D,SAAA,MAAA3D,KAAA0C,SAAAsE,SAAA,aAAA+D,EAAA,CACA,IAAAH,EAAA5K,KAAA0C,SAAAyL,MAAA3O,OAAA,EACAQ,KAAA0C,SAAAsE,MAAA4D,GACA5K,KAAA2D,QAAA3D,KAAA0C,SAAAyL,MAAAvD,GAAAV,KACA,MAAAlK,KAAAH,QAAA8D,SAAA,cAAAoH,GAAA,aAAAA,EAEA/K,KAAAH,QAAA8D,SAAA,MAAA3D,KAAA0C,SAAAsE,SACAhH,KAAA2D,QAAA3D,KAAA0C,SAAAsE,SAFAjJ,EAAAiC,KAAAJ,QAIA,EAEA2B,aAAA,SAAA6M,GACA,IAAAlQ,EAAA,CAIA,IAGAyG,EAHA5E,EAAAC,KACAJ,EAAAG,EAAAH,QACAzB,EAAA4B,EAAAF,QAAA1B,YAGA,GAAAA,EAAA,CAeA,GAdAwG,EAAA/E,EAAA0F,MAEA8I,IAAA3Q,IACA2Q,GAAAzJ,GAGAyJ,IAEAjQ,EADAwG,IAAAxG,EACAwG,EAEA,IAIAA,IAAA5E,EAAAsC,OAAA+L,EACA,OAGAxO,EAAAyO,YAAA,aAAAD,GACA9I,IAAAnH,GAEAA,GAAAyB,EAAA,KAAA0O,SAAAtQ,eACAD,EAAA6B,EAAA,GAAA,EAAA,EAEA,CAhCA,CAiCA,EAEA8H,WAAA,WACA,IAAArI,EAAAW,KAAAH,QAAAR,UACA,OAAAA,aAAAY,MACA,IAAAsO,OAAAlP,EAAA0K,KAAA,KAAA,MAEA1K,CACA,EAEAkK,kBAAA,WACA,IAAAlK,EAAAW,KAAAH,QAAAR,UACA,OAAAA,aAAAY,MACAZ,EAAA,GAEAA,CACA,EAEAqM,YAAA,WACA,OAAA1L,KAAAJ,QAAA0F,KACA,EAEAnE,QAAA,WACA,IAAApB,EAAAC,KACA4H,aAAA7H,EAAA8H,gBAEA9H,EAAA8H,eAAA2G,YAAA,WACAzO,EAAAqB,QAAArB,EAAAsB,cACAtB,EAAAqB,MAAArB,EAAAsB,YACAtB,EAAAwH,SAEA,GAAAxH,EAAAF,QAAAuE,MACA,EAEAkD,QAAA,SAAAmH,GACA,IAAA1O,EAAAC,KAGA,OAFAD,EAAAuK,SAAA,EAEAvK,EAAA2C,SAAA0E,OAAAqH,GAAAlE,MAAA,WACAxK,EAAAuK,SAAA,CACA,GACA,EAEA7J,aAAA,WACApC,EAAA+B,GAAAK,aAAAJ,KAAAL,MAEAA,KAAAH,QAAAsD,aACAnD,KAAAiC,OAAAyM,YAAA1O,KAAAJ,QAEA,EAEAiH,aAAA,SAAAlE,GACAnF,EAAAmF,EAAAsC,eAAAoJ,YA7zBA,UA6zBA,eAAA1L,EAAA/B,KACA,EAEAyC,uBAAA,WACA,IAAAsL,EAAA3O,KAAAJ,QAAA4C,GAAA,cAAAxC,KAAAJ,QAAA4C,GAAA,cAEAxC,KAAA2E,UAAAgK,EACA3O,KAAA4O,aAEA5O,KAAA6O,YAEA,EAEArO,SAAA,WACA,IAGAV,EAHAC,EAAAC,KACAJ,EAAAG,EAAAH,QACAkP,EAAAlP,EAAA,IAGAE,EAAAF,EAAAmP,UAEAvM,GAAA,yBACA1C,EAAAF,EAAAoP,KAAA,YAAAD,UAGAjP,EAAAQ,KAAA,YAAA,GAEAR,EAAA,GAAAmP,MAAAC,QAAAJ,EAAAG,MAAAC,QACAtP,EAAAuP,IAAA,CACAC,MAAA,GACA/K,OAAAyK,EAAAG,MAAA5K,SAGAtE,EAAAsP,SAAAtP,EAAAH,QACAG,EAAAD,QAAAA,EACAgB,SAAA,0BACAA,SAAAgO,EAAA9B,WACAnL,YAAA,yBACA,EAEAK,YAAA,WACAlC,KAAAoF,oBAAA,EACA/G,EAAA+B,GAAA8B,YAAA7B,KAAAL,MACAA,KAAAJ,QAAA2F,QAAA,QACA,IAGAnH,EAAAkR,OAAA7P,GAEA/B,EAAA6R,cAAAC,eAAA,eAAA,YAEA9R,EAAA6R,cAAAE,eAAA,eAAA,CAAA,CACA3I,KAAA,UACA4I,OAAAhS,EAAA6R,cAAAI,cAAAC,OAAA,CAAA,CAAA,OAAA,YAEA,CAx4BA,CAw4BAjS,OAAAD,MAAAmS,QACA,IAAAC,QAAApS,aAEAT,SAAA6S","file":"kendo.autocomplete.js","sourcesContent":["import './kendo.list.js';\nimport './kendo.mobile.scroller.js';\nimport './kendo.virtuallist.js';\nimport { a as addInputPrefixSuffixContainers } from './kendo.prefix-suffix-containers.chunk.js';\n\nconst __meta__ = {\n    id: \"autocomplete\",\n    name: \"AutoComplete\",\n    category: \"web\",\n    description: \"The AutoComplete widget provides suggestions depending on the typed text.It also allows multiple value entries.\",\n    depends: [\"list\", \"prefix-suffix-containers.chunk\"],\n    features: [ {\n        id: \"mobile-scroller\",\n        name: \"Mobile scroller\",\n        description: \"Support for kinetic scrolling in mobile device\",\n        depends: [ \"mobile.scroller\" ]\n    }, {\n        id: \"virtualization\",\n        name: \"VirtualList\",\n        description: \"Support for virtualization\",\n        depends: [ \"virtuallist\" ]\n    } ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        encode = kendo.htmlEncode,\n        support = kendo.support,\n        caret = kendo.caret,\n        activeElement = kendo._activeElement,\n        placeholderSupported = support.placeholder,\n        ui = kendo.ui,\n        List = ui.List,\n        keys = kendo.keys,\n        DataSource = kendo.data.DataSource,\n        ARIA_DISABLED = \"aria-disabled\",\n        ARIA_READONLY = \"aria-readonly\",\n        CHANGE = \"change\",\n        DISABLED = \"disabled\",\n        READONLY = \"readonly\",\n        FOCUSED = \"k-focus\",\n        SELECTED = \"k-selected\",\n        STATEDISABLED = \"k-disabled\",\n        AUTOCOMPLETEVALUE = \"off\",\n        HOVER = \"k-hover\",\n        ns = \".kendoAutoComplete\",\n        HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns;\n\n    function indexOfWordAtCaret(caretIdx, text, separator) {\n        return separator ? text.substring(0, caretIdx).split(separator).length - 1 : 0;\n    }\n\n    function wordAtCaret(caretIdx, text, separator) {\n        return text.split(separator)[indexOfWordAtCaret(caretIdx, text, separator)];\n    }\n\n    function replaceWordAtCaret(caretIdx, text, word, separator, defaultSeparator) {\n        var words = text.split(separator);\n\n        words.splice(indexOfWordAtCaret(caretIdx, text, separator), 1, word);\n\n        if (separator && words[words.length - 1] !== \"\") {\n            words.push(\"\");\n        }\n\n        return words.join(defaultSeparator);\n    }\n\n    var AutoComplete = List.extend({\n        init: function(element, options) {\n            var that = this, wrapper, disabled;\n\n            that.ns = ns;\n            options = Array.isArray(options) ? { dataSource: options } : options;\n\n            List.fn.init.call(that, element, options);\n\n            element = that.element;\n            options = that.options;\n\n            options.placeholder = options.placeholder || element.attr(\"placeholder\");\n            options.inputMode = options.inputMode || element.attr(\"inputmode\") || \"text\";\n\n            if (placeholderSupported) {\n                element.attr(\"placeholder\", options.placeholder);\n            }\n\n            that._wrapper();\n            that._clearButton();\n\n            that._dataSource();\n            that._ignoreCase();\n\n            element[0].type = \"text\";\n            wrapper = that.wrapper;\n\n            that._popup();\n\n            element\n                .addClass(\"k-input-inner\")\n                .on(\"keydown\" + ns, that._keydown.bind(that))\n                .on(\"keypress\" + ns, that._keypress.bind(that))\n                .on(\"input\" + ns, that._search.bind(that))\n                .on(\"paste\" + ns, that._search.bind(that))\n                .on(\"focus\" + ns, function() {\n                    that._prev = that._accessor();\n                    that._oldText = that._prev;\n                    that._placeholder(false);\n                    wrapper.addClass(FOCUSED);\n                })\n                .on(\"focusout\" + ns, function(ev) {\n                    if (that.filterInput && ev.relatedTarget === that.filterInput[0]) {\n                        return;\n                    }\n\n                    that._change();\n                    that._placeholder();\n                    that.close();\n                    wrapper.removeClass(FOCUSED);\n                })\n                .attr({\n                    autocomplete: AUTOCOMPLETEVALUE,\n                    role: \"combobox\",\n                    \"aria-expanded\": false,\n                    inputmode: options.inputMode\n                });\n\n            that._clear.on(\"click\" + ns + \" touchend\" + ns, that._clearValue.bind(that));\n            that._clear.on(\"mousedown\" + ns, that._clearValueMouseDownHandler.bind(that));\n            that._enable();\n\n            that._old = that._accessor();\n\n            that._placeholder();\n\n            that._initList();\n\n            disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n                that.enable(false);\n            }\n\n            that.listView.bind(\"click\", function(e) { e.preventDefault(); });\n\n            that._resetFocusItemHandler = that._resetFocusItem.bind(that);\n            addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._inputValuesContainer, suffixInsertAfter: options.clearButton ? that._clear : that.element });\n\n            kendo.notify(that);\n            that._toggleCloseVisibility();\n            that._applyCssClasses();\n\n            if (options.label) {\n                that._label();\n            }\n\n            that._aria();\n        },\n\n        options: {\n            name: \"AutoComplete\",\n            enabled: true,\n            suggest: false,\n            template: \"\",\n            groupTemplate: (data) => encode(data),\n            fixedGroupTemplate: (data) => encode(data),\n            prefixOptions: {\n                separator: true\n            },\n            suffixOptions: {\n                separator: true\n            },\n            dataTextField: \"\",\n            minLength: 1,\n            enforceMinLength: false,\n            delay: 200,\n            height: 200,\n            filter: \"startswith\",\n            ignoreCase: true,\n            highlightFirst: false,\n            separator: null,\n            placeholder: \"\",\n            animation: {},\n            virtual: false,\n            value: null,\n            clearButton: true,\n            autoWidth: false,\n            popup: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            label: null,\n        },\n\n        _clearValueMouseDownHandler: function(ev) {\n            var that = this;\n\n            if (ev && ev.currentTarget && ev.currentTarget.classList.contains('k-clear-value')) {\n                that._clearValueTrigger = true;\n            } else {\n                that._clearValueTrigger = false;\n            }\n        },\n\n        _onActionSheetCreate: function() {\n            var that = this;\n\n            if (that.filterInput) {\n                that.filterInput\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"keypress\" + ns, that._keypress.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._search.bind(that))\n                    .attr({\n                        autocomplete: AUTOCOMPLETEVALUE,\n                        role: \"combobox\",\n                        \"aria-expanded\": false\n                    });\n\n                that.popup.bind(\"activate\", () => {\n                    that.filterInput.val(that.element.val());\n                    that.filterInput.trigger(\"focus\");\n                });\n\n                that.popup.bind(\"deactivate\", () => {\n                    that.element.trigger(\"focus\");\n                });\n            }\n        },\n\n        _onCloseButtonPressed: function() {\n            var that = this;\n\n            if (that.filterInput && activeElement() === that.filterInput[0]) {\n                that.element.val(that.filterInput.val());\n            }\n        },\n\n        _popup: function() {\n            List.fn._popup.call(this);\n            this.popup.element.addClass(\"k-autocomplete-popup\");\n        },\n\n        _dataSource: function() {\n            var that = this;\n\n            if (that.dataSource && that._refreshHandler) {\n                that._unbindDataSource();\n            } else {\n                that._progressHandler = that._showBusy;\n                that._errorHandler = that._hideBusy;\n            }\n\n            that.dataSource = DataSource.create(that.options.dataSource)\n                .bind(\"progress\", that._progressHandler)\n                .bind(\"error\", that._errorHandler);\n        },\n\n        setDataSource: function(dataSource) {\n            this.options.dataSource = dataSource;\n            this._dataSource();\n\n            this.listView.setDataSource(this.dataSource);\n        },\n\n        events: [\n            \"open\",\n            \"close\",\n            CHANGE,\n            \"select\",\n            \"filtering\",\n            \"dataBinding\",\n            \"dataBound\"\n        ],\n\n        setOptions: function(options) {\n            var listOptions = this._listOptions(options);\n\n            List.fn.setOptions.call(this, options);\n\n            this.listView.setOptions(listOptions);\n            this._accessors();\n            this._aria();\n            this._clearButton();\n        },\n\n        _listOptions: function(options) {\n            var listOptions = List.fn._listOptions.call(this, $.extend(options, {\n                skipUpdateOnBind: true\n            }));\n\n            listOptions.dataValueField = listOptions.dataTextField;\n            listOptions.selectedItemChange = null;\n\n            return listOptions;\n        },\n\n        _editable: function(options) {\n            var that = this,\n                element = that.element,\n                wrapper = that.wrapper.off(ns),\n                readonly = options.readonly,\n                disable = options.disable;\n\n            if (!readonly && !disable) {\n                wrapper\n                    .removeClass(STATEDISABLED)\n                    .on(HOVEREVENTS, that._toggleHover);\n\n                element.prop(DISABLED, false)\n                       .prop(READONLY, false)\n                       .attr(ARIA_DISABLED, false)\n                       .attr(ARIA_READONLY, false);\n            } else {\n                wrapper\n                    .addClass(disable ? STATEDISABLED : \"\")\n                    .removeClass(disable ? \"\" : STATEDISABLED);\n\n                element.attr(DISABLED, disable)\n                       .attr(READONLY, readonly)\n                       .attr(ARIA_DISABLED, disable)\n                       .attr(ARIA_READONLY, readonly);\n            }\n\n            that._toggleCloseVisibility();\n        },\n\n        close: function() {\n            var that = this;\n            var current = that.listView.focus();\n\n            if (current) {\n                current.removeClass(SELECTED);\n            }\n\n            that.popup.close();\n            that._deactivateItem();\n        },\n\n        destroy: function() {\n            var that = this;\n\n            that.element.off(ns);\n            that._clear.off(ns);\n            that.wrapper.off(ns);\n\n            if (that.filterInput) {\n                that.filterInput.off(ns);\n            }\n\n            List.fn.destroy.call(that);\n        },\n\n        refresh: function() {\n            this.listView.refresh();\n        },\n\n        select: function(li) {\n            this._select(li);\n        },\n\n        search: function(word) {\n            let that = this,\n            options = that.options,\n            ignoreCase = options.ignoreCase,\n            separator = that._separator(),\n            length,\n            lowerCaseValue,\n            accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering,\n            element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.element;\n\n            word = word || that._accessor();\n\n            clearTimeout(that._typingTimeout);\n\n            if (separator) {\n                word = wordAtCaret(caret(element)[0], word, separator);\n            }\n\n            length = word.length;\n\n            if ((!options.enforceMinLength && !length) || length >= options.minLength) {\n                that._open = true;\n\n                that._mute(function() {\n                    this.listView.value([]);\n                });\n\n                lowerCaseValue = accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase();\n\n                that._filterSource({\n                    value: ignoreCase ? lowerCaseValue : word,\n                    operator: options.filter,\n                    field: options.dataTextField,\n                    ignoreCase: ignoreCase\n                });\n\n                that.one(\"close\", that._unifySeparators.bind(that));\n            }\n            that._toggleCloseVisibility();\n        },\n\n        suggest: function(word) {\n            var that = this,\n                key = that._last,\n                value = that._accessor(),\n                currentValue = that.value(),\n                element = that.element[0],\n                caretIdx = caret(element)[0],\n                separator = that._separator(),\n                words = value.split(separator),\n                wordIndex = indexOfWordAtCaret(caretIdx, value, separator),\n                selectionEnd = caretIdx,\n                idx,\n                accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n\n            if (key == keys.BACKSPACE || key == keys.DELETE) {\n                that._last = undefined$1;\n                return;\n            }\n\n            word = word || \"\";\n\n            if (typeof word !== \"string\") {\n                if (word[0]) {\n                    word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];\n                }\n\n                word = word ? that._text(word) : \"\";\n            }\n\n            if (caretIdx <= 0) {\n                caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;\n            }\n\n            idx = value.substring(0, caretIdx).lastIndexOf(that._defaultSeparator());\n            idx = idx > -1 ? caretIdx - (idx + that._defaultSeparator().length) : caretIdx;\n            value = words[wordIndex].substring(0, idx);\n\n            if (word) {\n                word = word.toString();\n                idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());\n                if (idx > -1) {\n                    word = word.substring(idx + value.length);\n\n                    selectionEnd = caretIdx + word.length;\n\n                    value += word;\n                }\n\n                if (separator && words[words.length - 1] !== \"\") {\n                    words.push(\"\");\n                }\n\n            }\n\n            words[wordIndex] = value;\n\n            if (typeof that.options.separator == 'object' && that.options.separator != null) {\n                if (currentValue.length > 1) {\n                    let lastSeparator = [...currentValue.matchAll(separator.source)].pop();\n                    if (lastSeparator) {\n                        that._accessor(words.slice(0, -1).join(that._defaultSeparator() || \"\") + lastSeparator + words[words.length - 1]);\n                    } else {\n                        that._accessor(words.slice(0, -1).join(that._defaultSeparator() || \"\"));\n                    }\n                } else {\n                  that._accessor(words.join(this._defaultSeparator() || \"\"));\n                }\n            } else {\n                that._accessor(words.join(separator || \"\"));\n            }\n\n            if (element === activeElement()) {\n                caret(element, caretIdx, selectionEnd);\n            }\n        },\n\n        value: function(value) {\n            if (value !== undefined$1) {\n                this.listView.value(value);\n\n                this._accessor(value);\n                this._old = this._accessor();\n                this._oldText = this._accessor();\n            } else {\n                return this._accessor();\n            }\n            this._toggleCloseVisibility();\n            this._refreshFloatingLabel();\n        },\n\n        _click: function(e) {\n            var item = e.item;\n            var that = this;\n            var element = that.element;\n            var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));\n\n            e.preventDefault();\n\n            that._active = true;\n\n            if (that.trigger(\"select\", { dataItem: dataItem, item: item })) {\n                that.close();\n                return;\n            }\n            that._oldText = element.val();\n            that._select(item).done(function() {\n                that._blur();\n\n                caret(element, element.val().length);\n            });\n        },\n\n        _clearText: $.noop,\n\n        _highlightFirst: function() {\n            var index = this.options.highlightFirst ? 0 : -1;\n\n            this.listView.focus(index);\n        },\n\n        _resetFocusItem: function() {\n            if (this.options.virtual) {\n                this.listView.scrollTo(0);\n            }\n\n            this._highlightFirst();\n        },\n\n        _listBound: function() {\n            var that = this;\n            var popup = that.popup;\n            var options = that.options;\n            var data = that.dataSource.flatView();\n            var length = data.length;\n            var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;\n            var isActive = that.element[0] === activeElement() || that.filterInput && that.filterInput[0] === activeElement();\n            var action;\n\n            that._renderFooter();\n            that._renderNoData();\n            that._toggleNoData(!length);\n            that._toggleHeader(!!groupsLength && !!length);\n\n            that._resizePopup();\n\n            popup.position();\n\n            if (length) {\n                if (options.suggest && isActive && that._inputValue()) {\n                    that.suggest(data[0]);\n                }\n\n                that._highlightFirst();\n            }\n\n            if (that._open) {\n                that._open = false;\n                action = that._allowOpening() ? \"open\" : \"close\";\n\n                if (that._typingTimeout && !isActive) {\n                    action = \"close\";\n                }\n\n                if (length) {\n                    that._resetFocusItem();\n\n                    if (options.virtual) {\n                        that.popup\n                            .unbind(\"activate\", that._resetFocusItemHandler)\n                            .one(\"activate\", that._resetFocusItemHandler);\n                    }\n                }\n\n                popup[action]();\n                that._typingTimeout = undefined$1;\n            }\n\n            if (that._touchScroller) {\n                that._touchScroller.reset();\n            }\n\n            that._hideBusy();\n\n            that.trigger(\"dataBound\");\n        },\n\n        _mute: function(callback) {\n            this._muted = true;\n            callback.call(this);\n            this._muted = false;\n        },\n\n        _listChange: function() {\n            var isActive = this._active || this.element[0] === activeElement();\n\n            if (isActive && !this._muted) {\n                this._selectValue(this.listView.selectedDataItems()[0]);\n            }\n        },\n\n        _selectValue: function(dataItem) {\n            var separator = this._separator();\n            var text = \"\";\n\n            if (dataItem) {\n                text = this._text(dataItem);\n            }\n\n            if (text === null) {\n                text = \"\";\n            }\n\n            if (separator) {\n                text = replaceWordAtCaret(caret(this.element)[0], this._accessor(), text, separator, this._defaultSeparator());\n            }\n\n            this._prev = text;\n            this._accessor(text);\n            this._placeholder();\n        },\n\n        _unifySeparators: function() {\n            this._accessor(this.value().split(this._separator()).join(this._defaultSeparator()));\n            return this;\n        },\n\n        _preselect: function(value, text) {\n            this._inputValue(text);\n            this._accessor(value);\n\n            this._old = this.oldText = this._accessor();\n\n            this.listView.setValue(value);\n            this._placeholder();\n        },\n\n        _change: function() {\n            var that = this;\n            var value = that._unifySeparators().value();\n            var trigger = value !== List.unifyType(that._old, typeof value);\n\n            var valueUpdated = trigger && !that._typing;\n            var itemSelected = that._oldText !== value;\n            var clearValueTrigger = that._clearValueTrigger;\n\n            that._old = value;\n            that._oldText = value;\n\n            if (that.filterInput && activeElement() === that.filterInput[0]) {\n                that.element.val(that.filterInput.val());\n            }\n\n            if ((valueUpdated || itemSelected) && !clearValueTrigger) {\n                // trigger the DOM change event so any subscriber gets notified\n                that.element.trigger(CHANGE);\n            }\n\n            if (trigger && !clearValueTrigger) {\n                that.trigger(CHANGE);\n            }\n\n            that.typing = false;\n            that._toggleCloseVisibility();\n        },\n\n        _accessor: function(value) {\n            var that = this,\n                element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput[0] : that.element[0];\n\n            if (value !== undefined$1) {\n                element.value = value === null ? \"\" : value;\n                that._placeholder();\n            } else {\n                value = element.value;\n\n                if (element.className.indexOf(\"k-readonly\") > -1) {\n                    if (value === that.options.placeholder) {\n                        return \"\";\n                    } else {\n                        return value;\n                    }\n                }\n\n                return value;\n            }\n        },\n\n        _keydown: function(e) {\n            var that = this;\n            var key = e.keyCode;\n            var listView = that.listView;\n            var visible = that.popup.visible();\n            var current = listView.focus();\n\n            that._last = key;\n\n            if (key === keys.DOWN) {\n                if (visible) {\n                    this._move(current ? \"focusNext\" : \"focusFirst\");\n                } else if (that.value()) {\n                    that._filterSource({\n                        value: that.ignoreCase ? that.value().toLowerCase() : that.value(),\n                        operator: that.options.filter,\n                        field: that.options.dataTextField,\n                        ignoreCase: that.ignoreCase\n                    }).done(function() {\n                        if (that._allowOpening()) {\n                            that._resetFocusItem();\n                            that.popup.open();\n                        }\n                    });\n                }\n                e.preventDefault();\n            } else if (key === keys.ESC ) {\n                if (visible) {\n                    e.preventDefault();\n                    that.close();\n                } else {\n                    that._clearValue();\n                }\n            } else if (e.altKey && key === keys.UP && visible) {\n                e.preventDefault();\n                that.close();\n            } else if (key === keys.UP) {\n                if (visible) {\n                    this._move(current ? \"focusPrev\" : \"focusLast\");\n                }\n                e.preventDefault();\n            } else if (key === keys.HOME) {\n                this._move(\"focusFirst\");\n            } else if (key === keys.END) {\n                this._move(\"focusLast\");\n            } else if (key === keys.ENTER || key === keys.TAB) {\n\n                if (key === keys.ENTER && visible) {\n                    e.preventDefault();\n                }\n\n                if (visible && current) {\n                    var dataItem = listView.dataItemByIndex(listView.getElementIndex(current));\n                    if (that.trigger(\"select\", { dataItem: dataItem, item: current })) {\n                        return;\n                    }\n\n                    this._select(current);\n                }\n\n                this._blur();\n            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n                e.preventDefault();\n\n                var direction = key === keys.PAGEDOWN ? 1 : -1;\n                listView.scrollWith(direction * listView.screenHeight());\n            } else {\n                // In some cases when the popup is opened resize is triggered which will cause it to close\n                // Setting the below flag will prevent this from happening\n                that.popup._hovered = true;\n                that._search();\n            }\n        },\n\n        _keypress: function() {\n            this._oldText = this.element.val();\n            this._typing = true;\n        },\n\n        _move: function(action) {\n            this.listView[action]();\n\n            if (this.options.suggest && this.listView.focus() == null && action == \"focusNext\") {\n                this.listView.focus(0);\n                this.suggest(this.listView._view[0].item);\n            } else if (this.options.suggest && this.listView.focus() == null && action == \"focusPrev\") {\n                let index = this.listView._view.length - 1;\n                this.listView.focus(index);\n                this.suggest(this.listView._view[index].item);\n            } else if (this.options.suggest && (action == \"focusFirst\" || action == \"focusLast\")) {\n               caret(this.element);\n            } else if (this.options.suggest && this.listView.focus() != null) {\n                this.suggest(this.listView.focus());\n            }\n        },\n\n        _placeholder: function(show) {\n            if (placeholderSupported) {\n                return;\n            }\n\n            var that = this,\n                element = that.element,\n                placeholder = that.options.placeholder,\n                value;\n\n            if (placeholder) {\n                value = element.val();\n\n                if (show === undefined$1) {\n                    show = !value;\n                }\n\n                if (!show) {\n                    if (value !== placeholder) {\n                        placeholder = value;\n                    } else {\n                        placeholder = \"\";\n                    }\n                }\n\n                if (value === that._old && !show) {\n                    return;\n                }\n\n                element.toggleClass(\"k-readonly\", show)\n                       .val(placeholder);\n\n                if (!placeholder && element[0] === document.activeElement) {\n                    caret(element[0], 0, 0);\n                }\n            }\n        },\n\n        _separator: function() {\n            var separator = this.options.separator;\n            if (separator instanceof Array) {\n               return new RegExp(separator.join(\"|\"), 'gi');\n            }\n            return separator;\n        },\n\n        _defaultSeparator: function() {\n            var separator = this.options.separator;\n            if (separator instanceof Array) {\n                return separator[0];\n            }\n            return separator;\n        },\n\n        _inputValue: function() {\n            return this.element.val();\n        },\n\n        _search: function() {\n            var that = this;\n            clearTimeout(that._typingTimeout);\n\n            that._typingTimeout = setTimeout(function() {\n                if (that._prev !== that._accessor()) {\n                    that._prev = that._accessor();\n                    that.search();\n                }\n            }, that.options.delay);\n        },\n\n        _select: function(candidate) {\n            var that = this;\n            that._active = true;\n\n            return that.listView.select(candidate).done(function() {\n                that._active = false;\n            });\n        },\n\n        _clearButton: function() {\n            List.fn._clearButton.call(this);\n\n            if (this.options.clearButton) {\n                this._clear.insertAfter(this.element);\n            }\n        },\n\n        _toggleHover: function(e) {\n            $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n        },\n\n        _toggleCloseVisibility: function() {\n            var preventShow = this.element.is(\":disabled\") || this.element.is(\"[readonly]\");\n\n            if (this.value() && !preventShow) {\n                this._showClear();\n            } else {\n                this._hideClear();\n            }\n        },\n\n        _wrapper: function() {\n            var that = this,\n                element = that.element,\n                DOMelement = element[0],\n                wrapper;\n\n            wrapper = element.parent();\n\n            if (!wrapper.is(\"span.k-autocomplete\")) {\n                wrapper = element.wrap(\"<span />\").parent();\n            }\n\n            wrapper.attr(\"tabindex\", -1);\n\n            wrapper[0].style.cssText = DOMelement.style.cssText;\n            element.css({\n                width: \"\",\n                height: DOMelement.style.height\n            });\n\n            that._focused = that.element;\n            that.wrapper = wrapper\n                .addClass(\"k-autocomplete k-input\")\n                .addClass(DOMelement.className)\n                .removeClass('input-validation-error');\n        },\n\n        _clearValue: function() {\n            this._clearValueTrigger = false;\n            List.fn._clearValue.call(this);\n            this.element.trigger(\"focus\");\n        }\n    });\n\n    ui.plugin(AutoComplete);\n\n    kendo.cssProperties.registerPrefix(\"AutoComplete\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"AutoComplete\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}
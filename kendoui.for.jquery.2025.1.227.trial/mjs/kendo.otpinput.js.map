{"version":3,"sources":["raw-mjs/kendo.otpinput.js"],"names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","Widget","ui","TextBox","HIDDEN","keys","OTPINPUT","OTPSEPARATOR","INPUT","NS","CHANGE","INPUTGROUP","STATEINVALID","INTEGER_REGEXP","FOCUS_RIGHT","FOCUS_LEFT","FOCUS","OTPInput","extend","init","element","options","that","this","fn","call","value","val","separator","isPresent","inputMode","attr","_wrapper","_renderGroups","items","_attachHandlers","on","_change","bind","events","type","placeholder","readonly","enable","space","size","rounded","fillMode","inputs","_inputs","isEmpty","each","getKendoTextBox","focus","select","groupLength","_groupLength","_value","_emptyValues","_validate","values","toString","split","length","splice","forEach","input","index","at","newValue","destroy","map","closest","remove","wrapper","find","unwrap","removeClass","removeAttr","setOptions","deepExtend","e","trigger","sizeClass","cssProperties","defaultValues","addClass","wrap","parent","isInteger","i","_renderInput","push","append","group","Array","isArray","reduce","n","otpCharacterCounter","item","_renderSeparator","maxLength","widgetWrapper","separatorWrapper","isFunction","_input","currentTarget","oldValue","_oldValue","_blinkInvalidState","inputGroups","focusedElement","currentIndex","join","_moveFocus","itemToFocus","inputSelector","_focus","_beforeInput","_keyDown","_paste","test","isRtl","support","pastedValue","clipboardData","originalEvent","getData","preventDefault","_shiftFocus","emptyInputs","filter","isBlank","emptyInput","first","key","keyCode","which","shouldTriggerChange","target","ctrlKey","shiftKey","TAB","LEFT","RIGHT","DELETE","is","BACKSPACE","elements","direction","eq","toWrapper","hasClass","_addInvalidState","clearTimeout","_invalidStateTimeout","setTimeout","_removeInvalidState","inputWrappers","registerPrefix","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.otpinput.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.textbox.js';\n\nconst __meta__ = {\n    id: \"otpinput\",\n    name: \"OTPInput\",\n    category: \"web\",\n    description: \"The OTPInput widget provides a rich input for selecting values or ranges of values.\",\n    depends: [\"core\", \"textbox\"]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        TextBox = kendo.ui.TextBox,\n        HIDDEN = \"k-hidden\",\n        ui = kendo.ui,\n        keys = kendo.keys,\n        KOTP = \"k-otp\",\n        OTPINPUT = \"k-otp-input\",\n        OTPSEPARATOR = \"k-otp-separator\",\n        INPUT = \"k-input-inner\",\n        NS = \".kendoOtpInput\",\n        CHANGE = \"change\",\n        INPUTGROUP = \"k-input-group\",\n        STATEINVALID = \"k-invalid\",\n        INTEGER_REGEXP = /^[0-9]\\d*$/,\n        ARIA_HIDDEN = \"aria-hidden\",\n        ARIA_LABEL = \"aria-label\",\n        ROLE = \"role\",\n        FOCUS_RIGHT = \"right\",\n        FOCUS_LEFT = \"left\",\n        FOCUS = \"focus\";\n\n\n        var OTPInput = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                Widget.fn.init.call(that, element, options);\n                options = $.extend(true, {}, options);\n\n                that.options.value = options.value || that.element.val();\n                that.options.separator = kendo.isPresent(options.separator) ? options.separator : null;\n                that.options.inputMode = options.inputMode || $(element).attr(\"inputmode\") || \"text\";\n\n                that._wrapper();\n                that._renderGroups(that.options.items);\n                that._attachHandlers();\n                that.value(that.options.value);\n\n                that.element.on(CHANGE + NS, that._change.bind(that));\n            },\n\n            events: [\n                CHANGE\n            ],\n\n            options: {\n                name: \"OTPInput\",\n                type: \"text\",\n                value: '',\n                placeholder: \"\",\n                separator: null,\n                readonly: false,\n                enable: true,\n                space: false,\n                size: \"medium\",\n                rounded: \"medium\",\n                fillMode: \"solid\"\n            },\n            enable: function(enable) {\n                let that = this,\n                    inputs = that._inputs;\n\n                if (!kendo.isEmpty(inputs)) {\n                    $(inputs).each(function()\n                    {\n                        let widget = this.getKendoTextBox();\n                        widget.enable(enable);\n                    });\n                }\n            },\n            readonly: function(readonly) {\n                let that = this,\n                    inputs = that._inputs;\n\n                if (!kendo.isEmpty(inputs)) {\n                    $(inputs).each(function()\n                    {\n                        let widget = this.getKendoTextBox();\n                        widget.readonly(readonly);\n                    });\n                }\n            },\n            focus: function() {\n                let that = this,\n                    inputs = that._inputs;\n\n                if (!kendo.isEmpty(inputs)) {\n                    inputs[0]\n                        .focus()\n                        .select();\n                }\n            },\n            value: function(value) {\n                let that = this,\n                    groupLength = that._groupLength,\n                    type = that.options.type;\n\n                if (value === undefined$1) {\n                    return that._value;\n                }\n\n                if (value === null) {\n                    that.element.val(value);\n                    that._value = value;\n                    that._emptyValues();\n                }\n\n                if (groupLength > 0 && value) {\n                    that._emptyValues();\n\n                    if (!that._validate(type, value)) {\n                        return;\n                    }\n\n                    let values = value.toString().split(\"\");\n\n                    if (values.length > groupLength) {\n                        values = values.splice(0, groupLength);\n                    }\n\n                    that._inputs.forEach(function(input, index) {\n                        let value = values.at(index);\n                        $(input)\n                            .val(value);\n                    });\n\n                    let newValue = '';\n\n                    that._inputs.forEach(function(input) {\n                        newValue = newValue += $(input).val();\n                    });\n\n                    that.element.val(newValue);\n                    that._value = newValue;\n                }\n            },\n            destroy: function() {\n                let that = this,\n                    inputs = that._inputs;\n\n                if (!kendo.isEmpty(inputs)) {\n                    inputs.forEach(function(input) {\n                        let element = $(input)[0],\n                            textBox = $(element).getKendoTextBox();\n\n                        textBox.destroy();\n                    });\n\n                    let inputWrappers = inputs\n                        .map(function(input) {\n                            return $(input)[0]\n                                .closest(`.${OTPINPUT}`);\n                        });\n\n                    inputWrappers.forEach(function(element) {\n                        $(element).remove();\n                    });\n\n                    that.wrapper\n                        .find(`.${INPUTGROUP}`)\n                        .remove();\n\n                    that.wrapper\n                        .find(`.${OTPSEPARATOR}`)\n                        .remove();\n\n                    that.element\n                        .unwrap()\n                        .removeClass(HIDDEN)\n                        .removeAttr(\"type\")\n                        .removeAttr(\"aria-hidden\");\n\n                    Widget.fn.destroy.call(that);\n                }\n            },\n            setOptions: function(options) {\n                let that = this;\n\n                that.destroy();\n\n                kendo.deepExtend(this.options, options);\n                that.init(that.element, options);\n            },\n            _change: function(e) {\n                let that = this,\n                    newValue = that.element.val();\n\n                that._value = newValue;\n                that.trigger(CHANGE, { value: newValue });\n            },\n            _wrapper: function() {\n                let that = this,\n                    element = that.element,\n                    wrapper;\n\n                let sizeClass = kendo.cssProperties.defaultValues['size'][that.options.size];\n\n                wrapper = element.addClass(HIDDEN)\n                       .attr(\"type\", \"hidden\")\n                       .attr(ARIA_HIDDEN, true)\n                       .wrap(`<div class='k-otp k-otp-${sizeClass || \"md\"}' ${ROLE}=\"group\" ></div>`)\n                       .parent();\n\n                that.wrapper = wrapper;\n            },\n            _renderGroups: function(items) {\n                let that = this,\n                    separator = that.options.separator,\n                    inputs = [];\n\n                that._inputs = [];\n\n                if (kendo.isInteger(items)) {\n                    that._groupLength = items;\n                    for (let i = 0; i < items; i++) {\n                        let input = that._renderInput(i + 1);\n                        inputs.push(input);\n                        that._inputs.push($(input).find(`.${INPUT}`));\n                    }\n\n                    let space = that.options.space;\n\n                    if (!space) {\n                        let group = $(`<div class=\"${INPUTGROUP} k-input-group-solid\"></div>`)\n                        .append(inputs);\n\n                        that.wrapper.append(group);\n                    } else {\n                        that.wrapper.append(inputs);\n                    }\n\n                    inputs = [];\n                } else if (Array.isArray(items)) {\n                    that._groupLength = items.reduce((n, { groupLength }) => n + groupLength, 0);\n\n                    let otpCharacterCounter = 0;\n                    items.forEach(function(item, index) {\n                        if (item.groupLength) {\n                            for (let i = 0; i < item.groupLength; i++) {\n                                ++otpCharacterCounter;\n                                let input = that._renderInput(otpCharacterCounter);\n                                inputs.push(input);\n                                that._inputs.push($(input).find(`.${INPUT}`));\n                            }\n\n                            let space = that.options.space;\n\n                            if (!space) {\n                                let group = $(`<div class=\"${INPUTGROUP} k-input-group-solid\"></div>`)\n                                    .append(inputs);\n\n                                that.wrapper.append(group);\n\n                                if (kendo.isPresent(separator) && !(index == items.length - 1)) {\n                                    that.wrapper.append(that._renderSeparator());\n                                }\n                            } else {\n                                if (!(index == items.length - 1)) {\n                                    inputs.push(that._renderSeparator());\n                                }\n                                that.wrapper.append(inputs);\n                            }\n                            inputs = [];\n                        }\n                    });\n                    otpCharacterCounter = 0;\n                }\n            },\n            _renderInput: function(index) {\n                let that = this,\n                    inputMode = that.options.inputMode,\n                    input;\n\n                input = $(`<input>`)\n                        .addClass(INPUT)\n                        .attr(\"inputmode\", inputMode)\n                        .attr(\"type\", that.options.type == \"password\" ? \"password\" : \"text\")\n                        .attr(ARIA_LABEL, that.options.type == \"numeric\" ? `Enter Otp Numerical Character ${index}` : `Enter Otp Character ${index}`)\n                        .attr(\"placeholder\", that.options.placeholder)\n                        .attr(\"autocomplete\", \"off\")\n                        .attr(\"maxlength\", 1);\n\n\n                let options = $.extend({}, {\n                    maxLength: 1,\n                    size: that.options.size,\n                    rounded: that.options.rounded,\n                    fillMode: that.options.fillMode,\n                    enable: that.options.enable,\n                    readonly: that.options.readonly\n                });\n\n\n                let widget = new TextBox(input, options),\n                    widgetWrapper = widget.wrapper;\n\n                widgetWrapper\n                    .removeClass(INPUT)\n                    .addClass(OTPINPUT);\n\n                return widgetWrapper;\n            },\n            _renderSeparator: function() {\n                let that = this,\n                    separator = that.options.separator;\n\n                    let separatorWrapper = $(`<div class=\"${OTPSEPARATOR}\"></div>`);\n\n                    if (kendo.isPresent(separator)) {\n                        kendo.isFunction(separator) ? separatorWrapper.append(separator()) : separatorWrapper.append(separator);\n                    }\n\n                    return separatorWrapper;\n            },\n            _input: function(e) {\n                let that = this,\n                    input = e.currentTarget,\n                    groupLength = that._inputs.length,\n                    oldValue = that._oldValue,\n                    value = e.currentTarget.value,\n                    type = that.options.type;\n\n                if (!that._validate(type, value)) {\n                    that._blinkInvalidState(input);\n\n                    $(input).val('');\n\n                    if (oldValue != undefined$1) {\n                        $(input).val(oldValue);\n                        delete that._oldValue;\n                    }\n\n                    $(input).trigger(FOCUS);\n\n                    return;\n                }\n\n                let inputGroups = $(that.wrapper).find(`.${OTPINPUT}`),\n                    focusedElement = inputGroups.find(\":focus\"),\n                    currentIndex = inputGroups.find(`.${INPUT}`).index(focusedElement),\n                    itemToFocus;\n\n                    let newValue = that._inputs\n                        .map(function(item) {\n                            return $(item).val();\n                        })\n                        .join('');\n\n                    if (newValue != that._value) {\n                        that.element.val('');\n                        that.element.val(newValue);\n                        that._value = newValue;\n\n                        that.trigger(CHANGE, { value: newValue });\n                    }\n\n                    that._moveFocus(itemToFocus, currentIndex, groupLength, FOCUS_RIGHT);\n            },\n            _attachHandlers: function() {\n                let that = this,\n                    inputs = that._inputs,\n                    inputSelector = `.${INPUT}`;\n\n                if (!kendo.isEmpty(inputs)) {\n                    that.wrapper\n                        .on(\"focus\" + NS, inputSelector, that._focus.bind(that))\n                        .on(\"beforeinput\" + NS, inputSelector, that._beforeInput.bind(that))\n                        .on(\"input\" + NS, inputSelector, that._input.bind(that))\n                        .on(\"keydown\" + NS, inputSelector, that._keyDown.bind(that))\n                        .on(\"paste\" + NS, inputSelector, that._paste.bind(that));\n                }\n\n            },\n            _beforeInput: function(e) {\n                let that = this,\n                    input = e.currentTarget;\n\n                if (input && $(input).val() != undefined$1) {\n                    let value = $(input).val();\n                    that._oldValue = value;\n                }\n            },\n            _focus: function(e) {\n                let element = e.currentTarget;\n\n                if (element) {\n                    $(element).select();\n                }\n            },\n            _validate: function(type, value) {\n                if (type == \"number\") {\n                    return INTEGER_REGEXP.test(value);\n                }\n\n                return true;\n            },\n            _paste: function(e) {\n                let that = this,\n                    inputs = that._inputs,\n                    readonly = that.options.readonly,\n                    isRtl = kendo.support.isRtl(that.element),\n                    inputGroups = $(that.wrapper).find(`.${OTPINPUT}`),\n                    type = that.options.type,\n                    clipboardData = e.clipboardData || e.originalEvent.clipboardData || window.clipboardData,\n                    pastedValue = clipboardData.getData('text'),\n                    itemToFocus;\n\n                e.preventDefault();\n                if (!pastedValue || readonly == true) {\n                    return;\n                }\n\n                if (!that._validate(type, pastedValue)) {\n                    this._blinkInvalidState.bind(that);\n                    this._blinkInvalidState(that.wrapper);\n                    return;\n                }\n\n                that.value(pastedValue);\n\n                that.trigger(CHANGE, { newValue: that._value });\n\n                if (isRtl) {\n\n                    if (that._value.length == that._inputs.length) {\n                       itemToFocus = that._shiftFocus(inputGroups, 0, FOCUS_LEFT);\n                    } else {\n                        let emptyInputs = inputs\n                             .map(function(input) {\n                                 return $(input);\n                             })\n                             .filter(function(element) {\n                                 let value = element.val();\n                                 return value == '' || kendo.isBlank(value);\n                             });\n\n                         let emptyInput = $(emptyInputs)[0];\n\n                         itemToFocus = $(emptyInput).closest(`.${OTPINPUT}`);\n                     }\n\n                     $(itemToFocus)\n                        .find(\"input\")\n                        .trigger(FOCUS);\n                } else {\n\n                    if (that._value.length == that._inputs.length) {\n                        itemToFocus = that._shiftFocus(inputGroups, inputGroups.length - 2, FOCUS_RIGHT);\n                    } else {\n                       let emptyInputs = inputs\n                            .map(function(input) {\n                                return $(input);\n                            })\n                            .filter(function(element) {\n                                let value = element.val();\n                                return value == '' || kendo.isBlank(value);\n                            });\n\n                        let emptyInput = $(emptyInputs).first()[0];\n\n                        itemToFocus = $(emptyInput).closest(`.${OTPINPUT}`);\n                    }\n\n                    $(itemToFocus)\n                        .find(\"input\")\n                        .trigger(FOCUS);\n                }\n\n            },\n            _keyDown: function(e) {\n                let that = this,\n                    key = e.keyCode || e.which,\n                    input = e.currentTarget,\n                    groupLength = that._inputs.length,\n                    inputGroups = $(that.wrapper).find(`.${OTPINPUT}`),\n                    focusedElement = inputGroups.find(\":focus\"),\n                    shouldTriggerChange = focusedElement.val() != '',\n                    currentIndex = inputGroups.find(`.${INPUT}`).index(focusedElement),\n                    isRtl = kendo.support.isRtl(that.element),\n                    itemToFocus;\n\n                if (e.target != input || e.ctrlKey || (key >= 112 && key <= 123) || (key >= 96 && key <= 111) || e.shiftKey && key == keys.TAB || key == keys.TAB) {\n                    return;\n                }\n\n                if ((key === keys.LEFT && !isRtl) || (e.keyCode === keys.RIGHT && isRtl)) {\n                    itemToFocus = that._shiftFocus(inputGroups, currentIndex, FOCUS_LEFT);\n\n                    that._moveFocus(itemToFocus, currentIndex, groupLength, FOCUS_LEFT);\n\n                    e.preventDefault();\n                } else if ((key === keys.LEFT && isRtl) || (e.keyCode === keys.RIGHT && !isRtl)) {\n                    itemToFocus = that._shiftFocus(inputGroups, currentIndex, FOCUS_RIGHT);\n\n                    that._moveFocus(itemToFocus, currentIndex, groupLength, FOCUS_RIGHT);\n\n                    e.preventDefault();\n                } else if (key === keys.DELETE) {\n                    e.preventDefault();\n                    if (!$(focusedElement).is(\"[readonly]\")) {\n                        focusedElement.val('');\n\n                        let newValue = that._inputs\n                        .map(function(item) {\n                            return $(item).val();\n                        })\n                        .join('');\n\n                        if (shouldTriggerChange) {\n                            that._value = newValue;\n                            that.trigger(CHANGE, { value: newValue });\n                        }\n\n                        that.element.val('');\n                        that.element.val(newValue);\n                    }\n                } else if ((key) == keys.BACKSPACE) {\n                    e.preventDefault();\n\n                    itemToFocus = that._shiftFocus(inputGroups, currentIndex, FOCUS_LEFT);\n\n                    if (!$(focusedElement).is(\"[readonly]\")) {\n                        focusedElement.val('');\n\n                        let newValue = that._inputs\n                            .map(function(item) {\n                                return $(item).val();\n                            })\n                            .join('');\n\n                        if (shouldTriggerChange) {\n                            that._value = newValue;\n                            that.trigger(CHANGE, { value: newValue });\n                        }\n\n                        that.element.val('');\n                        that.element.val(newValue);\n\n                        if (currentIndex > 0 && !isRtl) {\n                            itemToFocus.find(\"input\").trigger(FOCUS);\n                        } else if (currentIndex == inputGroups.length - 1 && isRtl) {\n                            itemToFocus\n                                .find(\"input\")\n                                .trigger(FOCUS);\n\n                        } else {\n                            if (currentIndex > 0 && !isRtl || currentIndex > 0 && isRtl) {\n                                itemToFocus\n                                    .find(\"input\")\n                                    .trigger(FOCUS);\n                            }\n                        }\n                    }\n                }\n            },\n            _shiftFocus: function(elements, currentIndex, direction) {\n                switch (direction) {\n                    case FOCUS_RIGHT:\n                        return currentIndex + 1 === elements.length ? elements.eq(0) : $(elements[currentIndex + 1]);\n                    case FOCUS_LEFT:\n                        return currentIndex === 0 ? elements.eq(elements.length - 1) : $(elements[currentIndex - 1]);\n                    default:\n                        return null;\n                }\n            },\n            _moveFocus: function(itemToFocus, currentIndex, groupLength, direction) {\n                let that = this,\n                    inputGroups = $(that.wrapper).find(`.${OTPINPUT}`);\n\n                if (direction == FOCUS_RIGHT) {\n                    if (currentIndex != groupLength - 1) {\n                        itemToFocus = that._shiftFocus(inputGroups, currentIndex, FOCUS_RIGHT);\n                        itemToFocus\n                            .find(\"input\")\n                            .trigger(FOCUS);\n                    }\n                } else if (direction == FOCUS_LEFT) {\n                    if (currentIndex > 0) {\n                        itemToFocus = that._shiftFocus(inputGroups, currentIndex, FOCUS_LEFT);\n                        itemToFocus\n                            .find(\"input\")\n                            .trigger(FOCUS);\n                    }\n                }\n            },\n            _emptyValues: function() {\n                let that = this;\n\n                that._inputs.forEach(function(input) {\n                    $(input)\n                        .val('');\n                });\n\n            },\n            _blinkInvalidState: function(element) {\n                let that = this,\n                    toWrapper = $(element).hasClass(KOTP);\n\n                that._addInvalidState.bind(that);\n                that._addInvalidState(element, toWrapper);\n\n                clearTimeout(that._invalidStateTimeout);\n\n                that._invalidStateTimeout = setTimeout(function() {\n                    that._removeInvalidState.bind(that);\n                    that._removeInvalidState(element, toWrapper);\n                }, 100);\n            },\n            _addInvalidState: function(element, toWrapper = false) {\n                let that = this,\n                    inputs = that._inputs;\n\n                if (!toWrapper) {\n                    $(element)\n                        .closest(`.${OTPINPUT}`)\n                        .addClass(STATEINVALID);\n                } else {\n                    if (!kendo.isEmpty(inputs)) {\n                        let inputWrappers = inputs\n                            .map(function(input) {\n                                return $(input).closest(`.${OTPINPUT}`);\n                            });\n\n                        $(inputWrappers).each(function() {\n                            $(this).addClass(STATEINVALID);\n                        });\n                    }\n                }\n            },\n            _removeInvalidState: function(toWrapper = false) {\n                let that = this,\n                    inputs = that._inputs;\n\n                if (!toWrapper) {\n                    $(that)\n                    .closest(`.${OTPINPUT}`)\n                    .removeClass(STATEINVALID);\n                } else {\n                    if (!kendo.isEmpty(inputs)) {\n\n                        let inputWrappers = inputs\n                        .map(function(input) {\n                            return $(input).closest(`.${OTPINPUT}`);\n                        });\n\n                        $(inputWrappers).each(function() {\n                            $(this).removeClass(STATEINVALID);\n                        });\n\n                    }\n                }\n                that._invalidStateTimeout = null;\n            }\n        });\n\n        kendo.cssProperties.registerPrefix(\"OTPInput\", \"k-input-\");\n\n    ui.plugin(OTPInput);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}
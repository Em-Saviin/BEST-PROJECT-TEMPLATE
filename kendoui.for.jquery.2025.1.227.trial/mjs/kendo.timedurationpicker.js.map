{"version":3,"sources":["raw-mjs/kendo.timedurationpicker.js"],"names":["__meta__","id","name","category","description","docsCategory","depends","$","undefined$1","kendo","window","ui","Widget","html","map","extend","mediaQuery","OPEN","CLOSE","CHANGE","FOCUSED","ARIA_EXPANDED","HOVEREVENTS","NS","STATEDISABLED","ARIA_HIDDEN","ARIA_DISABLED","ARIA_READONLY","DISABLED","READONLY","STATEINVALID","MASKCHAR","caret","keys","defaultColumns","hours","format","divider","min","max","step","minutes","seconds","milliseconds","days","TimeDurationPicker","init","element","options","columns","that","this","fn","call","_columns","column","extended","selectorFormat","repeat","match","length","readonly","Boolean","attr","enable","is","parents","inputMode","bigScreenMQL","adaptiveMode","onChange","_timeSelector","popup","wrapper","remove","destroy","_popupView","_wrapper","_button","_applyCssClasses","_input","_buildMask","_validation","_editable","disable","_ariaLabel","_listsContainer","value","_old","_maskedInput","val","_canUpdateLast","notify","separator","shortcuts","size","fillMode","rounded","messages","set","cancel","events","off","_value","parseInt","_updateValueFromTimeSelector","_toggleHover","e","currentTarget","toggleClass","type","add","addClass","removeClass","on","removeAttr","_attachHandlers","TimeSelector","anchor","mediaQueryList","matches","focus","trigger","_selectNearestSection","_lastCaret","close","preventDefault","open","change","_removeInvalidState","button","next","renderButton","icon","shape","insertAfter","role","part","toAdd","currentPartLength","_emtpyMask","_maskParts","i","replace","end","mask","symbolsLength","start","indexOf","numberEnd","lastIndexOf","numberStart","push","autocomplete","inputmode","insertBefore","hide","wrap","parent","_keydown","bind","_inputHandler","_focus","_focusout","_paste","_mouseDown","_mouseUp","_click","_mouseOnInput","selection","_triggerChange","_lastValue","_updateValueFromInput","setTimeout","index","_getPartValue","startSeparator","lastSeparator","substring","_getEmptyPart","_fillParts","clipNumber","symbols","parts","split","join","_clearParts","endBoundary","_updatePart","oldValue","entered","emrtyPart","current","search","_replacePart","newPart","toggle","_switchPart","future","past","key","keyCode","_backward","BACKSPACE","LEFT","RIGHT","visible","_scrollerKeyDownHandler","UP","DOWN","altKey","ENTER","partValue","masksToAdd","valueParts","rest","Math","floor","getTimeParts","_validationIcon","iconClass","_addInvalidState","colValue","values","valid","emptyPart","_isPasted","_pasted","clipboardData","originalEvent","getData","_replaceEntire","_activeElement","validEntry","updatedPart","endSubstring","startSubstring","deletedPart","canUpdate","restored","oldpartValue","nextSeparator","old","lengthDiff","test","cssProperties","registerPrefix","registerValues","prop","roundedValues","concat","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.timedurationpicker.js","sourcesContent":["import './kendo.timeselector.js';\nimport './kendo.icons.js';\n\nconst __meta__ = {\n    id: \"timedurationpicker\",\n    name: \"TimeDurationPicker\",\n    category: \"web\",\n    description: \"The TimeDurationPicker widget allows the end user to select a time range stored in milliseconds.\",\n    docsCategory: \"editors\",\n    depends: [ \"timeselector\" ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        Widget = ui.Widget,\n        html = kendo.html,\n        map = $.map,\n        extend = $.extend,\n        mediaQuery = kendo.mediaQuery,\n        OPEN = \"open\",\n        FOCUS = \"focus\",\n        CLOSE = \"close\",\n        CHANGE = \"change\",\n        CLICK = \"click\",\n        SPAN = \"<span></span>\",\n        KEYDOWN = \"keydown\",\n        FOCUSOUT = \"focusout\",\n        FOCUSED = \"k-focus\",\n        MOUSEUP = \"mouseup\",\n        MOUSEDOWN = \"mousedown\",\n        PASTE = \"paste\",\n        NS = \".kendoTimeDurationPicker\",\n        ARIA_EXPANDED = \"aria-expanded\",\n        HOVEREVENTS = \"mouseenter\" + NS + \" mouseleave\" + NS,\n        STRING = \"string\",\n        INPUT = \"input\",\n        HOVER = \"k-hover\",\n        STATEDISABLED = \"k-disabled\",\n        ARIA_HIDDEN = \"aria-hidden\",\n        ARIA_DISABLED = \"aria-disabled\",\n        ARIA_READONLY = \"aria-readonly\",\n        ARIA_READONLY = \"aria-readonly\",\n        DISABLED = \"disabled\",\n        READONLY = \"readonly\",\n        STATEINVALID = \"k-invalid\",\n        MASKCHAR = \"_\",\n        caret = kendo.caret,\n        keys = kendo.keys,\n        NS = \".kendoTimeDurationPicker\";\n        html = kendo.html;\n\n    var defaultColumns = {\n        \"hours\": {\n            name: \"hours\",\n            format: \"## hours\",\n            divider: 3600000,\n            min: 0,\n            max: 23,\n            step: 1\n        },\n        \"minutes\": {\n            name: \"minutes\",\n            format: \"## mins\",\n            divider: 60000,\n            min: 0,\n            max: 59,\n            step: 1\n        },\n        \"seconds\": {\n            name: \"seconds\",\n            format: \"## sec\",\n            divider: 1000,\n            min: 0,\n            max: 59,\n            step: 1\n        },\n        \"milliseconds\": {\n            name: \"milliseconds\",\n            format: \"### msec\",\n            min: 0,\n            max: 999,\n            step: 1\n        },\n        \"days\": {\n            format: \"### days\",\n            name: \"days\",\n            divider: 86400000,\n            min: 0,\n            max: 365,\n            step: 1\n        }\n    };\n\n    function convertToMsec(value) {\n        return ((value.days || 0) * 86400000) + ((value.hours || 0) * 3600000) + ((value.minutes || 0) * 60000) + ((value.seconds || 0) * 1000) + (value.milliseconds || 0);\n    }\n\n    function getTimeParts(value) {\n        var rest;\n        var days = Math.floor(value / 86400000);\n        rest = value % 86400000;\n        var hours = Math.floor(rest / 3600000);\n        rest = value % 3600000;\n        var minutes = Math.floor(rest / 60000);\n        rest = value % 60000;\n        var seconds = Math.floor(rest / 1000);\n        rest = value % 1000;\n\n        return {\n            days: days,\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n            milliseconds: rest\n        };\n    }\n\n    function normalizeColumns(columns) {\n        return map(columns, function(column) {\n            column = typeof column === STRING ? { name: column } : column;\n            var extended = extend(true, {}, defaultColumns[column.name], column);\n            extended.selectorFormat = \"{0:\" + \"0\".repeat(extended.format.match(/#/g).length) + \"}\";\n            return extended;\n        });\n    }\n\n    var TimeDurationPicker = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n\n            options = options || {};\n\n            Widget.fn.init.call(that, element, options);\n\n            that._columns = normalizeColumns(options.columns);\n            that.options.columns = that._columns;\n            that.options.readonly = options.readonly !== undefined$1 ? options.readonly : Boolean(that.element.attr(\"readonly\"));\n            that.options.enable = options.enable !== undefined$1 ? options.enable : !(Boolean(that.element.is(\"[disabled]\") || $(element).parents(\"fieldset\").is(':disabled')));\n            that.options.inputMode = options.inputMode || that.element.attr(\"inputmode\") || \"text\";\n\n            that.bigScreenMQL = mediaQuery(\"large\");\n            if (that.options.adaptiveMode == \"auto\") {\n                that.bigScreenMQL.onChange(()=> {\n                    if (that._timeSelector) {\n                        if (that._timeSelector.popup && that._timeSelector.popup.wrapper) {\n                            that._timeSelector.popup.wrapper.remove();\n                        }\n                        that._timeSelector.destroy();\n                        that._timeSelector = null;\n                    }\n\n                    that._popupView();\n                });\n            }\n\n            that._wrapper();\n            that._button();\n            that._applyCssClasses();\n            that._input();\n            that._popupView();\n\n            that._buildMask();\n            that._validation();\n            that._editable({\n                readonly: that.options.readonly,\n                disable: !that.options.enable\n            });\n            that._ariaLabel(that._timeSelector._listsContainer);\n            if (that.options.value) {\n                that.value(options.value);\n                that._old = that._maskedInput.val();\n            }\n            that._canUpdateLast = true;\n\n            kendo.notify(that);\n        },\n\n        options: {\n            name: \"TimeDurationPicker\",\n            columns: [],\n            separator: \",\",\n            shortcuts: [],\n            value: null,\n            adaptiveMode: \"none\",\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            messages: {\n                set: \"Set\",\n                cancel: \"Cancel\",\n                days: \"Days\",\n                hours: \"Hours\",\n                minutes: \"Minutes\",\n                milliseconds: \"Milliseconds\",\n                seconds: \"Seconds\"\n            }\n        },\n\n        events: [\n            OPEN,\n            CLOSE,\n            CHANGE\n        ],\n\n        destroy: function() {\n            var that = this;\n\n            that.wrapper.off(NS);\n            that._maskedInput.off(NS);\n            if (that._timeSelector) {\n                that._timeSelector.destroy();\n                that._timeSelector = null;\n            }\n\n\n            if (that.bigScreenMQL) {\n                that.bigScreenMQL.destroy();\n            }\n        },\n\n        value: function(value) {\n            var that = this;\n\n            if (value === undefined$1) {\n                return that._value;\n            }\n\n            if (typeof value === \"number\") {\n                value = parseInt(value);\n            } else {\n                value = null;\n            }\n\n            that._value = value;\n            that.element.val(that._value);\n            that._timeSelector._value = that._value;\n            that._updateValueFromTimeSelector();\n        },\n\n        _toggleHover: function(e) {\n            $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n        },\n\n        _editable: function(options) {\n            var that = this,\n                disable = options.disable,\n                readonly = options.readonly,\n                element = that._maskedInput.add(that.element).off(NS),\n                wrapper = that.wrapper.off(NS);\n\n            if (!readonly && !disable) {\n                wrapper\n                    .removeClass(STATEDISABLED)\n                    .on(HOVEREVENTS, that._toggleHover);\n\n                if (element && element.length) {\n                    element.removeAttr(DISABLED);\n                    element.removeAttr(READONLY);\n                }\n                element.attr(ARIA_DISABLED, false)\n                       .attr(ARIA_READONLY, false);\n\n                that._attachHandlers();\n            } else {\n                wrapper\n                    .addClass(disable ? STATEDISABLED : \"\")\n                    .removeClass(disable ? \"\" : STATEDISABLED);\n\n                element.attr(DISABLED, disable)\n                       .attr(READONLY, readonly)\n                       .attr(ARIA_DISABLED, disable)\n                       .attr(ARIA_READONLY, readonly);\n            }\n        },\n\n        readonly: function(readonly) {\n            this._editable({\n                readonly: readonly === undefined$1 ? true : readonly,\n                disable: false\n            });\n        },\n\n        enable: function(enable) {\n            this._editable({\n                readonly: false,\n                disable: !(enable = enable === undefined$1 ? true : enable)\n            });\n        },\n\n        _popupView: function() {\n            var that = this;\n            var options = that.options;\n\n            if (!that._timeSelector) {\n                that._timeSelector = new kendo.ui.TimeSelector(that._maskedInput, {\n                    id: that.element.attr(\"id\") + \"_timeSelector\",\n                    anchor: that.wrapper,\n                    adaptiveMode: options.adaptiveMode,\n                    columns: options.columns,\n                    shortcuts: options.shortcuts,\n                    value: options.value,\n                    size: options.adaptiveMode != \"auto\" || that.bigScreenMQL.mediaQueryList.matches ? options.size : \"large\",\n                    fillMode: options.fillMode,\n                    rounded: options.rounded,\n                    messages: options.messages,\n                    focus: function() {\n                        that._maskedInput.trigger(\"focus\");\n                        that._selectNearestSection(that._lastCaret || 0);\n                    },\n                    close: function(e) {\n                        if (that.trigger(CLOSE)) {\n                            e.preventDefault();\n                        } else {\n                            that._maskedInput.attr(ARIA_EXPANDED, false);\n                            that._timeSelector._listsContainer.attr(ARIA_HIDDEN, true);\n                        }\n                    },\n                    open: function(e) {\n                        if (that.trigger(OPEN)) {\n                            e.preventDefault();\n                        } else {\n                            that._maskedInput.attr(ARIA_EXPANDED, true);\n                            that._timeSelector._listsContainer.attr(ARIA_HIDDEN, false);\n                            that._lastCaret = caret(that._maskedInput)[0];\n                            if (that._lastCaret === that._maskedInput.val().length) {\n                                that._lastCaret = 0;\n                            }\n                        }\n                    },\n                    change: function(value) {\n                        that._value = value;\n                        that._updateValueFromTimeSelector();\n                        that._removeInvalidState();\n                        that.trigger(CHANGE);\n                    }\n                });\n            }\n        },\n\n        _button: function() {\n            var that = this,\n                element = that.element,\n                options = that.options,\n                button;\n\n            button = element.next(\"button.k-input-button\");\n\n            if (!button[0]) {\n                button = $(html.renderButton('<button unselectable=\"on\" tabindex=\"-1\" class=\"k-input-button\" aria-label=\"select\"></button>', {\n                    icon: \"clock-arrow-rotate\",\n                    size: options.size,\n                    fillMode: options.fillMode,\n                    shape: \"none\",\n                    rounded: \"none\"\n                })).insertAfter(element);\n            }\n\n            that._button = button.attr({\n                \"role\": \"button\"\n            });\n        },\n\n        _buildMask: function() {\n            var columns = this.options.columns;\n            var format;\n            var toAdd = \"\";\n            var part;\n            var currentPartLength = 0;\n\n            this._emtpyMask = \"\";\n            this._maskParts = [];\n\n            for (var i = 0; i < columns.length; i++) {\n                part = {};\n                format = columns[i].format;\n\n                if (i) {\n                    toAdd = this.options.separator;\n                }\n\n                toAdd += format.replace(/#/g, '_');\n                this._emtpyMask += toAdd;\n                part.end = this._emtpyMask.length - 1;\n                part.mask = format.replace(/#/g, '_');\n                part.symbolsLength = part.mask.match(/_/g).length;\n                part.start = this._emtpyMask.indexOf(part.mask, currentPartLength);\n                part.numberEnd = this._emtpyMask.lastIndexOf(MASKCHAR) + 1;\n                part.numberStart = this._emtpyMask.indexOf(MASKCHAR, part.start);\n\n                currentPartLength += part.mask.length;\n                this._maskParts.push(part);\n            }\n\n            this._old = this._emtpyMask;\n            this._maskedInput.val(this._emtpyMask);\n        },\n\n        _input: function() {\n            var that = this;\n\n            that._maskedInput = $(\"<input />\")\n                        .attr(kendo.attr(\"validate\"), \"false\")\n                        .attr({\n                            \"role\": \"combobox\",\n                            \"aria-expanded\": false,\n                            \"aria-controls\": that.element.attr(\"id\") + \"_timeSelector\",\n                            \"autocomplete\": \"off\",\n                            \"inputmode\": that.options\n                        })\n                        .addClass(\"k-input-inner\")\n                        .insertBefore(that.element);\n\n            let inputMode = that.options.inputMode;\n            if (inputMode) {\n                that._maskedInput.attr(\"inputmode\", inputMode);\n            }\n\n            that.element.hide();\n        },\n\n        _wrapper: function() {\n            var that = this,\n                element = that.element,\n                wrapper;\n\n            wrapper = element.parents(\".k-timedurationpicker\");\n\n            if (!wrapper[0]) {\n                wrapper = element.wrap(SPAN).parent();\n            }\n\n            that.wrapper = wrapper.addClass(\"k-timedurationpicker k-input\");\n        },\n\n        _attachHandlers: function() {\n            var that = this;\n\n            that._maskedInput\n                    .on(KEYDOWN + NS, that._keydown.bind(that))\n                    .on(INPUT + NS, that._inputHandler.bind(that))\n                    .on(FOCUS + NS, that._focus.bind(that))\n                    .on(FOCUSOUT + NS, that._focusout.bind(that))\n                    .on(PASTE + NS, that._paste.bind(that))\n                    .on(MOUSEDOWN + NS, that._mouseDown.bind(that))\n                    .on(MOUSEUP + NS, that._mouseUp.bind(that));\n\n            that.wrapper.on(CLICK + NS, \".k-input-button\", that._click.bind(that));\n        },\n\n        _mouseDown: function() {\n            this._mouseOnInput = true;\n        },\n\n        _mouseUp: function() {\n            var selection = caret(this._maskedInput[0]);\n            var value = this._maskedInput[0].value;\n            if (selection[0] === selection[1]) {\n                this._selectNearestSection(selection[1] == value.length ? value.length - 1 : selection[1]);\n            }\n        },\n\n        _triggerChange: function() {\n            if ((this._lastValue == undefined$1 && this._value) || this._lastValue != this._value) {\n                this._lastValue = this._value;\n                this.trigger(CHANGE);\n            }\n        },\n\n        _focusout: function() {\n            this._updateValueFromInput();\n            this._triggerChange();\n\n            this._canUpdateLast = true;\n            this.wrapper.removeClass(FOCUSED);\n        },\n\n        _focus: function() {\n            var that = this;\n            if (!that._mouseOnInput) {\n                setTimeout(function() {\n                    that._selectNearestSection(0);\n                }, 10);\n            }\n            that._mouseOnInput = false;\n            that.wrapper.addClass(FOCUSED);\n        },\n\n        _selectNearestSection: function(index) {\n            var part;\n\n            for (var i = 0; i < this._maskParts.length; i++ ) {\n                part = this._maskParts[i];\n                if (index >= part.start && index <= part.end) {\n                    caret(this._maskedInput[0], part.numberStart, part.numberEnd);\n                }\n            }\n        },\n\n        _getPartValue: function(value, index) {\n            var that = this;\n            var separator = that.options.separator;\n            var startSeparator = value.indexOf(separator,index);\n            var lastSeparator = value.lastIndexOf(separator,index);\n            return value.substring(lastSeparator < 0 ? 0 : lastSeparator + 1 , startSeparator < 0 ? value.length : startSeparator );\n        },\n\n        _getEmptyPart: function(index) {\n            return this._getPartValue(this._emtpyMask, index);\n        },\n\n        _fillParts: function(clipNumber) {\n            var parts = this._emtpyMask.split(this.options.separator);\n            var symbols;\n            clipNumber = clipNumber + \"\";\n\n            for (var i = 0; i < parts.length; i++) {\n                symbols = parts[i].match(/_/g).length;\n                if (symbols > clipNumber.length) {\n                    parts[i] = parts[i].replace(MASKCHAR.repeat(symbols), \"0\".repeat(symbols - clipNumber.length) + clipNumber);\n                } else {\n                    parts[i] = parts[i].replace(MASKCHAR.repeat(symbols), clipNumber.substring(0, symbols));\n                    clipNumber = clipNumber.substring(symbols, symbols.length);\n                }\n            }\n            return parts.join(this.options.separator);\n        },\n\n        _clearParts: function(value, start, end) {\n            var parts = value.split(this.options.separator);\n            var index = 0;\n            var endBoundary;\n\n            for (var i = 0; i < parts.length; i++) {\n                endBoundary = index + parts[i].length;\n                if ((index <= start && endBoundary >= start) || (index <= end && endBoundary >= end)) {\n                    parts[i] = this._getEmptyPart(index);\n                }\n                index += (parts[i].length + 1);\n            }\n            return parts.join(this.options.separator);\n        },\n\n        _updatePart: function(oldValue, entered) {\n            var emrtyPart = this._getEmptyPart(this._old.indexOf(oldValue));\n            var current = oldValue.substring(emrtyPart.indexOf(MASKCHAR), emrtyPart.lastIndexOf(MASKCHAR) + 1);\n            var format = \"{0:\" + \"0\".repeat(current.length) + \"}\";\n\n            if (current.indexOf(MASKCHAR) >= 0 || !(oldValue[oldValue.search(/[0-9]/)] === \"0\") || entered.length > 1) {\n                return oldValue.replace(current, kendo.format(format, parseInt(entered)));\n            } else {\n                return oldValue.replace(current, kendo.format(format, parseInt(current + entered)));\n            }\n        },\n\n        _replacePart: function(oldValue, newPart, index) {\n            return oldValue.replace(this._getPartValue(oldValue, index), newPart);\n        },\n\n        _click: function() {\n            var that = this;\n\n            if (!that._timeSelector) {\n                return;\n            }\n\n            that._timeSelector.toggle();\n        },\n\n        _switchPart: function(options) {\n            var separator = this.options.separator;\n            var selection = options.caret != undefined$1 ? options.caret : caret(this._maskedInput[0])[0];\n            var value = this._maskedInput.val();\n            var index;\n\n            if (options.next) {\n                index = value.indexOf(separator, selection);\n                if (index < 0) {\n                    index = value.length - 1;\n                } else {\n                    index++;\n                }\n            } else {\n                index = value.lastIndexOf(separator, selection);\n                if (index < 0 ) {\n                    index = 0;\n                } else {\n                    index--;\n                }\n            }\n            this._selectNearestSection(index);\n        },\n\n        _keydown: function(e) {\n            var key = e.keyCode;\n            var separator = this.options.separator;\n            var selection;\n            var value;\n            var index;\n            var future;\n            var past;\n\n            this._backward = key === keys.BACKSPACE;\n            if (key == keys.LEFT || key == keys.RIGHT) {\n                e.preventDefault();\n                selection = caret(this._maskedInput[0])[0];\n                value = this._maskedInput.val();\n                future = value.indexOf(separator, selection);\n                past = value.lastIndexOf(separator, selection);\n\n                if ((future < 0 && key == keys.RIGHT) || (past < 0 && key == keys.LEFT)) {\n                    return;\n                }\n\n                index = (key == keys.LEFT) ? (past - 1) : (future + 1);\n                this._selectNearestSection(index);\n                if (key == keys.LEFT) {\n                    this._canUpdateLast = true;\n                }\n            } else if (this._timeSelector.popup.visible()) {\n                this._timeSelector._scrollerKeyDownHandler(e);\n            } else if (key == keys.UP || key == keys.DOWN) {\n                e.preventDefault();\n                if (e.altKey) {\n                    this._timeSelector.toggle();\n                }\n            } else if (key == keys.ENTER) {\n                this._updateValueFromInput();\n                this._triggerChange();\n            }\n        },\n\n        _updateValueFromTimeSelector: function() {\n            var that = this;\n            var valueParts = getTimeParts(that._value);\n            var value = \"\";\n            var column = this._columns[i];\n            var part;\n            var partValue;\n            var masksToAdd;\n\n            for (var i = 0; i < this._columns.length; i++) {\n                column = this._columns[i];\n                partValue = valueParts[column.name] + '';\n                part = this._maskParts[i];\n\n                if (i) {\n                    value += that.options.separator;\n                }\n\n                if (!valueParts[column.name]) {\n                    value += part.mask;\n                    continue;\n                }\n\n                masksToAdd = part.symbolsLength - partValue.length;\n                value += part.mask.replace(MASKCHAR.repeat(part.symbolsLength), \"0\".repeat(masksToAdd < 0 ? 0 : masksToAdd) + partValue);\n            }\n\n            that._maskedInput.val(value);\n            that._old = value;\n        },\n\n        _validation: function() {\n            var that = this;\n            var element = that.element;\n\n            that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n        },\n\n        _addInvalidState: function() {\n            this.wrapper.addClass(STATEINVALID);\n            this._validationIcon.removeClass('k-hidden');\n        },\n\n        _removeInvalidState: function() {\n            this.wrapper.removeClass(STATEINVALID);\n            this._validationIcon.addClass('k-hidden');\n        },\n\n        _updateValueFromInput: function() {\n            var val = this._maskedInput.val();\n            var values = {};\n            var valid = true;\n            var column;\n            var part;\n            var colValue;\n\n            for (var i = 0; i < this._columns.length; i++) {\n                column = this._columns[i];\n                part = this._maskParts[i];\n                colValue = val.substring(part.numberStart, part.numberEnd).replace(/_/g, \"\");\n                colValue = kendo.parseInt(colValue || 0);\n\n                if (colValue >= column.min && colValue <= column.max) {\n                    values[column.name] = colValue;\n                } else {\n                    valid = false;\n                    break;\n                }\n            }\n\n            if (valid) {\n                this._value = convertToMsec(values);\n                this.element.val(this._value || \"\");\n                this._timeSelector._value = this._value;\n                this._removeInvalidState();\n            } else {\n                this._addInvalidState();\n            }\n        },\n\n        _paste: function(e) {\n            this._isPasted = true;\n            this._pasted = (e.clipboardData || e.originalEvent.clipboardData).getData('Text');\n            var emptyPart;\n\n            var selection = caret(this._maskedInput);\n\n            if (this._maskedInput.val().length == selection[1] && !selection[0]) {\n                this._replaceEntire = true;\n            } else {\n                emptyPart = this._getEmptyPart(selection[0]);\n                this._pasted = this._pasted.substring(0, emptyPart.match(/_/g).length);\n            }\n        },\n\n        _inputHandler: function() {\n            if (kendo._activeElement() !== this._maskedInput[0]) {\n                return;\n            }\n\n            var that = this;\n            var old = that._old;\n            var separator = that.options.separator;\n            var value = that._maskedInput[0].value;\n            var selection = caret(that._maskedInput)[0];\n            var lengthDiff = old.length - value.length;\n            var entered;\n            var validEntry;\n            var updatedPart;\n            var endSubstring;\n            var startSubstring;\n            var deletedPart;\n            var emptyPart;\n            var canUpdate;\n            var restored;\n            var oldpartValue;\n            var nextSeparator;\n\n            entered = that._isPasted ? that._pasted : value.substring(selection - 1, selection);\n            validEntry = /\\d/.test(entered);\n\n            if (that._isPasted && that._replaceEntire && validEntry) {\n                that._old = that._fillParts(parseInt(entered));\n                that._maskedInput.val(that._old);\n                that._selectNearestSection(0);\n                that._isPasted = that._replaceEntire = false;\n                return;\n            }\n\n            if (that._isPasted) {\n                lengthDiff = 0;\n            }\n\n            that._isPasted = false;\n\n            if ((entered === separator && !that._backward)) {\n                that._maskedInput.val(that._old);\n                that._switchPart({ caret: selection, next: true });\n                return;\n            }\n\n            if (!value && that._backward) {\n                that._old = that._emtpyMask;\n                that._maskedInput.val(that._old);\n                that._selectNearestSection(selection);\n                return;\n            }\n\n            if ((!validEntry && !that._backward)) {\n                that._maskedInput.val(that._old);\n                that._selectNearestSection(selection);\n                return;\n            }\n\n            if (!lengthDiff || lengthDiff > 0) {\n                endSubstring = value.substring(selection, value.length);\n                startSubstring = value.substring(0, selection);\n                deletedPart = that._emtpyMask.substring(startSubstring.length, old.indexOf(endSubstring));\n\n                restored = startSubstring + deletedPart + endSubstring;\n                oldpartValue = that._getPartValue(that._old, selection);\n                nextSeparator = that._old.indexOf(separator, that._old.indexOf(oldpartValue) + 1);\n\n                if (that._backward) {\n                    // if multiple parts\n                    if (deletedPart.split(separator).length > 1) {\n                        that._old = this._clearParts(restored, selection, selection + deletedPart.length);\n                    } else {\n                        emptyPart = this._getEmptyPart(selection);\n                        if (emptyPart == oldpartValue) {\n                            that._maskedInput.val(that._old);\n                            that._switchPart({ caret: selection });\n                            return;\n                        }\n                        that._old = that._replacePart(restored, emptyPart, selection);\n                    }\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(selection);\n                    return;\n                }\n\n                if (nextSeparator < 0 && oldpartValue.indexOf(MASKCHAR) === -1 && !that._canUpdateLast) {\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(selection);\n                    return;\n                }\n\n                if (validEntry) {\n                    updatedPart = that._updatePart(oldpartValue, entered);\n                    canUpdate = updatedPart[updatedPart.search(/[0-9]/)] === \"0\";\n                    restored = that._replacePart(restored, updatedPart, selection);\n                    that._maskedInput.val(restored);\n                    if (nextSeparator > 0 && !canUpdate) {\n                        that._selectNearestSection(nextSeparator + 1, true);\n                    } else {\n                        that._selectNearestSection(selection);\n                    }\n\n                    that._canUpdateLast = !(nextSeparator < 0 && !canUpdate);\n                }\n                that._old = restored;\n            } else if (lengthDiff < 0) {\n                that._maskedInput.val(that._old);\n                that._selectNearestSection(that._old.length - 1);\n            }\n        },\n\n    });\n\n    kendo.cssProperties.registerPrefix(\"TimeDurationPicker\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"TimeDurationPicker\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n    ui.plugin(TimeDurationPicker);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}
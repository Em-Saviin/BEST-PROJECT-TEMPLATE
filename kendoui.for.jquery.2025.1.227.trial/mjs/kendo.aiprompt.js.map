{"version":3,"sources":["raw-mjs/kendo.aiprompt.js"],"names":["__meta__","id","name","category","description","depends","$","kendo","window","Widget","ui","extend","FOCUS","cssClasses","defaultViews","prompt","type","buttonIcon","output","commands","custom","AIPrompt","init","element","options","that","this","fn","call","views","length","promptCommands","push","promptOutputs","_initLayout","_initViews","_initToolbar","activeView","notify","enabled","toolbarItems","popup","messages","promptView","outputView","commandsView","customView","promptPlaceholder","promptSuggestions","generateOutput","outputTitle","outputRetryTitle","copyOutput","retryGeneration","ratePositive","rateNegative","showOutputRating","service","events","_initializeView","view","viewConfig","getter","Error","promptSuggestionItemTemplate","_unbindView","destroy","viewsArray","i","l","isSettings","defaultView","buttonText","Object","assign","title","index","getViews","undefined","_activeViewIndex","Number","isInteger","_selectedView","findIndex","v","render","_updateToolbarState","toolItem","toolbar","_getAllItems","_resetTabIndex","trigger","addPromptOutput","guid","unshift","renderPromptOutput","activeToolIndex","find","each","elm","toggle","header","addClass","append","popupWrapper","closest","_getViewTools","map","text","icon","fillMode","themeColor","rounded","togglable","attributes","items","Array","isArray","closeButton","item","toolbarEl","kendoToolBar","resizable","concat","appendTo","data","focus","off","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.aiprompt.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.icons.js';\nimport './kendo.textarea.js';\nimport './kendo.button.js';\nimport './kendo.toolbar.js';\nimport './kendo.aiprompt.views.js';\n\nconst __meta__ = {\n    id: \"aiprompt\",\n    name: \"AIPrompt\",\n    category: \"web\",\n    description: \"The AIPrompt component simplifies the incorporation of external AI services into apps.\",\n    depends: [\"core\", \"icons\", \"textarea\", \"button\", \"toolbar\", \"panelbar\"],\n};\n\n(function($) {\n    let kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        NS = \".kendoAIPrompt\",\n        ui = kendo.ui,\n        extend = $.extend,\n\n        COMMAND_EXECUTE = \"commandExecute\",\n        PROMPT_REQUEST = \"promptRequest\",\n        PROMPT_RESPONSE = \"promptResponse\",\n        OUTPUT_RATING_CHANGE = \"outputRatingChange\",\n        OUTPUT_COPY = \"outputCopy\",\n\n        FOCUS = \"focus\";\n\n    let cssClasses = {\n        menuButton: \"k-menu-button\",\n        aIPrompt: \"k-prompt\"\n    };\n\n    let defaultViews = {\n        prompt: {\n            type: \"kendo.ui.AIPromptPromptView\",\n            name: \"prompt\",\n            buttonIcon: \"sparkles\",\n        },\n        output: {\n            type: \"kendo.ui.AIPromptOutputView\",\n            name: \"output\",\n            buttonIcon: \"comment\",\n        },\n        commands: {\n            type: \"kendo.ui.AIPromptCommandsView\",\n            name: \"commands\",\n            buttonIcon: \"more-horizontal\",\n        },\n        custom: {\n            type: \"kendo.ui.AIPromptCustomView\",\n            name: \"custom\",\n        }\n    };\n\n    let AIPrompt = Widget.extend({\n        init: function(element, options) {\n            let that = this;\n            options = options || {};\n\n            Widget.fn.init.call(that, element, options);\n\n            if (that.options.views.length == 0) {\n                that.options.views = [\"prompt\", \"output\"];\n\n                if (this.options.promptCommands && this.options.promptCommands.length) {\n                    this.options.views.push(\"commands\");\n                }\n            }\n\n            that.promptOutputs = that.options.promptOutputs || [];\n            that._initLayout();\n            that._initViews();\n            that._initToolbar();\n            that.activeView(that.options.activeView);\n\n            kendo.notify(that);\n        },\n\n        options: {\n            name: \"AIPrompt\",\n            enabled: true,\n            toolbarItems: [],\n            promptOutputs: [],\n            activeView: 0,\n            views: [],\n            popup: null,\n            messages: {\n                promptView: \"Ask AI\",\n                outputView: \"Output\",\n                commandsView: \"\",\n                customView: \"Custom View\",\n                promptPlaceholder: \"Ask or generate content with AI\",\n                promptSuggestions: \"Prompt Suggestions\",\n                generateOutput: \"Generate\",\n                outputTitle: \"Generated with AI\",\n                outputRetryTitle: \"Generated with AI\",\n                copyOutput: \"Copy\",\n                retryGeneration: \"Retry\",\n                ratePositive: \"\",\n                rateNegative: \"\"\n            },\n            showOutputRating: true,\n            service: null,\n        },\n\n        events: [\n            COMMAND_EXECUTE,\n            PROMPT_REQUEST,\n            PROMPT_RESPONSE,\n            OUTPUT_RATING_CHANGE,\n            OUTPUT_COPY,\n        ],\n\n        _initializeView: function(name) {\n            let viewConfig = this.views[name];\n            let view;\n            if (viewConfig) {\n                let type = viewConfig.type;\n\n                if (typeof type === \"string\") {\n                    type = kendo.getter(viewConfig.type)(window);\n                }\n\n                if (type) {\n                    view = new type(this.element, extend(true, {\n                        promptSuggestions: this.options.promptSuggestions,\n                        promptCommands: this.options.promptCommands,\n                        promptOutputs: this.promptOutputs,\n                        showOutputRating: this.options.showOutputRating,\n                        messages: this.options.messages,\n                        promptSuggestionItemTemplate: this.options.promptSuggestionItemTemplate,\n                        service: this.options.service,\n                    },\n                        viewConfig\n                    ));\n                } else {\n                    throw new Error(\"There is no such view\");\n                }\n            }\n\n            return view;\n        },\n\n        _unbindView: function(view) {\n            if (view) {\n                view.destroy();\n            }\n        },\n\n        _initViews: function() {\n            let that = this,\n                options = that.options,\n                views = options.views;\n\n            that.views = {};\n            that.viewsArray = [];\n\n            for (let i = 0, l = views.length; i < l; i++) {\n                let view = views[i];\n                let isSettings = typeof view === \"object\";\n                let name = view;\n\n                if (isSettings) {\n                    name = typeof view.type !== \"string\" ? view.name : view.type;\n                }\n\n                let defaultView = defaultViews[name];\n\n                if (defaultView) {\n                    if (isSettings) {\n                        view.type = defaultView.type;\n                    }\n\n                    defaultView.buttonText = that.options.messages[`${name}View`];\n                }\n\n                view = Object.assign({ title: view.title, name, index: i }, defaultView, isSettings ? view : {});\n                that.viewsArray.push(view);\n\n                if (name) {\n                    that.views[name] = view;\n                }\n            }\n        },\n\n        getViews: function() {\n            return this.viewsArray;\n        },\n\n        activeView: function(name) {\n            let that = this;\n            if (name === undefined) {\n                return that._activeViewIndex;\n            }\n\n            if (Number.isInteger(name)) {\n                name = that.viewsArray[name].name;\n            }\n\n            if (name && that.views[name]) {\n                if (that._selectedView) {\n                    that._unbindView(that._selectedView);\n                }\n\n                that._selectedView = that._initializeView(name);\n                that._activeViewIndex = that.viewsArray.findIndex(v => v.name === name);\n                that._selectedView.render();\n\n                that._updateToolbarState(that._activeViewIndex);\n\n                let toolItem = $(that.toolbar._getAllItems()[that._activeViewIndex]);\n                that.toolbar._resetTabIndex(toolItem);\n                toolItem.trigger(FOCUS);\n            }\n        },\n\n        addPromptOutput: function(output) {\n            output.id = output.id || kendo.guid();\n            this.promptOutputs.unshift(output);\n\n            if (typeof this._selectedView.renderPromptOutput === \"function\") {\n                return this._selectedView.renderPromptOutput(output);\n            }\n        },\n\n        _updateToolbarState: function(activeToolIndex) {\n            let toolbar = this.toolbar;\n            toolbar.element.find(\".k-toolbar-toggle-button\").each(function(index, elm) {\n                toolbar.toggle($(elm), index == activeToolIndex);\n            });\n        },\n\n        _initLayout: function() {\n            let that = this,\n                header = $(\"<div></div>\").addClass(\"k-prompt-header\");\n            that.header = header;\n            that.element.addClass(cssClasses.aIPrompt);\n            that.element.append(header);\n            const popupWrapper = that.element.closest('.k-popup');\n\n            if (popupWrapper.length) {\n                $(popupWrapper).addClass('k-prompt-popup');\n            }\n        },\n\n        _getViewTools: function() {\n            let that = this;\n\n            return that.viewsArray.map(v => {\n                if (v.name === 'commands') {\n                    if (v.buttonText) {\n                        v.title = v.buttonText;\n                    } else {\n                        v.title = \"More Actions\";\n                    }\n                }\n\n                return {\n                type: \"button\",\n                text: v.buttonText,\n                icon: v.buttonIcon,\n                fillMode: \"flat\",\n                themeColor: \"primary\",\n                rounded: \"full\",\n                togglable: true,\n                attributes: { title: v.title },\n                toggle: function() {\n                    that.activeView(v.name);\n                }\n            };\n        });\n        },\n\n        _initToolbar: function() {\n            let that = this;\n            let items = that.options.toolbarItems;\n            items = Array.isArray(items) ? items : [items];\n            const closeButton = items.find(item => item.icon === 'x');\n\n            if (closeButton) {\n                closeButton.themeColor = 'base';\n            }\n\n            let toolbarEl = $(\"<div></div>\").kendoToolBar({\n                resizable: false,\n                fillMode: \"flat\",\n                items: that._getViewTools().concat(items)\n            }).appendTo(that.header);\n\n            that.toolbar = toolbarEl.data(\"kendoToolBar\");\n        },\n\n        focus: function() {\n            let that = this;\n            that.element.trigger(FOCUS);\n        },\n\n        destroy: function() {\n            let that = this;\n\n            that.toolbar?.destroy();\n            that._selectedView?.destroy();\n\n            that.element.off(NS);\n\n            Widget.fn.destroy.call(that);\n        }\n    });\n\n    ui.plugin(AIPrompt);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}
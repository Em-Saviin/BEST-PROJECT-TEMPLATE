{"version":3,"sources":["raw-mjs/kendo.validator.js"],"names":["__meta__","id","name","category","description","depends","$","kendo","window","Widget","ui","NS","INVALIDMSG","invalidMsgRegExp","RegExp","INVALIDINPUT","VALIDINPUT","VALIDATIONSUMMARY","INVALIDLABEL","MESSAGEBOX","ARIAINVALID","emailRegExp","ALLOWED_URL_PROTOCOLS","INPUTSELECTOR","CHECKBOXSELECTOR","NUMBERINPUTSELECTOR","BLUR","NAME","FORM","NOVALIDATE","VALIDATE","CHANGE","VALIDATE_INPUT","patternMatcher","value","pattern","test","hasAttribute","input","length","attributes","parseHtml","text","parseHTML","searchForMessageContainer","elements","fieldName","element","containers","idx","className","getAttribute","attr","add","isLabelFor","label","nodeName","validator","rules","messages","allowSubmit","noop","validateOnInit","SUMMARYTEMPLATE","errors","result","i","field","message","Validator","extend","init","options","that","this","resolved","resolvers","ruleResolvers","resolve","resolveRules","validateAttributeSelector","fn","call","_errorTemplate","template","errorTemplate","_summaryTemplate","validationSummary","is","_shouldSearchDocument","_containerElement","document","_inputSelector","_buildSelector","_checkboxSelector","_errors","_attachEvents","_isValidated","_validateOnInit","validate","events","required","min","max","step","email","url","date","dateCompare","captcha","containerElement","noNameCheckbox","quote","indexOf","namedCheckbox","find","checkbox","filter","radio","val","parseFloat","raise","decimals","split","Math","pow","floor","selector","matcher","URL","includes","protocol","parseDate","widgetInstance","isValidated","isValid","data","getCaptchaId","_validating","done","_checkElement","fail","error","console","warn","removeData","validateOnBlur","selectorConstant","formSelector","_allowSubmit","destroy","off","_submit","e","stopPropagation","stopImmediatePropagation","preventDefault","state","validateInput","trigger","on","bind","inputs","invalid","eq","showValidationSummary","valid","isEmpty","closest","otpContainer","_checkValidity","lbl","_findMessageContainer","next","addClass","messageText","_extractMessage","key","messageLabel","replace","wasValid","isInputInner","inputWrapper","parent","removeAttr","hasClass","lblId","_decorateMessageContainer","replaceWith","parentElement","get","nextElement","prevElement","prev","wrapper","insertAfter","removeClass","_inputWrapper","toggleClass","widgetName","inputWrap","inputLabel","_inputLabel","_removeInvalidState","_addInvalidState","errorId","_associateMessageContainer","hideMessages","_disassociateMessageContainers","reset","labels","hideValidationSummary","locators","messageLocators","target","getElementsByTagName","locate","container","decorate","ruleKey","nonDefaultMessage","customMessage","prototype","isFunction","format","rule","results","push","setOptions","deepExtend","_setEvents","_getInputNames","sorted","nextFocusable","getWidgetFocusableElement","toggleAttribute","addBack","_errorsByName","inputNames","_renderSummary","insertBefore","join","_summaryClick","link","errorsList","summary","html","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.validator.js","sourcesContent":["import './kendo.core.js';\n\nconst __meta__ = {\n    id: \"validator\",\n    name: \"Validator\",\n    category: \"web\",\n    description: \"The Validator offers an easy way to do a client-side form validation.\",\n    depends: [ \"core\" ]\n};\n\n\n(function($, undefined$1) {\n    let kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        NS = \".kendoValidator\",\n        INVALIDMSG = \"k-invalid-msg\",\n        invalidMsgRegExp = new RegExp(INVALIDMSG,'i'),\n        INVALIDINPUT = \"k-invalid\",\n        VALIDINPUT = \"k-valid\",\n        VALIDATIONSUMMARY = \"k-validation-summary\",\n        INVALIDLABEL = \"k-text-error\",\n        MESSAGEBOX = \"k-messagebox k-messagebox-error\",\n        INPUTINNER = \".k-input-inner\",\n        INPUTWRAPPER = \".k-input\",\n        ARIAINVALID = \"aria-invalid\",\n        ARIADESCRIBEDBY = \"aria-describedby\",\n        emailRegExp = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i,\n        ALLOWED_URL_PROTOCOLS = [\"http:\", \"https:\", \"ftp:\", \"ftps:\"],\n        INPUTSELECTOR = \":input:not(:button,[type=submit],[type=reset],[disabled],[readonly])\",\n        CHECKBOXSELECTOR = \":checkbox:not([disabled],[readonly])\",\n        NUMBERINPUTSELECTOR = \"[type=number],[type=range]\",\n        BLUR = \"blur\",\n        NAME = \"name\",\n        FORM = \"form\",\n        NOVALIDATE = \"novalidate\",\n        //events\n        VALIDATE = \"validate\",\n        CHANGE = \"change\",\n        VALIDATE_INPUT = \"validateInput\",\n\n        patternMatcher = function(value, pattern) {\n            if (typeof pattern === \"string\") {\n                pattern = new RegExp('^(?:' + pattern + ')$');\n            }\n            return pattern.test(value);\n        },\n        matcher = function(input, selector, pattern) {\n            var value = input.val();\n\n            if (input.filter(selector).length && value !== \"\") {\n                return patternMatcher(value, pattern);\n            }\n            return true;\n        },\n        hasAttribute = function(input, name) {\n            if (input.length) {\n                return input[0].attributes[name] != null;\n            }\n            return false;\n        };\n\n    if (!kendo.ui.validator) {\n        kendo.ui.validator = { rules: {}, messages: {}, allowSubmit: $.noop, validateOnInit: $.noop };\n    }\n\n    function resolveRules(element) {\n        var resolvers = kendo.ui.validator.ruleResolvers || {},\n            rules = {},\n            name;\n\n        for (name in resolvers) {\n            $.extend(true, rules, resolvers[name].resolve(element));\n        }\n        return rules;\n    }\n\n    function decode(value) {\n        return value.replace(/&amp/g, '&amp;')\n            .replace(/&quot;/g, '\"')\n            .replace(/&#39;/g, \"'\")\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>');\n    }\n\n    function numberOfDecimalDigits(value) {\n        value = (value + \"\").split('.');\n        if (value.length > 1) {\n            return value[1].length;\n        }\n        return 0;\n    }\n\n    function parseHtml(text) {\n        if ($.parseHTML) {\n            return $($.parseHTML(text));\n        }\n        return $(text);\n    }\n\n    function searchForMessageContainer(elements, fieldName) {\n        var containers = $(),\n            element,\n            attr;\n\n        for (var idx = 0, length = elements.length; idx < length; idx++) {\n            element = elements[idx];\n            if (invalidMsgRegExp.test(element.className)) {\n                attr = element.getAttribute(kendo.attr(\"for\"));\n                if (attr === fieldName) {\n                    containers = containers.add(element);\n                }\n            }\n        }\n        return containers;\n    }\n\n    function isLabelFor(label, element) {\n        if (!label) {\n            return false;\n        }\n        if (typeof label.nodeName !== 'string' || label.nodeName !== 'LABEL') {\n            return false;\n        }\n        if (typeof label.getAttribute('for') !== 'string' || typeof element.getAttribute('id') !== 'string') {\n            return false;\n        }\n        if (label.getAttribute('for') !== element.getAttribute('id')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    var SUMMARYTEMPLATE = ({ errors }) => {\n        let result = '<ul>';\n        for (var i = 0; i < errors.length; i += 1) {\n            result += `<li><a data-field=\"${errors[i].field}\" href=\"#\">${errors[i].message}</a></li>`;\n        }\n\n        result += '</ul>';\n        return result;\n    };\n\n    var Validator = Widget.extend({\n        init: function(element, options) {\n            var that = this,\n                resolved = resolveRules(element),\n                validateAttributeSelector = \"[\" + kendo.attr(\"validate\") + \"!=false]\";\n\n            options = options || {};\n\n            options.rules = $.extend({}, kendo.ui.validator.rules, resolved.rules, options.rules);\n            options.messages = $.extend({}, kendo.ui.validator.messages, resolved.messages, options.messages);\n\n            Widget.fn.init.call(that, element, options);\n\n            that._errorTemplate = kendo.template(that.options.errorTemplate);\n            that._summaryTemplate = kendo.template(that.options.validationSummary.template || SUMMARYTEMPLATE);\n\n            if (that.element.is(FORM)) {\n                that.element.attr(NOVALIDATE, NOVALIDATE);\n            }\n\n            that._shouldSearchDocument = that.element.is(FORM) && that.element.attr(\"id\") !== undefined$1;\n            that._containerElement = that._shouldSearchDocument ? $(document) : that.element;\n            that._inputSelector = that._buildSelector(INPUTSELECTOR, validateAttributeSelector);\n            that._checkboxSelector = that._buildSelector(CHECKBOXSELECTOR, validateAttributeSelector);\n\n            that._errors = {};\n            that._attachEvents();\n            that._isValidated = false;\n\n            if (that._validateOnInit()) {\n                that.validate();\n            }\n        },\n\n        events: [ VALIDATE, CHANGE, VALIDATE_INPUT ],\n\n        options: {\n            name: \"Validator\",\n            errorTemplate: ({ message }) => `<span class=\"k-form-error\">${message}</span>`,\n            messages: {\n                required: \"{0} is required\",\n                pattern: \"{0} is not valid\",\n                min: \"{0} should be greater than or equal to {1}\",\n                max: \"{0} should be smaller than or equal to {1}\",\n                step: \"{0} is not valid\",\n                email: \"{0} is not valid email\",\n                url: \"{0} is not valid URL\",\n                date: \"{0} is not valid date\",\n                dateCompare: \"End date should be greater than or equal to the start date\",\n                captcha: \"The text you entered doesn't match the image.\"\n            },\n            rules: {\n                required: function(input) {\n                    let containerElement = this._containerElement,\n                        noNameCheckbox = !input.attr(\"name\") && !input.is(\":checked\"),\n                        name = input.attr(\"name\"),\n                        quote = !!name && name.indexOf(\"'\") > -1 ? '\\\"' : \"'\",\n                        namedCheckbox = input.attr(\"name\") && !containerElement.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                        checkbox = input.filter(\"[type=checkbox]\").length && (noNameCheckbox || namedCheckbox),\n                        radio = input.filter(\"[type=radio]\").length && !containerElement.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                        value = input.val();\n\n                    return !(hasAttribute(input, \"required\") && (!value || value === \"\" || value.length === 0 || checkbox || radio));\n                },\n                pattern: function(input) {\n                    if (input.filter(\"[type=text],[type=email],[type=url],[type=tel],[type=search],[type=password]\").filter(\"[pattern]\").length && input.val() !== \"\") {\n                        return patternMatcher(input.val(), input.attr(\"pattern\"));\n                    }\n                    return true;\n                },\n                min: function(input) {\n                    if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[min]\").length && input.val() !== \"\") {\n                        var min = parseFloat(input.attr(\"min\")) || 0,\n                            val = kendo.parseFloat(input.val());\n\n                        return min <= val;\n                    }\n                    return true;\n                },\n                max: function(input) {\n                    if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[max]\").length && input.val() !== \"\") {\n                        var max = parseFloat(input.attr(\"max\")) || 0,\n                            val = kendo.parseFloat(input.val());\n\n                        return max >= val;\n                    }\n                    return true;\n                },\n                step: function(input) {\n                    if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[step]\").length && input.val() !== \"\") {\n                        var min = parseFloat(input.attr(\"min\")) || 0,\n                            step = kendo.parseFloat(input.attr(\"step\")) || 1,\n                            val = parseFloat(input.val()),\n                            decimals = numberOfDecimalDigits(step),\n                            raise;\n\n                        if (decimals) {\n                            raise = Math.pow(10, decimals);\n                            return ((Math.floor((val - min) * raise)) % (step * raise)) / Math.pow(100, decimals) === 0;\n                        }\n                        return ((val - min) % step) === 0;\n                    }\n                    return true;\n                },\n                email: function(input) {\n                    return matcher(input, \"[type=email],[\" + kendo.attr(\"type\") + \"=email]\", emailRegExp);\n                },\n                url: function(input) {\n                    if (input.filter(\"[type=url],[\" + kendo.attr(\"type\") + \"=url]\").length && input.val() !== \"\") {\n                        try {\n                            const url = new URL(input.val());\n                            return ALLOWED_URL_PROTOCOLS.includes(url.protocol);\n                        } catch {\n                            return false;\n                        }\n                    }\n                    return true;\n                },\n                date: function(input) {\n                    if (input.filter(\"[type^=date],[\" + kendo.attr(\"type\") + \"=date]\").length && input.val() !== \"\") {\n                        return kendo.parseDate(input.val(), input.attr(kendo.attr(\"format\"))) !== null;\n                    }\n                    return true;\n                },\n                captcha: function(input) {\n                    if (input.filter(\"[\" + kendo.attr(\"role\") + \"=captcha]\").length) {\n                        var that = this,\n                            captcha = kendo.widgetInstance(input),\n                            isValidated = function(isValid) {\n                                return typeof(isValid) !== 'undefined' && isValid !== null;\n                            };\n\n                        if (!input.data(\"captcha_validating\") && !isValidated(captcha.isValid()) && !!captcha.getCaptchaId()) {\n                            input.data(\"captcha_validating\", true);\n                            that._validating = true;\n                            captcha.validate().done(function() {\n                                that._validating = false;\n                                that._checkElement(input);\n                            }).fail(function(data) {\n                                that._validating = false;\n                                if (data.error && data.error === \"handler_not_defined\") {\n                                    window.console.warn(\"Captcha's validationHandler is not defined! You should either define a proper validation endpoint or declare a callback function to ensure the required behavior.\");\n                                }\n                            });\n                        }\n\n                        if (isValidated(captcha.isValid())) {\n                            input.removeData(\"captcha_validating\");\n                            return captcha.isValid();\n                        }\n                    }\n                    return true;\n                }\n            },\n            validateOnBlur: true,\n            validationSummary: false\n        },\n\n        _buildSelector: function(selectorConstant, validateAttributeSelector) {\n            const that = this,\n            formSelector = `,[form=\"${that.element.attr(\"id\")}\"]`;\n            let selector = selectorConstant + validateAttributeSelector;\n\n            if ( that._shouldSearchDocument) {\n                selector += formSelector;\n            }\n\n            return selector;\n        },\n\n        _allowSubmit: function() {\n            return kendo.ui.validator.allowSubmit(this.element, this.errors());\n        },\n\n        _validateOnInit: function() {\n            return kendo.ui.validator.validateOnInit(this.element);\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            this.element.off(NS);\n\n            if (this.validationSummary) {\n                this.validationSummary.off(NS);\n                this.validationSummary = null;\n            }\n        },\n\n        value: function() {\n            if (!this._isValidated) {\n                return false;\n            }\n\n            return this.errors().length === 0;\n        },\n\n        _submit: function(e) {\n            if ((!this.validate() && !this._allowSubmit()) || this._validating) {\n                e.stopPropagation();\n                e.stopImmediatePropagation();\n                e.preventDefault();\n                return false;\n            }\n            return true;\n        },\n\n        _checkElement: function(element) {\n            var state = this.value();\n\n            this.validateInput(element);\n\n            if (this.value() !== state) {\n                this.trigger(CHANGE);\n            }\n        },\n\n        _attachEvents: function() {\n            const that = this,\n            element = that._containerElement;\n\n            if (that.element.is(FORM)) {\n                that.element.on(\"submit\" + NS, that._submit.bind(that));\n            }\n\n            if (that.options.validateOnBlur) {\n                if (!element.is(INPUTSELECTOR)) {\n                    element.on(BLUR + NS, that._inputSelector, function() {\n                        that._checkElement($(this));\n                    });\n\n                    element.on(\"click\" + NS, that._checkboxSelector, function() {\n                        that._checkElement($(this));\n                    });\n                } else {\n                    element.on(BLUR + NS, function() {\n                        that._checkElement(that.element);\n                    });\n\n                    if (element.is(CHECKBOXSELECTOR)) {\n                        element.on(\"click\" + NS, function() {\n                            that._checkElement(that.element);\n                        });\n                    }\n                }\n            }\n        },\n\n        validate: function() {\n            let inputs;\n            let idx;\n            let result = false;\n            let length;\n            let containerElement = this._containerElement;\n            let isValid = this.value();\n\n            this._errors = {};\n\n            if (!this.element.is(INPUTSELECTOR)) {\n                let invalid = false;\n\n                inputs = containerElement.find(this._inputSelector);\n\n                for (idx = 0, length = inputs.length; idx < length; idx++) {\n                    if (!this.validateInput(inputs.eq(idx))) {\n                        invalid = true;\n                    }\n                }\n\n                result = !invalid;\n            } else {\n                result = this.validateInput(this.element);\n            }\n\n            if (this.options.validationSummary && !isValid) {\n                this.showValidationSummary();\n            }\n\n            this.trigger(VALIDATE, { valid: result, errors: this.errors() });\n\n            if (isValid !== result) {\n                this.trigger(CHANGE);\n            }\n\n            return result;\n        },\n\n        validateInput: function(input) {\n            input = $(input);\n\n            if (!kendo.isEmpty(input.closest('.k-otp'))) {\n                let otpContainer = input.closest(\".k-otp\");\n                input = otpContainer.find(\"input[data-role='otpinput']\");\n            }\n\n\n            this._isValidated = true;\n\n            const that = this,\n                template = that._errorTemplate,\n                result = that._checkValidity(input),\n                valid = result.valid,\n                className = \".\" + INVALIDMSG,\n                fieldName = (input.attr(NAME) || \"\"),\n                lbl = that._findMessageContainer(fieldName).add(input.next(className).filter(function() {\n                    let element = that._shouldSearchDocument ? $(document) : $(this);\n                    if (element.filter(\"[\" + kendo.attr(\"for\") + \"]\").length) {\n                        return element.attr(kendo.attr(\"for\")) === fieldName;\n                    }\n\n                    return true;\n\n                })).addClass(\"k-hidden\"),\n                messageText = !valid ? that._extractMessage(input, result.key) : \"\",\n                messageLabel = !valid ? parseHtml(template({ message: decode(messageText), field: fieldName })) : \"\",\n                wasValid = !input.attr(ARIAINVALID),\n                isInputInner = input.is(INPUTINNER),\n                inputWrapper = input.parent(INPUTWRAPPER);\n            let widgetInstance;\n\n            input.removeAttr(ARIAINVALID);\n\n            if (input.hasClass(\"k-hidden\") && input.attr(\"data-role\") == \"otpinput\") {\n                widgetInstance = kendo.widgetInstance(input);\n            }\n            if (input.hasClass(\"k-hidden\") && input.attr(\"data-role\") != \"otpinput\") {\n                widgetInstance = kendo.widgetInstance(input.closest(\".k-signature\"));\n            }\n\n            if (input.is(\"[type=radio]\")) {\n                widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n            }\n\n            if (input.is(\"[type=checkbox]\")) {\n                widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n            }\n\n            if (!valid && !input.data(\"captcha_validating\")) {\n                that._errors[fieldName] = messageText;\n                let lblId = lbl.attr('id');\n\n                that._decorateMessageContainer(messageLabel, fieldName);\n\n\n                if (lblId) {\n                    messageLabel.attr('id', lblId);\n                }\n\n                if (lbl.length !== 0) {\n                    lbl.replaceWith(messageLabel);\n                } else {\n                    widgetInstance = widgetInstance || kendo.widgetInstance(input);\n                    let parentElement = input.parent().get(0);\n                    let nextElement = input.next().get(0);\n                    let prevElement = input.prev().get(0);\n\n                    // Get the instance of the RadioGroup which is not initialized on the input element\n                    if (!widgetInstance && input.is(\"[type=radio]\")) {\n                        widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n                    }\n\n                    // Get the instance of the CheckBoxGroup which is not initialized on the input element\n                    if (!widgetInstance && input.is(\"[type=checkbox]\")) {\n                        widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n                    }\n\n                    if (widgetInstance && widgetInstance.wrapper && (widgetInstance.element !== widgetInstance.wrapper || [\"Signature\", \"RadioGroup\", \"CheckBoxGroup\"].indexOf(widgetInstance.options.name) > -1)) {\n                        messageLabel.insertAfter(widgetInstance.wrapper);\n                    } else if (parentElement && parentElement.nodeName === \"LABEL\") {\n                        // Input inside label\n                        messageLabel.insertAfter(parentElement);\n                    } else if (nextElement && isLabelFor(nextElement, input[0])) {\n                        // Input before label\n                        messageLabel.insertAfter(nextElement);\n                    } else if (prevElement && isLabelFor(prevElement, input[0])) {\n                        // Input after label\n                        messageLabel.insertAfter(input);\n                    } else if (isInputInner && inputWrapper.length) {\n                        // Input after input wrapper\n                        messageLabel.insertAfter(inputWrapper);\n                    } else {\n                        messageLabel.insertAfter(input);\n                    }\n                }\n\n                messageLabel.removeClass(\"k-hidden\");\n\n                input.attr(ARIAINVALID, true);\n            } else {\n                delete that._errors[fieldName];\n            }\n\n            if (wasValid !== valid) {\n                this.trigger(VALIDATE_INPUT, { valid: valid, input: input, error: messageText, field: fieldName });\n            }\n\n            widgetInstance = (widgetInstance && widgetInstance.options.name == \"Signature\") ? widgetInstance : kendo.widgetInstance(input);\n\n            if (!widgetInstance || !(widgetInstance._inputWrapper || widgetInstance.wrapper) || (input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                input.toggleClass(INVALIDINPUT, !valid);\n                input.toggleClass(VALIDINPUT, valid);\n            }\n\n            if (widgetInstance) {\n                let widgetName = widgetInstance.options.name;\n                let inputWrap = widgetInstance._inputWrapper || widgetInstance.wrapper;\n                let inputLabel = widgetInstance._inputLabel;\n\n                if (widgetName == \"OTPInput\") {\n                    if (!valid) {\n                        widgetInstance._addInvalidState.bind(that);\n                        widgetInstance._addInvalidState(inputWrap, true);\n                    } else {\n                        widgetInstance._removeInvalidState.bind(that);\n                        widgetInstance._removeInvalidState(inputWrap, true);\n                    }\n                } else if (inputWrap && !(input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                    inputWrap.toggleClass(INVALIDINPUT, !valid);\n                    inputWrap.toggleClass(VALIDINPUT, valid);\n                }\n                if (inputLabel) {\n                    inputLabel.toggleClass(INVALIDLABEL, !valid);\n                }\n            }\n\n            if (wasValid !== valid) {\n                let errorId = messageLabel ? messageLabel.attr(\"id\") : lbl.attr(\"id\");\n\n                that._associateMessageContainer(input, errorId);\n\n                if (this.options.validationSummary && this.options.validateOnBlur) {\n                    this.showValidationSummary();\n                }\n            }\n\n            return valid;\n        },\n\n        hideMessages: function() {\n            const that = this,\n                className = \".\" + INVALIDMSG,\n                element = that._containerElement;\n\n            that._disassociateMessageContainers();\n\n            if (!element.is(INPUTSELECTOR)) {\n                element.find(className).addClass(\"k-hidden\");\n            } else {\n                element.next(className).addClass(\"k-hidden\");\n            }\n        },\n\n        reset: function() {\n            const that = this,\n                containerElement = that._containerElement,\n                inputs = containerElement.find(\".\" + INVALIDINPUT),\n                labels = containerElement.find(\".\" + INVALIDLABEL);\n\n            that._errors = [];\n\n            that.hideMessages();\n\n            that.hideValidationSummary();\n\n            inputs.removeAttr(ARIAINVALID);\n            inputs.removeClass(INVALIDINPUT);\n            labels.removeClass(INVALIDLABEL);\n        },\n\n        _findMessageContainer: function(fieldName) {\n            let locators = kendo.ui.validator.messageLocators,\n                name,\n                containers = $();\n\n            for (let idx = 0, length = this.element.length; idx < length; idx++) {\n                let target = this._shouldSearchDocument ? document : this.element[idx];\n                containers = containers.add(searchForMessageContainer(target.getElementsByTagName(\"*\"), fieldName));\n            }\n\n            for (name in locators) {\n                containers = containers.add(locators[name].locate(this._containerElement, fieldName));\n            }\n\n            return containers;\n        },\n\n        _decorateMessageContainer: function(container, fieldName) {\n            var locators = kendo.ui.validator.messageLocators,\n                name;\n\n            container.addClass(INVALIDMSG)\n                .attr(kendo.attr(\"for\"), fieldName || \"\");\n\n            if (!container.attr(\"id\")) {\n                container.attr(\"id\", fieldName + \"-error\");\n            }\n\n            for (name in locators) {\n                locators[name].decorate(container, fieldName);\n            }\n        },\n\n        _extractMessage: function(input, ruleKey) {\n            var that = this,\n                customMessage = that.options.messages[ruleKey],\n                fieldName = input.attr(NAME),\n                nonDefaultMessage;\n\n            if (!kendo.ui.Validator.prototype.options.messages[ruleKey]) {\n                 nonDefaultMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n            }\n\n            customMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n\n            return kendo.format(input.attr(kendo.attr(ruleKey + \"-msg\")) || input.attr(\"validationMessage\") || nonDefaultMessage || customMessage || input.attr(\"title\") || \"\",\n                fieldName,\n                input.attr(ruleKey) || input.attr(kendo.attr(ruleKey)));\n        },\n\n        _checkValidity: function(input) {\n            var rules = this.options.rules,\n                rule;\n\n            for (rule in rules) {\n                if (!rules[rule].call(this, input)) {\n                    return { valid: false, key: rule };\n                }\n            }\n\n            return { valid: true };\n        },\n\n        errors: function() {\n            var results = [],\n                errors = this._errors,\n                error;\n\n            for (error in errors) {\n                results.push(errors[error]);\n            }\n            return results;\n        },\n\n        setOptions: function(options) {\n            if (options.validationSummary) {\n                this.hideValidationSummary();\n            }\n\n            kendo.deepExtend(this.options, options);\n\n            this.destroy();\n\n            this.init(this.element, this.options);\n\n            this._setEvents(this.options);\n        },\n\n        _getInputNames: function() {\n            const that = this,\n                containerElement = this._containerElement,\n                inputs = containerElement.find(that._inputSelector);\n            let sorted = [];\n\n            for (let idx = 0, length = inputs.length; idx < length; idx++) {\n                let input = $(inputs[idx]);\n\n                if (hasAttribute(input, NAME)) {\n                    // Add current name if:\n                    // - not present so far;\n                    // - present but not part of CheckBoxGroup or RadioGroup.\n                    if (sorted.indexOf(input.attr(NAME)) === -1 ||\n                        (input.closest(\".k-checkbox-list\").length === 0 &&\n                        input.closest(\".k-radio-list\").length === 0)) {\n                            sorted.push(input.attr(NAME));\n                    }\n                }\n            }\n\n            return sorted;\n        },\n\n        _associateMessageContainer: function(input, errorId) {\n            var nextFocusable = kendo.getWidgetFocusableElement(input);\n\n            if (!nextFocusable || !errorId) {\n                return;\n            }\n\n            kendo.toggleAttribute(nextFocusable, ARIADESCRIBEDBY, errorId);\n        },\n\n        _disassociateMessageContainers: function() {\n            var that = this,\n                inputs = that.element.find(\".\" + INVALIDINPUT).addBack(),\n                input, errorId;\n\n            for (var i = 0; i < inputs.length; i += 1) {\n                input = $(inputs[i]);\n\n                if (input.is(\"input\")) {\n                    errorId = that._findMessageContainer(input.attr(NAME))\n                        .add(input.next(\".\" + INVALIDMSG))\n                        .attr(\"id\");\n\n                    that._associateMessageContainer(input, errorId);\n                }\n            }\n        },\n\n        _errorsByName: function() {\n            var that = this,\n                inputNames = that._getInputNames(),\n                sorted = [];\n\n            for (var i = 0; i < inputNames.length; i += 1) {\n                var name = inputNames[i];\n\n                if (that._errors[name]) {\n                    sorted.push({\n                        field: name,\n                        message: that._errors[name]\n                    });\n                }\n            }\n\n            return sorted;\n        },\n\n        _renderSummary: function() {\n            var that = this,\n                options = this.options.validationSummary,\n                element = this.element,\n                prevElement = element.prev(),\n                container;\n\n            if (options.container) {\n                container = $(options.container);\n            } else if (prevElement && prevElement.hasClass(VALIDATIONSUMMARY)) {\n                container = prevElement;\n            } else {\n                container = $(\"<div />\").insertBefore(that.element);\n            }\n\n            container.addClass([VALIDATIONSUMMARY, MESSAGEBOX].join(\" \"));\n            container.attr(\"role\", \"alert\");\n\n            container.on(\"click\" + NS, that._summaryClick.bind(that));\n\n            return container;\n        },\n\n        _summaryClick: function(e) {\n            e.preventDefault();\n\n            var that = this,\n                link = $(e.target),\n                target = that.element.find(\"[name='\" + link.data(\"field\") + \"']\"),\n                nextFocusable;\n\n            if (!target.length) {\n                return;\n            }\n\n            nextFocusable = kendo.getWidgetFocusableElement(target);\n\n            if (nextFocusable) {\n                nextFocusable.trigger(\"focus\");\n            }\n        },\n\n        showValidationSummary: function() {\n            var that = this,\n                summary = that.validationSummary,\n                errors = that._errorsByName(),\n                errorsList;\n\n            if (!summary) {\n                summary = that.validationSummary = that._renderSummary();\n            }\n\n            errorsList = parseHtml(that._summaryTemplate({\n                errors: errors\n            }));\n\n            summary.html(errorsList);\n\n            summary.toggleClass(\"k-hidden\", !errors.length);\n        },\n\n        hideValidationSummary: function() {\n            var that = this,\n                summary = that.validationSummary;\n\n            if (!summary) {\n                return;\n            }\n\n            summary.addClass(\"k-hidden\");\n        }\n    });\n\n    kendo.ui.plugin(Validator);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}